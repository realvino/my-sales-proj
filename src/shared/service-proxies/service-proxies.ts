/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.6.6324.32485 (NJsonSchema v8.33.6323.36213) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

import * as moment from 'moment';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    isTenantAvailable(input: IsTenantAvailableInput): Observable<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processIsTenantAvailable(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processIsTenantAvailable(response_);
                } catch (e) {
                    return <Observable<IsTenantAvailableOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<IsTenantAvailableOutput>><any>Observable.throw(response_);
        });
    }

    protected processIsTenantAvailable(response: Response): Observable<IsTenantAvailableOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: IsTenantAvailableOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? IsTenantAvailableOutput.fromJS(resultData200) : new IsTenantAvailableOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<IsTenantAvailableOutput>(<any>null);
    }

    /**
     * @return Success
     */
    register(input: RegisterInput): Observable<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRegister(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRegister(response_);
                } catch (e) {
                    return <Observable<RegisterOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterOutput>><any>Observable.throw(response_);
        });
    }

    protected processRegister(response: Response): Observable<RegisterOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: RegisterOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<RegisterOutput>(<any>null);
    }

    /**
     * @return Success
     */
    sendPasswordResetCode(input: SendPasswordResetCodeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendPasswordResetCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendPasswordResetCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendPasswordResetCode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendPasswordResetCode(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    resetPassword(input: ResetPasswordInput): Observable<ResetPasswordOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processResetPassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetPassword(response_);
                } catch (e) {
                    return <Observable<ResetPasswordOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ResetPasswordOutput>><any>Observable.throw(response_);
        });
    }

    protected processResetPassword(response: Response): Observable<ResetPasswordOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ResetPasswordOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResetPasswordOutput.fromJS(resultData200) : new ResetPasswordOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ResetPasswordOutput>(<any>null);
    }

    /**
     * @return Success
     */
    sendEmailActivationLink(input: SendEmailActivationLinkInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/SendEmailActivationLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendEmailActivationLink(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendEmailActivationLink(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendEmailActivationLink(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    activateEmail(input: ActivateEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Account/ActivateEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processActivateEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processActivateEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processActivateEmail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    impersonate(input: ImpersonateInput): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Impersonate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processImpersonate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processImpersonate(response_);
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>Observable.throw(response_);
        });
    }

    protected processImpersonate(response: Response): Observable<ImpersonateOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ImpersonateOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ImpersonateOutput>(<any>null);
    }

    /**
     * @return Success
     */
    backToImpersonator(): Observable<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/BackToImpersonator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processBackToImpersonator(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBackToImpersonator(response_);
                } catch (e) {
                    return <Observable<ImpersonateOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonateOutput>><any>Observable.throw(response_);
        });
    }

    protected processBackToImpersonator(response: Response): Observable<ImpersonateOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ImpersonateOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ImpersonateOutput>(<any>null);
    }

    /**
     * @return Success
     */
    switchToLinkedAccount(input: SwitchToLinkedAccountInput): Observable<SwitchToLinkedAccountOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/SwitchToLinkedAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSwitchToLinkedAccount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSwitchToLinkedAccount(response_);
                } catch (e) {
                    return <Observable<SwitchToLinkedAccountOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<SwitchToLinkedAccountOutput>><any>Observable.throw(response_);
        });
    }

    protected processSwitchToLinkedAccount(response: Response): Observable<SwitchToLinkedAccountOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: SwitchToLinkedAccountOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchToLinkedAccountOutput.fromJS(resultData200) : new SwitchToLinkedAccountOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<SwitchToLinkedAccountOutput>(<any>null);
    }
}

@Injectable()
export class ActivityServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getActivity(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<ListResultDtoOfActivityListDto> {
        let url_ = this.baseUrl + "/api/services/app/Activity/GetActivity?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivity(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfActivityListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfActivityListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetActivity(response: Response): Observable<ListResultDtoOfActivityListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfActivityListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfActivityListDto.fromJS(resultData200) : new ListResultDtoOfActivityListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfActivityListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryWiseActivity(id: number): Observable<ListResultDtoOfActivityListDto> {
        let url_ = this.baseUrl + "/api/services/app/Activity/GetEnquiryWiseActivity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryWiseActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryWiseActivity(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfActivityListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfActivityListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryWiseActivity(response: Response): Observable<ListResultDtoOfActivityListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfActivityListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfActivityListDto.fromJS(resultData200) : new ListResultDtoOfActivityListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfActivityListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getActivityForEdit(id: number): Observable<GetActivity> {
        let url_ = this.baseUrl + "/api/services/app/Activity/GetActivityForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivityForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivityForEdit(response_);
                } catch (e) {
                    return <Observable<GetActivity>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetActivity>><any>Observable.throw(response_);
        });
    }

    protected processGetActivityForEdit(response: Response): Observable<GetActivity> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetActivity = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetActivity.fromJS(resultData200) : new GetActivity();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetActivity>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateActivity(input: CreateActivityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Activity/CreateOrUpdateActivity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateActivity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateActivity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createActivity(input: CreateActivityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Activity/CreateActivity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateActivity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateActivity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateActivity(input: CreateActivityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Activity/UpdateActivity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateActivity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateActivity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteActivity(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Activity/GetDeleteActivity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteActivity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteActivity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ActivityCommandServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getActivityCommand(filter: string, activityId: number): Observable<ListResultDtoOfActivityCommandListDto> {
        let url_ = this.baseUrl + "/api/services/app/ActivityCommand/GetActivityCommand?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (activityId !== undefined)
            url_ += "ActivityId=" + encodeURIComponent("" + activityId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivityCommand(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivityCommand(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfActivityCommandListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfActivityCommandListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetActivityCommand(response: Response): Observable<ListResultDtoOfActivityCommandListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfActivityCommandListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfActivityCommandListDto.fromJS(resultData200) : new ListResultDtoOfActivityCommandListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfActivityCommandListDto>(<any>null);
    }

    /**
     * @return Success
     */
    createActivityCommand(input: CreateActivityCommandInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ActivityCommand/CreateActivityCommand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateActivityCommand(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateActivityCommand(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateActivityCommand(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteActivityCommand(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ActivityCommand/DeleteActivityCommand?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteActivityCommand(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteActivityCommand(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteActivityCommand(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ActivityTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getActivityTypeToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/ActivityType/GetActivityTypeToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivityTypeToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivityTypeToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetActivityTypeToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getActivityType(filter: string): Observable<ListResultDtoOfActivityTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/ActivityType/GetActivityType?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivityType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivityType(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfActivityTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfActivityTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetActivityType(response: Response): Observable<ListResultDtoOfActivityTypeListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfActivityTypeListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfActivityTypeListDto.fromJS(resultData200) : new ListResultDtoOfActivityTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfActivityTypeListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getActivityTypeForEdit(id: number): Observable<GetActivityType> {
        let url_ = this.baseUrl + "/api/services/app/ActivityType/GetActivityTypeForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivityTypeForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivityTypeForEdit(response_);
                } catch (e) {
                    return <Observable<GetActivityType>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetActivityType>><any>Observable.throw(response_);
        });
    }

    protected processGetActivityTypeForEdit(response: Response): Observable<GetActivityType> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetActivityType = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetActivityType.fromJS(resultData200) : new GetActivityType();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetActivityType>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateActivityType(input: CreateActivityTypeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ActivityType/CreateOrUpdateActivityType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateActivityType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateActivityType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateActivityType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createActivityType(input: CreateActivityTypeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ActivityType/CreateActivityType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateActivityType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateActivityType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateActivityType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateActivityType(input: CreateActivityTypeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ActivityType/UpdateActivityType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateActivityType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateActivityType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateActivityType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteActivityType(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ActivityType/GetDeleteActivityType?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteActivityType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteActivityType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteActivityType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class AuditLogServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAuditLogs(startDate: moment.Moment, endDate: moment.Moment, userName: string, serviceName: string, methodName: string, browserInfo: string, hasException: boolean, minExecutionDuration: number, maxExecutionDuration: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogs?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAuditLogs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAuditLogs(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfAuditLogListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAuditLogs(response: Response): Observable<PagedResultDtoOfAuditLogListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfAuditLogListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfAuditLogListDto.fromJS(resultData200) : new PagedResultDtoOfAuditLogListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfAuditLogListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getAuditLogsToExcel(startDate: moment.Moment, endDate: moment.Moment, userName: string, serviceName: string, methodName: string, browserInfo: string, hasException: boolean, minExecutionDuration: number, maxExecutionDuration: number, sorting: string, maxResultCount: number, skipCount: number): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogsToExcel?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&"; 
        if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&"; 
        if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&"; 
        if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&"; 
        if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&"; 
        if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&"; 
        if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAuditLogsToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAuditLogsToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAuditLogsToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class CachingServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllCaches(): Observable<ListResultDtoOfCacheDto> {
        let url_ = this.baseUrl + "/api/services/app/Caching/GetAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllCaches(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllCaches(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfCacheDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfCacheDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllCaches(response: Response): Observable<ListResultDtoOfCacheDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfCacheDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfCacheDto.fromJS(resultData200) : new ListResultDtoOfCacheDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfCacheDto>(<any>null);
    }

    /**
     * @return Success
     */
    clearCache(input: EntityDtoOfString): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Caching/ClearCache";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processClearCache(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearCache(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearCache(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    clearAllCaches(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Caching/ClearAllCaches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processClearAllCaches(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearAllCaches(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearAllCaches(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ChatServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getUserChatFriendsWithSettings(): Observable<GetUserChatFriendsWithSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Chat/GetUserChatFriendsWithSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserChatFriendsWithSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserChatFriendsWithSettings(response_);
                } catch (e) {
                    return <Observable<GetUserChatFriendsWithSettingsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserChatFriendsWithSettingsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserChatFriendsWithSettings(response: Response): Observable<GetUserChatFriendsWithSettingsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetUserChatFriendsWithSettingsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserChatFriendsWithSettingsOutput.fromJS(resultData200) : new GetUserChatFriendsWithSettingsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetUserChatFriendsWithSettingsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getUserChatMessages(tenantId: number, userId: number, minMessageId: number): Observable<ListResultDtoOfChatMessageDto> {
        let url_ = this.baseUrl + "/api/services/app/Chat/GetUserChatMessages?";
        if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (minMessageId !== undefined)
            url_ += "MinMessageId=" + encodeURIComponent("" + minMessageId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserChatMessages(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserChatMessages(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfChatMessageDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfChatMessageDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUserChatMessages(response: Response): Observable<ListResultDtoOfChatMessageDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfChatMessageDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfChatMessageDto.fromJS(resultData200) : new ListResultDtoOfChatMessageDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfChatMessageDto>(<any>null);
    }

    /**
     * @return Success
     */
    markAllUnreadMessagesOfUserAsRead(input: MarkAllUnreadMessagesOfUserAsReadInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Chat/MarkAllUnreadMessagesOfUserAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processMarkAllUnreadMessagesOfUserAsRead(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processMarkAllUnreadMessagesOfUserAsRead(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processMarkAllUnreadMessagesOfUserAsRead(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class CommonLookupServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getEditionsForCombobox(onlyFreeItems: boolean): Observable<ListResultDtoOfSubscribableEditionComboboxItemDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetEditionsForCombobox?";
        if (onlyFreeItems !== undefined)
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionsForCombobox(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionsForCombobox(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfSubscribableEditionComboboxItemDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfSubscribableEditionComboboxItemDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionsForCombobox(response: Response): Observable<ListResultDtoOfSubscribableEditionComboboxItemDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfSubscribableEditionComboboxItemDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfSubscribableEditionComboboxItemDto.fromJS(resultData200) : new ListResultDtoOfSubscribableEditionComboboxItemDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfSubscribableEditionComboboxItemDto>(<any>null);
    }

    /**
     * @return Success
     */
    findUsers(input: FindUsersInput): Observable<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processFindUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processFindUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(response_);
        });
    }

    protected processFindUsers(response: Response): Observable<PagedResultDtoOfNameValueDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfNameValueDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfNameValueDto>(<any>null);
    }

    /**
     * @return Success
     */
    getDefaultEditionName(): Observable<GetDefaultEditionNameOutput> {
        let url_ = this.baseUrl + "/api/services/app/CommonLookup/GetDefaultEditionName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDefaultEditionName(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDefaultEditionName(response_);
                } catch (e) {
                    return <Observable<GetDefaultEditionNameOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDefaultEditionNameOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetDefaultEditionName(response: Response): Observable<GetDefaultEditionNameOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetDefaultEditionNameOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDefaultEditionNameOutput.fromJS(resultData200) : new GetDefaultEditionNameOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetDefaultEditionNameOutput>(<any>null);
    }
}

@Injectable()
export class CompanyContactServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getContactToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetContactToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetContactToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetCompanyToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanys(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfNewCompanyListDto> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetCompanys?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanys(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanys(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNewCompanyListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNewCompanyListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanys(response: Response): Observable<PagedResultDtoOfNewCompanyListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfNewCompanyListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNewCompanyListDto.fromJS(resultData200) : new PagedResultDtoOfNewCompanyListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfNewCompanyListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyForEdit(id: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetCompanyForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyForEdit(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyForEdit(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateCompanyOrContact(input: CreateCompanyOrContact): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/CreateOrUpdateCompanyOrContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateCompanyOrContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateCompanyOrContact(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateCompanyOrContact(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    createCompany(input: CreateCompanyOrContact): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/CreateCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCompany(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateCompany(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    updateCompany(input: CreateCompanyOrContact): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/UpdateCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCompany(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCompany(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    createContact(input: CreateCompanyOrContact): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/CreateContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateContact(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateContact(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    updateContact(input: CreateCompanyOrContact): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/UpdateContact";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateContact(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processUpdateContact(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateAddressInfo(input: CreateAddressInfo): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/CreateOrUpdateAddressInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateAddressInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateAddressInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateAddressInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createAddressInfo(input: CreateAddressInfo): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/CreateAddressInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateAddressInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateAddressInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateAddressInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateAddressInfo(input: CreateAddressInfo): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/UpdateAddressInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateAddressInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAddressInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAddressInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateContactInfo(input: CreateContactInfo): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/CreateOrUpdateContactInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateContactInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateContactInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateContactInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createContactInfo(input: CreateContactInfo): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/CreateContactInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateContactInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateContactInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateContactInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateContactInfo(input: CreateContactInfo): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/UpdateContactInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateContactInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateContactInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateContactInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAddressInfoForEdit(id: number): Observable<GetNewAddressInfo> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetAddressInfoForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAddressInfoForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAddressInfoForEdit(response_);
                } catch (e) {
                    return <Observable<GetNewAddressInfo>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNewAddressInfo>><any>Observable.throw(response_);
        });
    }

    protected processGetAddressInfoForEdit(response: Response): Observable<GetNewAddressInfo> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNewAddressInfo = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNewAddressInfo.fromJS(resultData200) : new GetNewAddressInfo();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNewAddressInfo>(<any>null);
    }

    /**
     * @return Success
     */
    getContactInfoForEdit(id: number): Observable<GetNewContactInfo> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetContactInfoForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactInfoForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactInfoForEdit(response_);
                } catch (e) {
                    return <Observable<GetNewContactInfo>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNewContactInfo>><any>Observable.throw(response_);
        });
    }

    protected processGetContactInfoForEdit(response: Response): Observable<GetNewContactInfo> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNewContactInfo = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNewContactInfo.fromJS(resultData200) : new GetNewContactInfo();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNewContactInfo>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteAddressInfo(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetDeleteAddressInfo?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteAddressInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteAddressInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteAddressInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteContactInfo(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetDeleteContactInfo?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteContactInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteContactInfo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteContactInfo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteCompany(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetDeleteCompany?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteCompany(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteCompany(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteContact(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetDeleteContact?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteContact(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteContact(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getContactForEdit(id: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetContactForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactForEdit(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetContactForEdit(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getContacts(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfNewContactListDto> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetContacts?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContacts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContacts(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNewContactListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNewContactListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetContacts(response: Response): Observable<PagedResultDtoOfNewContactListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfNewContactListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNewContactListDto.fromJS(resultData200) : new PagedResultDtoOfNewContactListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfNewContactListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyContacts(id: number): Observable<ListResultDtoOfNewContactListDto> {
        let url_ = this.baseUrl + "/api/services/app/CompanyContact/GetCompanyContacts?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyContacts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyContacts(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfNewContactListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfNewContactListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyContacts(response: Response): Observable<ListResultDtoOfNewContactListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfNewContactListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfNewContactListDto.fromJS(resultData200) : new ListResultDtoOfNewContactListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfNewContactListDto>(<any>null);
    }
}

@Injectable()
export class CurrencyServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrencyToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Currency/GetCurrencyToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrencyToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrencyToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrencyToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getCurrency(filter: string): Observable<ListResultDtoOfCurrencyListDto> {
        let url_ = this.baseUrl + "/api/services/app/Currency/GetCurrency?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrency(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrency(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfCurrencyListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfCurrencyListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrency(response: Response): Observable<ListResultDtoOfCurrencyListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfCurrencyListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfCurrencyListDto.fromJS(resultData200) : new ListResultDtoOfCurrencyListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfCurrencyListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getCurrencyNew(): Observable<GetCurrencyNew> {
        let url_ = this.baseUrl + "/api/services/app/Currency/GetCurrencyNew";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrencyNew(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrencyNew(response_);
                } catch (e) {
                    return <Observable<GetCurrencyNew>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCurrencyNew>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrencyNew(response: Response): Observable<GetCurrencyNew> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetCurrencyNew = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrencyNew.fromJS(resultData200) : new GetCurrencyNew();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetCurrencyNew>(<any>null);
    }

    /**
     * @return Success
     */
    getCurrencyForEdit(id: number): Observable<GetCurrency> {
        let url_ = this.baseUrl + "/api/services/app/Currency/GetCurrencyForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrencyForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrencyForEdit(response_);
                } catch (e) {
                    return <Observable<GetCurrency>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCurrency>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrencyForEdit(response: Response): Observable<GetCurrency> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetCurrency = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrency.fromJS(resultData200) : new GetCurrency();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetCurrency>(<any>null);
    }

    /**
     * @return Success
     */
    getCustomCurrencyForEdit(id: number): Observable<GetCustomCurrency> {
        let url_ = this.baseUrl + "/api/services/app/Currency/GetCustomCurrencyForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCustomCurrencyForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCustomCurrencyForEdit(response_);
                } catch (e) {
                    return <Observable<GetCustomCurrency>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCustomCurrency>><any>Observable.throw(response_);
        });
    }

    protected processGetCustomCurrencyForEdit(response: Response): Observable<GetCustomCurrency> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetCustomCurrency = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCustomCurrency.fromJS(resultData200) : new GetCustomCurrency();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetCustomCurrency>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateCurrency(input: CreateCurrencyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/CreateOrUpdateCurrency";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateCurrency(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateCurrency(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateCurrency(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createCurrencyAsync(input: CreateCurrencyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/CreateCurrencyAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateCurrencyAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCurrencyAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateCurrencyAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateCurrencyAsync(input: CreateCurrencyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/UpdateCurrencyAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateCurrencyAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCurrencyAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCurrencyAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateCustomCurrency(input: CreateCustomCurrencyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/CreateOrUpdateCustomCurrency";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateCustomCurrency(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateCustomCurrency(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateCustomCurrency(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createCustomCurrencyAsync(input: CreateCustomCurrencyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/CreateCustomCurrencyAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateCustomCurrencyAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCustomCurrencyAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateCustomCurrencyAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateCustomCurrencyAsync(input: CreateCustomCurrencyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/UpdateCustomCurrencyAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateCustomCurrencyAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCustomCurrencyAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCustomCurrencyAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteCurrency(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/DeleteCurrency?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteCurrency(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteCurrency(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteCurrency(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteCustomCurrency(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/DeleteCustomCurrency?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteCustomCurrency(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteCustomCurrency(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteCustomCurrency(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    currencyConversion(input: CurrencyListDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Currency/CurrencyConversion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCurrencyConversion(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCurrencyConversion(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCurrencyConversion(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class CustomerTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCustomerTypeExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/CustomerType/GetCustomerTypeExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCustomerTypeExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCustomerTypeExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCustomerTypeExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getNewCustomerType(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfNewCustomerTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/CustomerType/GetNewCustomerType?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewCustomerType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewCustomerType(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNewCustomerTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNewCustomerTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetNewCustomerType(response: Response): Observable<PagedResultDtoOfNewCustomerTypeListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfNewCustomerTypeListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNewCustomerTypeListDto.fromJS(resultData200) : new PagedResultDtoOfNewCustomerTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfNewCustomerTypeListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getNewCustomerTypeForEdit(id: number): Observable<GetNewCustomerType> {
        let url_ = this.baseUrl + "/api/services/app/CustomerType/GetNewCustomerTypeForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewCustomerTypeForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewCustomerTypeForEdit(response_);
                } catch (e) {
                    return <Observable<GetNewCustomerType>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNewCustomerType>><any>Observable.throw(response_);
        });
    }

    protected processGetNewCustomerTypeForEdit(response: Response): Observable<GetNewCustomerType> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNewCustomerType = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNewCustomerType.fromJS(resultData200) : new GetNewCustomerType();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNewCustomerType>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateNewCustomerType(input: NewCustomerTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CustomerType/CreateOrUpdateNewCustomerType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateNewCustomerType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateNewCustomerType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateNewCustomerType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createCustomerTypeAsync(input: NewCustomerTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CustomerType/CreateCustomerTypeAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateCustomerTypeAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateCustomerTypeAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateCustomerTypeAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateCustomerTypeAsync(input: NewCustomerTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CustomerType/UpdateCustomerTypeAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateCustomerTypeAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCustomerTypeAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCustomerTypeAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteNewCustomerType(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/CustomerType/GetDeleteNewCustomerType?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteNewCustomerType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteNewCustomerType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteNewCustomerType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class DashboardGraphServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    wonTargetDevelopment(input: NullableIdDto): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/DashboardGraph/WonTargetDevelopment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processWonTargetDevelopment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processWonTargetDevelopment(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processWonTargetDevelopment(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getActivepotential(id: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/DashboardGraph/GetActivepotential?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivepotential(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivepotential(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetActivepotential(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }
}

@Injectable()
export class DeliveryServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getDelivery(filter: string): Observable<ListResultDtoOfDeliveryList> {
        let url_ = this.baseUrl + "/api/services/app/Delivery/GetDelivery?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDelivery(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDelivery(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfDeliveryList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfDeliveryList>><any>Observable.throw(response_);
        });
    }

    protected processGetDelivery(response: Response): Observable<ListResultDtoOfDeliveryList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfDeliveryList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfDeliveryList.fromJS(resultData200) : new ListResultDtoOfDeliveryList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfDeliveryList>(<any>null);
    }

    /**
     * @return Success
     */
    getDeliveryForEdit(id: number): Observable<GetDelivery> {
        let url_ = this.baseUrl + "/api/services/app/Delivery/GetDeliveryForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeliveryForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeliveryForEdit(response_);
                } catch (e) {
                    return <Observable<GetDelivery>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDelivery>><any>Observable.throw(response_);
        });
    }

    protected processGetDeliveryForEdit(response: Response): Observable<GetDelivery> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetDelivery = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDelivery.fromJS(resultData200) : new GetDelivery();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetDelivery>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateDelivery(input: CreateDeliveryInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Delivery/CreateOrUpdateDelivery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateDelivery(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateDelivery(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateDelivery(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createDelivery(input: CreateDeliveryInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Delivery/CreateDelivery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateDelivery(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateDelivery(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateDelivery(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateDelivery(input: CreateDeliveryInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Delivery/UpdateDelivery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateDelivery(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateDelivery(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateDelivery(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteDelivery(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Delivery/GetDeleteDelivery?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteDelivery(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteDelivery(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteDelivery(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class DemoUiComponentsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    sendAndGetDate(date: moment.Moment): Observable<DateToStringOutput> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetDate?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendAndGetDate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetDate(response_);
                } catch (e) {
                    return <Observable<DateToStringOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<DateToStringOutput>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetDate(response: Response): Observable<DateToStringOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: DateToStringOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DateToStringOutput.fromJS(resultData200) : new DateToStringOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<DateToStringOutput>(<any>null);
    }

    /**
     * @return Success
     */
    sendAndGetDateTime(date: moment.Moment): Observable<DateToStringOutput> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetDateTime?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendAndGetDateTime(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetDateTime(response_);
                } catch (e) {
                    return <Observable<DateToStringOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<DateToStringOutput>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetDateTime(response: Response): Observable<DateToStringOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: DateToStringOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DateToStringOutput.fromJS(resultData200) : new DateToStringOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<DateToStringOutput>(<any>null);
    }

    /**
     * @return Success
     */
    sendAndGetDateRange(startDate: moment.Moment, endDate: moment.Moment): Observable<DateToStringOutput> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetDateRange?";
        if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendAndGetDateRange(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetDateRange(response_);
                } catch (e) {
                    return <Observable<DateToStringOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<DateToStringOutput>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetDateRange(response: Response): Observable<DateToStringOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: DateToStringOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? DateToStringOutput.fromJS(resultData200) : new DateToStringOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<DateToStringOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getCountries(searchTerm: string): Observable<NameValueOfString[]> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/GetCountries?";
        if (searchTerm !== undefined)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCountries(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCountries(response_);
                } catch (e) {
                    return <Observable<NameValueOfString[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<NameValueOfString[]>><any>Observable.throw(response_);
        });
    }

    protected processGetCountries(response: Response): Observable<NameValueOfString[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: NameValueOfString[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(NameValueOfString.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<NameValueOfString[]>(<any>null);
    }

    /**
     * @return Success
     */
    sendAndGetSelectedCountries(selectedCountries: NameValueOfString[]): Observable<NameValueOfString[]> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetSelectedCountries";
        url_ = url_.replace(/[?&]$/, "");

        let contentData_: any = [];
        if (selectedCountries) {
            for (let item of selectedCountries)
                contentData_.push(item.toJSON());
        }
        const content_ = JSON.stringify(selectedCountries ? contentData_ : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendAndGetSelectedCountries(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetSelectedCountries(response_);
                } catch (e) {
                    return <Observable<NameValueOfString[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<NameValueOfString[]>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetSelectedCountries(response: Response): Observable<NameValueOfString[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: NameValueOfString[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(NameValueOfString.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<NameValueOfString[]>(<any>null);
    }

    /**
     * @return Success
     */
    sendAndGetValue(input: string): Observable<StringOutput> {
        let url_ = this.baseUrl + "/api/services/app/DemoUiComponents/SendAndGetValue?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendAndGetValue(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendAndGetValue(response_);
                } catch (e) {
                    return <Observable<StringOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<StringOutput>><any>Observable.throw(response_);
        });
    }

    protected processSendAndGetValue(response: Response): Observable<StringOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: StringOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? StringOutput.fromJS(resultData200) : new StringOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<StringOutput>(<any>null);
    }
}

@Injectable()
export class EditionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getEditions(): Observable<ListResultDtoOfEditionListDto> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditions(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfEditionListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEditionListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEditions(response: Response): Observable<ListResultDtoOfEditionListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfEditionListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEditionListDto.fromJS(resultData200) : new ListResultDtoOfEditionListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfEditionListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getEditionForEdit(id: number): Observable<GetEditionEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionForEdit(response_);
                } catch (e) {
                    return <Observable<GetEditionEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEditionEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionForEdit(response: Response): Observable<GetEditionEditOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetEditionEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEditionEditOutput.fromJS(resultData200) : new GetEditionEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetEditionEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateEdition(input: CreateOrUpdateEditionDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/CreateOrUpdateEdition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateEdition(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateEdition(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteEdition(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Edition/DeleteEdition?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteEdition(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteEdition(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getEditionComboboxItems(selectedEditionId: number, addAllItem: boolean, onlyFreeItems: boolean): Observable<SubscribableEditionComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Edition/GetEditionComboboxItems?";
        if (selectedEditionId !== undefined)
            url_ += "selectedEditionId=" + encodeURIComponent("" + selectedEditionId) + "&"; 
        if (addAllItem !== undefined)
            url_ += "addAllItem=" + encodeURIComponent("" + addAllItem) + "&"; 
        if (onlyFreeItems !== undefined)
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionComboboxItems(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionComboboxItems(response_);
                } catch (e) {
                    return <Observable<SubscribableEditionComboboxItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SubscribableEditionComboboxItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionComboboxItems(response: Response): Observable<SubscribableEditionComboboxItemDto[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: SubscribableEditionComboboxItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SubscribableEditionComboboxItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<SubscribableEditionComboboxItemDto[]>(<any>null);
    }
}

@Injectable()
export class EnquiryServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getEnquiryQuotationKanbanOld(filter: string): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/GetEnquiryQuotationKanbanOld?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryQuotationKanbanOld(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryQuotationKanbanOld(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryQuotationKanbanOld(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/GetEnquiryToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryGrid(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfEnquiryList> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/GetEnquiryGrid?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryGrid(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryGrid(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfEnquiryList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfEnquiryList>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryGrid(response: Response): Observable<PagedResultDtoOfEnquiryList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfEnquiryList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfEnquiryList.fromJS(resultData200) : new PagedResultDtoOfEnquiryList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfEnquiryList>(<any>null);
    }

    /**
     * @return Success
     */
    getNotificationEnquiry(): Observable<ListResultDtoOfEnquiryList> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/GetNotificationEnquiry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNotificationEnquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNotificationEnquiry(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfEnquiryList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfEnquiryList>><any>Observable.throw(response_);
        });
    }

    protected processGetNotificationEnquiry(response: Response): Observable<ListResultDtoOfEnquiryList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfEnquiryList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfEnquiryList.fromJS(resultData200) : new ListResultDtoOfEnquiryList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfEnquiryList>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryKanban(filter: string): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/GetEnquiryKanban?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryKanban(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryKanban(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryKanban(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateEnquiry(input: EnquiryInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/CreateOrUpdateEnquiry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateEnquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateEnquiry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateEnquiry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createEnquiryAsync(input: EnquiryInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/CreateEnquiryAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateEnquiryAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateEnquiryAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateEnquiryAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateEnquiryAsync(input: EnquiryInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/UpdateEnquiryAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateEnquiryAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateEnquiryAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateEnquiryAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryForEdit(id: number): Observable<GetEnquiry> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/GetEnquiryForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryForEdit(response_);
                } catch (e) {
                    return <Observable<GetEnquiry>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEnquiry>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryForEdit(response: Response): Observable<GetEnquiry> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetEnquiry = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEnquiry.fromJS(resultData200) : new GetEnquiry();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetEnquiry>(<any>null);
    }

    /**
     * @return Success
     */
    enquiryKanbanUpdateAsync(input: EnquiryKanbanUpdateInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/EnquiryKanbanUpdateAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processEnquiryKanbanUpdateAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processEnquiryKanbanUpdateAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processEnquiryKanbanUpdateAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    enquiryQuotationKanbanUpdateAsync(input: EnquiryQuotationKanbanUpdateInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/EnquiryQuotationKanbanUpdateAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processEnquiryQuotationKanbanUpdateAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processEnquiryQuotationKanbanUpdateAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processEnquiryQuotationKanbanUpdateAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryQuotation(enquiryId: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfQuotationList> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/GetEnquiryQuotation?";
        if (enquiryId !== undefined)
            url_ += "EnquiryId=" + encodeURIComponent("" + enquiryId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryQuotation(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuotationList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuotationList>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryQuotation(response: Response): Observable<PagedResultDtoOfQuotationList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfQuotationList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuotationList.fromJS(resultData200) : new PagedResultDtoOfQuotationList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfQuotationList>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryQuotationsKanban(filter: string): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/GetEnquiryQuotationsKanban?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryQuotationsKanban(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryQuotationsKanban(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryQuotationsKanban(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteEnquiry(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/GetDeleteEnquiry?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteEnquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteEnquiry(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteEnquiry(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getInquiryKanban(filter: string): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/GetInquiryKanban?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetInquiryKanban(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetInquiryKanban(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetInquiryKanban(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getGlobalReport(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfEnquiryQuotationKanbanList> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/GetGlobalReport?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetGlobalReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetGlobalReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfEnquiryQuotationKanbanList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfEnquiryQuotationKanbanList>><any>Observable.throw(response_);
        });
    }

    protected processGetGlobalReport(response: Response): Observable<PagedResultDtoOfEnquiryQuotationKanbanList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfEnquiryQuotationKanbanList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfEnquiryQuotationKanbanList.fromJS(resultData200) : new PagedResultDtoOfEnquiryQuotationKanbanList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfEnquiryQuotationKanbanList>(<any>null);
    }

    /**
     * @return Success
     */
    getGlobalReportToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Enquiry/GetGlobalReportToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetGlobalReportToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetGlobalReportToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetGlobalReportToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

@Injectable()
export class FreightServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getFreight(filter: string): Observable<ListResultDtoOfFreightListDto> {
        let url_ = this.baseUrl + "/api/services/app/Freight/GetFreight?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetFreight(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetFreight(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfFreightListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfFreightListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetFreight(response: Response): Observable<ListResultDtoOfFreightListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfFreightListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfFreightListDto.fromJS(resultData200) : new ListResultDtoOfFreightListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfFreightListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getFreightForEdit(id: number): Observable<GetFreight> {
        let url_ = this.baseUrl + "/api/services/app/Freight/GetFreightForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetFreightForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetFreightForEdit(response_);
                } catch (e) {
                    return <Observable<GetFreight>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetFreight>><any>Observable.throw(response_);
        });
    }

    protected processGetFreightForEdit(response: Response): Observable<GetFreight> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetFreight = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetFreight.fromJS(resultData200) : new GetFreight();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetFreight>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateFreight(input: CreateFreightInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Freight/CreateOrUpdateFreight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateFreight(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateFreight(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateFreight(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createFreight(input: CreateFreightInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Freight/CreateFreight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateFreight(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateFreight(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateFreight(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateFreight(input: CreateFreightInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Freight/UpdateFreight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateFreight(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateFreight(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateFreight(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteFreight(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Freight/GetDeleteFreight?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteFreight(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteFreight(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteFreight(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class FriendshipServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    createFriendshipRequest(input: CreateFriendshipRequestInput): Observable<FriendDto> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/CreateFriendshipRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateFriendshipRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateFriendshipRequest(response_);
                } catch (e) {
                    return <Observable<FriendDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FriendDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateFriendshipRequest(response: Response): Observable<FriendDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FriendDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FriendDto.fromJS(resultData200) : new FriendDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FriendDto>(<any>null);
    }

    /**
     * @return Success
     */
    createFriendshipRequestByUserName(input: CreateFriendshipRequestByUserNameInput): Observable<FriendDto> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/CreateFriendshipRequestByUserName";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateFriendshipRequestByUserName(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateFriendshipRequestByUserName(response_);
                } catch (e) {
                    return <Observable<FriendDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FriendDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateFriendshipRequestByUserName(response: Response): Observable<FriendDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FriendDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FriendDto.fromJS(resultData200) : new FriendDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FriendDto>(<any>null);
    }

    /**
     * @return Success
     */
    blockUser(input: BlockUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/BlockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processBlockUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processBlockUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processBlockUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    unblockUser(input: UnblockUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/UnblockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnblockUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnblockUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnblockUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    acceptFriendshipRequest(input: AcceptFriendshipRequestInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Friendship/AcceptFriendshipRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAcceptFriendshipRequest(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAcceptFriendshipRequest(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAcceptFriendshipRequest(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class HostDashboardServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getDashboardStatisticsData(incomeStatisticsDateInterval: IncomeStatisticsDateInterval, startDate: moment.Moment, endDate: moment.Moment): Observable<HostDashboardData> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetDashboardStatisticsData?";
        if (incomeStatisticsDateInterval !== undefined)
            url_ += "IncomeStatisticsDateInterval=" + encodeURIComponent("" + incomeStatisticsDateInterval) + "&"; 
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDashboardStatisticsData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDashboardStatisticsData(response_);
                } catch (e) {
                    return <Observable<HostDashboardData>><any>Observable.throw(e);
                }
            } else
                return <Observable<HostDashboardData>><any>Observable.throw(response_);
        });
    }

    protected processGetDashboardStatisticsData(response: Response): Observable<HostDashboardData> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: HostDashboardData = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? HostDashboardData.fromJS(resultData200) : new HostDashboardData();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<HostDashboardData>(<any>null);
    }

    /**
     * @return Success
     */
    getIncomeStatistics(incomeStatisticsDateInterval: IncomeStatisticsDateInterval2, startDate: moment.Moment, endDate: moment.Moment): Observable<GetIncomeStatisticsDataOutput> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetIncomeStatistics?";
        if (incomeStatisticsDateInterval !== undefined)
            url_ += "IncomeStatisticsDateInterval=" + encodeURIComponent("" + incomeStatisticsDateInterval) + "&"; 
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetIncomeStatistics(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetIncomeStatistics(response_);
                } catch (e) {
                    return <Observable<GetIncomeStatisticsDataOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetIncomeStatisticsDataOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetIncomeStatistics(response: Response): Observable<GetIncomeStatisticsDataOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetIncomeStatisticsDataOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetIncomeStatisticsDataOutput.fromJS(resultData200) : new GetIncomeStatisticsDataOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetIncomeStatisticsDataOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getEditionTenantStatistics(startDate: moment.Moment, endDate: moment.Moment): Observable<GetEditionTenantStatisticsOutput> {
        let url_ = this.baseUrl + "/api/services/app/HostDashboard/GetEditionTenantStatistics?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate.toJSON()) + "&"; 
        if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionTenantStatistics(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionTenantStatistics(response_);
                } catch (e) {
                    return <Observable<GetEditionTenantStatisticsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetEditionTenantStatisticsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionTenantStatistics(response: Response): Observable<GetEditionTenantStatisticsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetEditionTenantStatisticsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetEditionTenantStatisticsOutput.fromJS(resultData200) : new GetEditionTenantStatisticsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetEditionTenantStatisticsOutput>(<any>null);
    }
}

@Injectable()
export class HostSettingsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllSettings(): Observable<HostSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllSettings(response_);
                } catch (e) {
                    return <Observable<HostSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<HostSettingsEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllSettings(response: Response): Observable<HostSettingsEditDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: HostSettingsEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? HostSettingsEditDto.fromJS(resultData200) : new HostSettingsEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<HostSettingsEditDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateAllSettings(input: HostSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAllSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAllSettings(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/HostSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendTestEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendTestEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendTestEmail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class InfoTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getInfoTypeToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/InfoType/GetInfoTypeToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetInfoTypeToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetInfoTypeToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetInfoTypeToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getNewInfoType(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfNewInfoTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/InfoType/GetNewInfoType?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewInfoType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewInfoType(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNewInfoTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNewInfoTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetNewInfoType(response: Response): Observable<PagedResultDtoOfNewInfoTypeListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfNewInfoTypeListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNewInfoTypeListDto.fromJS(resultData200) : new PagedResultDtoOfNewInfoTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfNewInfoTypeListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getNewInfoTypeForEdit(id: number): Observable<GetNewInfoType> {
        let url_ = this.baseUrl + "/api/services/app/InfoType/GetNewInfoTypeForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNewInfoTypeForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNewInfoTypeForEdit(response_);
                } catch (e) {
                    return <Observable<GetNewInfoType>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNewInfoType>><any>Observable.throw(response_);
        });
    }

    protected processGetNewInfoTypeForEdit(response: Response): Observable<GetNewInfoType> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNewInfoType = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNewInfoType.fromJS(resultData200) : new GetNewInfoType();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNewInfoType>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateNewInfoType(input: NewInfoTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/InfoType/CreateOrUpdateNewInfoType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateNewInfoType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateNewInfoType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateNewInfoType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createNewInfoTypeAsync(input: NewInfoTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/InfoType/CreateNewInfoTypeAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateNewInfoTypeAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateNewInfoTypeAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateNewInfoTypeAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateNewInfoTypeAsync(input: NewInfoTypeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/InfoType/UpdateNewInfoTypeAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateNewInfoTypeAsync(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateNewInfoTypeAsync(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateNewInfoTypeAsync(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteNewInfoType(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/InfoType/GetDeleteNewInfoType?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteNewInfoType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteNewInfoType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteNewInfoType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class LanguageServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLanguages(): Observable<GetLanguagesOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLanguages(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLanguages(response_);
                } catch (e) {
                    return <Observable<GetLanguagesOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLanguagesOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetLanguages(response: Response): Observable<GetLanguagesOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetLanguagesOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguagesOutput.fromJS(resultData200) : new GetLanguagesOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetLanguagesOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getLanguageForEdit(id: number): Observable<GetLanguageForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLanguageForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLanguageForEdit(response_);
                } catch (e) {
                    return <Observable<GetLanguageForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLanguageForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetLanguageForEdit(response: Response): Observable<GetLanguageForEditOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetLanguageForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLanguageForEditOutput.fromJS(resultData200) : new GetLanguageForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetLanguageForEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateLanguage(input: CreateOrUpdateLanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/CreateOrUpdateLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateLanguage(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteLanguage(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/DeleteLanguage?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteLanguage(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    setDefaultLanguage(input: SetDefaultLanguageInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/SetDefaultLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSetDefaultLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetDefaultLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetDefaultLanguage(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getLanguageTexts(maxResultCount: number, skipCount: number, sorting: string, sourceName: string, baseLanguageName: string, targetLanguageName: string, targetValueFilter: string, filterText: string): Observable<PagedResultDtoOfLanguageTextListDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageTexts?";
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (sourceName !== undefined)
            url_ += "SourceName=" + encodeURIComponent("" + sourceName) + "&"; 
        if (baseLanguageName !== undefined)
            url_ += "BaseLanguageName=" + encodeURIComponent("" + baseLanguageName) + "&"; 
        if (targetLanguageName !== undefined)
            url_ += "TargetLanguageName=" + encodeURIComponent("" + targetLanguageName) + "&"; 
        if (targetValueFilter !== undefined)
            url_ += "TargetValueFilter=" + encodeURIComponent("" + targetValueFilter) + "&"; 
        if (filterText !== undefined)
            url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLanguageTexts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLanguageTexts(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfLanguageTextListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLanguageTextListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLanguageTexts(response: Response): Observable<PagedResultDtoOfLanguageTextListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfLanguageTextListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLanguageTextListDto.fromJS(resultData200) : new PagedResultDtoOfLanguageTextListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfLanguageTextListDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateLanguageText(input: UpdateLanguageTextInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/UpdateLanguageText";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateLanguageText(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateLanguageText(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateLanguageText(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MilestoneServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMilestoneToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Milestone/GetMilestoneToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMilestoneToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMilestoneToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMilestoneToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMilestones(filter: string): Observable<ListResultDtoOfMileStoneListDto> {
        let url_ = this.baseUrl + "/api/services/app/Milestone/GetMilestones?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMilestones(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMilestones(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfMileStoneListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfMileStoneListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMilestones(response: Response): Observable<ListResultDtoOfMileStoneListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfMileStoneListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfMileStoneListDto.fromJS(resultData200) : new ListResultDtoOfMileStoneListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfMileStoneListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMilestoneForEdit(id: number): Observable<GetMileStone> {
        let url_ = this.baseUrl + "/api/services/app/Milestone/GetMilestoneForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMilestoneForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMilestoneForEdit(response_);
                } catch (e) {
                    return <Observable<GetMileStone>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMileStone>><any>Observable.throw(response_);
        });
    }

    protected processGetMilestoneForEdit(response: Response): Observable<GetMileStone> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetMileStone = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetMileStone.fromJS(resultData200) : new GetMileStone();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetMileStone>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateMilestone(input: CreateMileInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Milestone/CreateOrUpdateMilestone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateMilestone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateMilestone(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateMilestone(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createMilestone(input: CreateMileInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Milestone/CreateMilestone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateMilestone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMilestone(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMilestone(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateMilestone(input: CreateMileInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Milestone/UpdateMilestone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateMilestone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMilestone(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMilestone(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteMilestone(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Milestone/GetDeleteMilestone?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteMilestone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteMilestone(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteMilestone(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getMileStoneDetailForEdit(id: number): Observable<GetMilestoneDetail> {
        let url_ = this.baseUrl + "/api/services/app/Milestone/GetMileStoneDetailForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMileStoneDetailForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMileStoneDetailForEdit(response_);
                } catch (e) {
                    return <Observable<GetMilestoneDetail>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMilestoneDetail>><any>Observable.throw(response_);
        });
    }

    protected processGetMileStoneDetailForEdit(response: Response): Observable<GetMilestoneDetail> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetMilestoneDetail = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetMilestoneDetail.fromJS(resultData200) : new GetMilestoneDetail();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetMilestoneDetail>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateMileStoneDetail(input: CreateMileStoneDetailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Milestone/CreateOrUpdateMileStoneDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateMileStoneDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateMileStoneDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateMileStoneDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createStatusDetail(input: CreateMileStoneDetailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Milestone/CreateStatusDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateStatusDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateStatusDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateStatusDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateStatusDetail(input: CreateMileStoneDetailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Milestone/UpdateStatusDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateStatusDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateStatusDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateStatusDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteMileStoneDetail(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Milestone/GetDeleteMileStoneDetail?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteMileStoneDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteMileStoneDetail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteMileStoneDetail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class MileStoneStatusServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMileStoneStatusToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/MileStoneStatus/GetMileStoneStatusToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMileStoneStatusToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMileStoneStatusToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMileStoneStatusToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMileStoneStatus(filter: string): Observable<ListResultDtoOfMileStoneStatusListDto> {
        let url_ = this.baseUrl + "/api/services/app/MileStoneStatus/GetMileStoneStatus?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMileStoneStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMileStoneStatus(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfMileStoneStatusListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfMileStoneStatusListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetMileStoneStatus(response: Response): Observable<ListResultDtoOfMileStoneStatusListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfMileStoneStatusListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfMileStoneStatusListDto.fromJS(resultData200) : new ListResultDtoOfMileStoneStatusListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfMileStoneStatusListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getMileStoneStatusForEdit(id: number): Observable<GetMileStoneStatus> {
        let url_ = this.baseUrl + "/api/services/app/MileStoneStatus/GetMileStoneStatusForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMileStoneStatusForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMileStoneStatusForEdit(response_);
                } catch (e) {
                    return <Observable<GetMileStoneStatus>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMileStoneStatus>><any>Observable.throw(response_);
        });
    }

    protected processGetMileStoneStatusForEdit(response: Response): Observable<GetMileStoneStatus> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetMileStoneStatus = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetMileStoneStatus.fromJS(resultData200) : new GetMileStoneStatus();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetMileStoneStatus>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateMileStoneStatus(input: CreateMileStoneStatusInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MileStoneStatus/CreateOrUpdateMileStoneStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateMileStoneStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateMileStoneStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateMileStoneStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createMileStoneStatus(input: CreateMileStoneStatusInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MileStoneStatus/CreateMileStoneStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateMileStoneStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMileStoneStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMileStoneStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateMileStoneStatus(input: CreateMileStoneStatusInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MileStoneStatus/UpdateMileStoneStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateMileStoneStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateMileStoneStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateMileStoneStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteMileStoneStatus(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/MileStoneStatus/DeleteMileStoneStatus?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteMileStoneStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteMileStoneStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteMileStoneStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class NotificationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getUserNotifications(state: State, maxResultCount: number, skipCount: number): Observable<GetNotificationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetUserNotifications?";
        if (state !== undefined)
            url_ += "State=" + encodeURIComponent("" + state) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserNotifications(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserNotifications(response_);
                } catch (e) {
                    return <Observable<GetNotificationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNotificationsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserNotifications(response: Response): Observable<GetNotificationsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNotificationsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationsOutput.fromJS(resultData200) : new GetNotificationsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNotificationsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    setAllNotificationsAsRead(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/SetAllNotificationsAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSetAllNotificationsAsRead(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetAllNotificationsAsRead(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetAllNotificationsAsRead(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    setNotificationAsRead(input: EntityDtoOfGuid): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/SetNotificationAsRead";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSetNotificationAsRead(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSetNotificationAsRead(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSetNotificationAsRead(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getNotificationSettings(): Observable<GetNotificationSettingsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Notification/GetNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetNotificationSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetNotificationSettings(response_);
                } catch (e) {
                    return <Observable<GetNotificationSettingsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNotificationSettingsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetNotificationSettings(response: Response): Observable<GetNotificationSettingsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetNotificationSettingsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNotificationSettingsOutput.fromJS(resultData200) : new GetNotificationSettingsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetNotificationSettingsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    updateNotificationSettings(input: UpdateNotificationSettingsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Notification/UpdateNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateNotificationSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateNotificationSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateNotificationSettings(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class OrganizationUnitServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getOrganizationUnits(): Observable<ListResultDtoOfOrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnits";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOrganizationUnits(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOrganizationUnits(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfOrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfOrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrganizationUnits(response: Response): Observable<ListResultDtoOfOrganizationUnitDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfOrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfOrganizationUnitDto.fromJS(resultData200) : new ListResultDtoOfOrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfOrganizationUnitDto>(<any>null);
    }

    /**
     * @return Success
     */
    getOrganizationUnitUsers(id: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfOrganizationUnitUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnitUsers?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetOrganizationUnitUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetOrganizationUnitUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfOrganizationUnitUserListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetOrganizationUnitUsers(response: Response): Observable<PagedResultDtoOfOrganizationUnitUserListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfOrganizationUnitUserListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfOrganizationUnitUserListDto.fromJS(resultData200) : new PagedResultDtoOfOrganizationUnitUserListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfOrganizationUnitUserListDto>(<any>null);
    }

    /**
     * @return Success
     */
    createOrganizationUnit(input: CreateOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/CreateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrganizationUnit(response: Response): Observable<OrganizationUnitDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: OrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<OrganizationUnitDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateOrganizationUnit(input: UpdateOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/UpdateOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processUpdateOrganizationUnit(response: Response): Observable<OrganizationUnitDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: OrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<OrganizationUnitDto>(<any>null);
    }

    /**
     * @return Success
     */
    moveOrganizationUnit(input: MoveOrganizationUnitInput): Observable<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/MoveOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processMoveOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processMoveOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<OrganizationUnitDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrganizationUnitDto>><any>Observable.throw(response_);
        });
    }

    protected processMoveOrganizationUnit(response: Response): Observable<OrganizationUnitDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: OrganizationUnitDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? OrganizationUnitDto.fromJS(resultData200) : new OrganizationUnitDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<OrganizationUnitDto>(<any>null);
    }

    /**
     * @return Success
     */
    deleteOrganizationUnit(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/DeleteOrganizationUnit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteOrganizationUnit(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    removeUserFromOrganizationUnit(userId: number, organizationUnitId: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveUserFromOrganizationUnit?";
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (organizationUnitId !== undefined)
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRemoveUserFromOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRemoveUserFromOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processRemoveUserFromOrganizationUnit(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    addUsersToOrganizationUnit(input: UsersToOrganizationUnitInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddUsersToOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAddUsersToOrganizationUnit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAddUsersToOrganizationUnit(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAddUsersToOrganizationUnit(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    findUsers(input: FindOrganizationUnitUsersInput): Observable<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/FindUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processFindUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processFindUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfNameValueDto>><any>Observable.throw(response_);
        });
    }

    protected processFindUsers(response: Response): Observable<PagedResultDtoOfNameValueDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfNameValueDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfNameValueDto>(<any>null);
    }
}

@Injectable()
export class PackingServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getPacking(filter: string): Observable<ListResultDtoOfPackingListDto> {
        let url_ = this.baseUrl + "/api/services/app/Packing/GetPacking?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPacking(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPacking(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfPackingListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfPackingListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPacking(response: Response): Observable<ListResultDtoOfPackingListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfPackingListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfPackingListDto.fromJS(resultData200) : new ListResultDtoOfPackingListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfPackingListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getPackingForEdit(id: number): Observable<GetPacking> {
        let url_ = this.baseUrl + "/api/services/app/Packing/GetPackingForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPackingForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPackingForEdit(response_);
                } catch (e) {
                    return <Observable<GetPacking>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPacking>><any>Observable.throw(response_);
        });
    }

    protected processGetPackingForEdit(response: Response): Observable<GetPacking> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetPacking = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPacking.fromJS(resultData200) : new GetPacking();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetPacking>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdatePacking(input: CreatePackingInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Packing/CreateOrUpdatePacking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdatePacking(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdatePacking(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdatePacking(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createPacking(input: CreatePackingInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Packing/CreatePacking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreatePacking(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreatePacking(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreatePacking(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updatePacking(input: CreatePackingInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Packing/UpdatePacking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdatePacking(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdatePacking(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdatePacking(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeletePacking(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Packing/GetDeletePacking?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeletePacking(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeletePacking(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeletePacking(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class PaymentServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getPaymentInfo(upgradeEditionId: number): Observable<PaymentInfoDto> {
        let url_ = this.baseUrl + "/api/services/app/Payment/GetPaymentInfo?";
        if (upgradeEditionId !== undefined)
            url_ += "UpgradeEditionId=" + encodeURIComponent("" + upgradeEditionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPaymentInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentInfo(response_);
                } catch (e) {
                    return <Observable<PaymentInfoDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PaymentInfoDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentInfo(response: Response): Observable<PaymentInfoDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PaymentInfoDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PaymentInfoDto.fromJS(resultData200) : new PaymentInfoDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PaymentInfoDto>(<any>null);
    }

    /**
     * @return Success
     */
    createPayment(input: CreatePaymentDto): Observable<any> {
        let url_ = this.baseUrl + "/api/services/app/Payment/CreatePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreatePayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreatePayment(response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processCreatePayment(response: Response): Observable<any> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @return Success
     */
    executePayment(input: ExecutePaymentDto): Observable<any> {
        let url_ = this.baseUrl + "/api/services/app/Payment/ExecutePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processExecutePayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExecutePayment(response_);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(e);
                }
            } else
                return <Observable<any>><any>Observable.throw(response_);
        });
    }

    protected processExecutePayment(response: Response): Observable<any> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : {};
                }
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any>(<any>null);
    }

    /**
     * @return Success
     */
    getPaymentHistory(sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfSubscriptionPaymentListDto> {
        let url_ = this.baseUrl + "/api/services/app/Payment/GetPaymentHistory?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPaymentHistory(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentHistory(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfSubscriptionPaymentListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfSubscriptionPaymentListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentHistory(response: Response): Observable<PagedResultDtoOfSubscriptionPaymentListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfSubscriptionPaymentListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfSubscriptionPaymentListDto.fromJS(resultData200) : new PagedResultDtoOfSubscriptionPaymentListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfSubscriptionPaymentListDto>(<any>null);
    }
}

@Injectable()
export class PermissionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllPermissions(): Observable<ListResultDtoOfFlatPermissionWithLevelDto> {
        let url_ = this.baseUrl + "/api/services/app/Permission/GetAllPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllPermissions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllPermissions(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfFlatPermissionWithLevelDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllPermissions(response: Response): Observable<ListResultDtoOfFlatPermissionWithLevelDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfFlatPermissionWithLevelDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfFlatPermissionWithLevelDto.fromJS(resultData200) : new ListResultDtoOfFlatPermissionWithLevelDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfFlatPermissionWithLevelDto>(<any>null);
    }
}

@Injectable()
export class PriceLevelServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getPriceLevel(filter: string): Observable<ListResultDtoOfPriceLevelList> {
        let url_ = this.baseUrl + "/api/services/app/PriceLevel/GetPriceLevel?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPriceLevel(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfPriceLevelList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfPriceLevelList>><any>Observable.throw(response_);
        });
    }

    protected processGetPriceLevel(response: Response): Observable<ListResultDtoOfPriceLevelList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfPriceLevelList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfPriceLevelList.fromJS(resultData200) : new ListResultDtoOfPriceLevelList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfPriceLevelList>(<any>null);
    }

    /**
     * @return Success
     */
    getPriceLevelForEdit(id: number): Observable<GetPriceLevel> {
        let url_ = this.baseUrl + "/api/services/app/PriceLevel/GetPriceLevelForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPriceLevelForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPriceLevelForEdit(response_);
                } catch (e) {
                    return <Observable<GetPriceLevel>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPriceLevel>><any>Observable.throw(response_);
        });
    }

    protected processGetPriceLevelForEdit(response: Response): Observable<GetPriceLevel> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetPriceLevel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPriceLevel.fromJS(resultData200) : new GetPriceLevel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetPriceLevel>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdatePriceLevel(input: PriceLevelCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PriceLevel/CreateOrUpdatePriceLevel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdatePriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdatePriceLevel(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdatePriceLevel(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createPriceLevel(input: PriceLevelCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PriceLevel/CreatePriceLevel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreatePriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreatePriceLevel(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreatePriceLevel(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updatePriceLevel(input: PriceLevelCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PriceLevel/UpdatePriceLevel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdatePriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdatePriceLevel(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdatePriceLevel(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deletePriceLevel(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/PriceLevel/DeletePriceLevel?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeletePriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeletePriceLevel(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeletePriceLevel(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ProductServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getProductToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetProductToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProduct(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfProductListDto> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetProduct?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProduct(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfProductListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfProductListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProduct(response: Response): Observable<PagedResultDtoOfProductListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfProductListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfProductListDto.fromJS(resultData200) : new PagedResultDtoOfProductListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfProductListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProductForEdit(id: number): Observable<GetProduct> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetProductForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductForEdit(response_);
                } catch (e) {
                    return <Observable<GetProduct>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProduct>><any>Observable.throw(response_);
        });
    }

    protected processGetProductForEdit(response: Response): Observable<GetProduct> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProduct = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProduct.fromJS(resultData200) : new GetProduct();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProduct>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProduct(input: CreateProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/CreateOrUpdateProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProduct(input: CreateProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/CreateProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProduct(input: CreateProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/UpdateProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteProduct(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetDeleteProduct?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getProductLevelPriceList(productId: number): Observable<ListResultDtoOfPriceLevelProductList> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetProductLevelPriceList?";
        if (productId !== undefined)
            url_ += "ProductId=" + encodeURIComponent("" + productId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductLevelPriceList(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductLevelPriceList(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfPriceLevelProductList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfPriceLevelProductList>><any>Observable.throw(response_);
        });
    }

    protected processGetProductLevelPriceList(response: Response): Observable<ListResultDtoOfPriceLevelProductList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfPriceLevelProductList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfPriceLevelProductList.fromJS(resultData200) : new ListResultDtoOfPriceLevelProductList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfPriceLevelProductList>(<any>null);
    }

    /**
     * @return Success
     */
    getPriceLevelProductForEdit(id: number): Observable<GetPriceLevelProduct> {
        let url_ = this.baseUrl + "/api/services/app/Product/GetPriceLevelProductForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPriceLevelProductForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPriceLevelProductForEdit(response_);
                } catch (e) {
                    return <Observable<GetPriceLevelProduct>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPriceLevelProduct>><any>Observable.throw(response_);
        });
    }

    protected processGetPriceLevelProductForEdit(response: Response): Observable<GetPriceLevelProduct> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetPriceLevelProduct = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPriceLevelProduct.fromJS(resultData200) : new GetPriceLevelProduct();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetPriceLevelProduct>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdatePriceLevelProduct(input: CreatePriceLevelProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/CreateOrUpdatePriceLevelProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdatePriceLevelProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdatePriceLevelProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdatePriceLevelProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createPriceLevelProduct(input: CreatePriceLevelProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/CreatePriceLevelProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreatePriceLevelProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreatePriceLevelProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreatePriceLevelProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updatePriceLevelProduct(input: CreatePriceLevelProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/UpdatePriceLevelProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdatePriceLevelProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdatePriceLevelProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdatePriceLevelProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deletePriceLevelProduct(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Product/DeletePriceLevelProduct?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeletePriceLevelProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeletePriceLevelProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeletePriceLevelProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ProductGroupServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getProductGroupToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetProductGroupToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductGroupToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductGroupToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductGroupToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProductGroup(filter: string): Observable<ListResultDtoOfProductGroupListDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetProductGroup?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductGroup(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfProductGroupListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfProductGroupListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductGroup(response: Response): Observable<ListResultDtoOfProductGroupListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfProductGroupListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfProductGroupListDto.fromJS(resultData200) : new ListResultDtoOfProductGroupListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfProductGroupListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProductGroupForEdit(id: number): Observable<GetProductGroup> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetProductGroupForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductGroupForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductGroupForEdit(response_);
                } catch (e) {
                    return <Observable<GetProductGroup>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProductGroup>><any>Observable.throw(response_);
        });
    }

    protected processGetProductGroupForEdit(response: Response): Observable<GetProductGroup> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProductGroup = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProductGroup.fromJS(resultData200) : new GetProductGroup();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProductGroup>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProductGroup(input: CreateProductGroupInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/CreateOrUpdateProductGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProductGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProductGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductGroup(input: CreateProductGroupInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/CreateProductGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProductGroup(input: CreateProductGroupInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/UpdateProductGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProductGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteProductGroup(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductGroup/GetDeleteProductGroup?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteProductGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteProductGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ProductSubGroupServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getProductSubGroupToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/GetProductSubGroupToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSubGroupToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSubGroupToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSubGroupToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProductSubGroup(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfProductSubGpListDto> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/GetProductSubGroup?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSubGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSubGroup(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfProductSubGpListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfProductSubGpListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSubGroup(response: Response): Observable<PagedResultDtoOfProductSubGpListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfProductSubGpListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfProductSubGpListDto.fromJS(resultData200) : new PagedResultDtoOfProductSubGpListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfProductSubGpListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProductSubGroupForEdit(id: number): Observable<GetProductSubGp> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/GetProductSubGroupForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSubGroupForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSubGroupForEdit(response_);
                } catch (e) {
                    return <Observable<GetProductSubGp>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProductSubGp>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSubGroupForEdit(response: Response): Observable<GetProductSubGp> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProductSubGp = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProductSubGp.fromJS(resultData200) : new GetProductSubGp();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProductSubGp>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateProductSubGroup(input: CreateProductSubGpInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/CreateOrUpdateProductSubGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateProductSubGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateProductSubGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateProductSubGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createProductSubGroup(input: CreateProductSubGpInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/CreateProductSubGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateProductSubGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateProductSubGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateProductSubGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProductSubGroup(input: CreateProductSubGpInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/UpdateProductSubGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProductSubGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProductSubGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProductSubGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteProductSubGroup(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/ProductSubGroup/GetDeleteProductSubGroup?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteProductSubGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteProductSubGroup(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteProductSubGroup(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ProfileServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrentUserProfileForEdit(): Observable<CurrentUserProfileEditDto> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetCurrentUserProfileForEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrentUserProfileForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrentUserProfileForEdit(response_);
                } catch (e) {
                    return <Observable<CurrentUserProfileEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<CurrentUserProfileEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrentUserProfileForEdit(response: Response): Observable<CurrentUserProfileEditDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: CurrentUserProfileEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CurrentUserProfileEditDto.fromJS(resultData200) : new CurrentUserProfileEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<CurrentUserProfileEditDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateGoogleAuthenticatorKey(): Observable<UpdateGoogleAuthenticatorKeyOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateGoogleAuthenticatorKey";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateGoogleAuthenticatorKey(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateGoogleAuthenticatorKey(response_);
                } catch (e) {
                    return <Observable<UpdateGoogleAuthenticatorKeyOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UpdateGoogleAuthenticatorKeyOutput>><any>Observable.throw(response_);
        });
    }

    protected processUpdateGoogleAuthenticatorKey(response: Response): Observable<UpdateGoogleAuthenticatorKeyOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: UpdateGoogleAuthenticatorKeyOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UpdateGoogleAuthenticatorKeyOutput.fromJS(resultData200) : new UpdateGoogleAuthenticatorKeyOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<UpdateGoogleAuthenticatorKeyOutput>(<any>null);
    }

    /**
     * @return Success
     */
    sendVerificationSms(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/SendVerificationSms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendVerificationSms(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendVerificationSms(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendVerificationSms(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    verifySmsCode(input: VerifySmsCodeInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/VerifySmsCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processVerifySmsCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processVerifySmsCode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processVerifySmsCode(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateCurrentUserProfile(input: CurrentUserProfileEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateCurrentUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateCurrentUserProfile(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateCurrentUserProfile(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateCurrentUserProfile(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    changePassword(input: ChangePasswordInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangePassword(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangePassword(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processChangePassword(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateProfilePicture(input: UpdateProfilePictureInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateProfilePicture(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateProfilePicture(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateProfilePicture(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getPasswordComplexitySetting(): Observable<GetPasswordComplexitySettingOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetPasswordComplexitySetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPasswordComplexitySetting(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPasswordComplexitySetting(response_);
                } catch (e) {
                    return <Observable<GetPasswordComplexitySettingOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetPasswordComplexitySettingOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetPasswordComplexitySetting(response: Response): Observable<GetPasswordComplexitySettingOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetPasswordComplexitySettingOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetPasswordComplexitySettingOutput.fromJS(resultData200) : new GetPasswordComplexitySettingOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetPasswordComplexitySettingOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getProfilePicture(): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProfilePicture(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProfilePicture(response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetProfilePicture(response: Response): Observable<GetProfilePictureOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProfilePictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProfilePictureOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getFriendProfilePictureById(profilePictureId: string, userId: number, tenantId: number): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetFriendProfilePictureById?";
        if (profilePictureId !== undefined)
            url_ += "ProfilePictureId=" + encodeURIComponent("" + profilePictureId) + "&"; 
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (tenantId !== undefined)
            url_ += "TenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetFriendProfilePictureById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetFriendProfilePictureById(response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetFriendProfilePictureById(response: Response): Observable<GetProfilePictureOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProfilePictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProfilePictureOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getProfilePictureById(profilePictureId: string): Observable<GetProfilePictureOutput> {
        let url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePictureById?";
        if (profilePictureId !== undefined)
            url_ += "profilePictureId=" + encodeURIComponent("" + profilePictureId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProfilePictureById(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProfilePictureById(response_);
                } catch (e) {
                    return <Observable<GetProfilePictureOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProfilePictureOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetProfilePictureById(response: Response): Observable<GetProfilePictureOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetProfilePictureOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetProfilePictureOutput.fromJS(resultData200) : new GetProfilePictureOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetProfilePictureOutput>(<any>null);
    }

    /**
     * @return Success
     */
    changeLanguage(input: ChangeUserLanguageDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/ChangeLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processChangeLanguage(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processChangeLanguage(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processChangeLanguage(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateLogo(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Profile/UpdateLogo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateLogo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateLogo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateLogo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class QPaymentServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getPayments(filter: string): Observable<ListResultDtoOfQPaymentListDto> {
        let url_ = this.baseUrl + "/api/services/app/QPayment/GetPayments?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPayments(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPayments(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfQPaymentListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfQPaymentListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetPayments(response: Response): Observable<ListResultDtoOfQPaymentListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfQPaymentListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfQPaymentListDto.fromJS(resultData200) : new ListResultDtoOfQPaymentListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfQPaymentListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getPaymentForEdit(id: number): Observable<GetQPayments> {
        let url_ = this.baseUrl + "/api/services/app/QPayment/GetPaymentForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPaymentForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentForEdit(response_);
                } catch (e) {
                    return <Observable<GetQPayments>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetQPayments>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentForEdit(response: Response): Observable<GetQPayments> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetQPayments = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetQPayments.fromJS(resultData200) : new GetQPayments();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetQPayments>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdatePayment(input: QPaymentInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QPayment/CreateOrUpdatePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdatePayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdatePayment(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdatePayment(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createPayment(input: QPaymentInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QPayment/CreatePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreatePayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreatePayment(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreatePayment(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updatePayment(input: QPaymentInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QPayment/UpdatePayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdatePayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdatePayment(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdatePayment(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeletePayment(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QPayment/GetDeletePayment?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeletePayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeletePayment(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeletePayment(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class QuotationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getQuotation(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfQuotationList> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotation?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotation(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuotationList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuotationList>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotation(response: Response): Observable<PagedResultDtoOfQuotationList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfQuotationList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuotationList.fromJS(resultData200) : new PagedResultDtoOfQuotationList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfQuotationList>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationForEdit(id: number): Observable<GetQuotation> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationForEdit(response_);
                } catch (e) {
                    return <Observable<GetQuotation>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetQuotation>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationForEdit(response: Response): Observable<GetQuotation> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetQuotation = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetQuotation.fromJS(resultData200) : new GetQuotation();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetQuotation>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateQuotation(input: CreateQuotationInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateOrUpdateQuotation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateQuotation(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateQuotation(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    createQuotation(input: CreateQuotationInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateQuotation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateQuotation(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processCreateQuotation(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    quotationRevision(quotationId: number): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/QuotationRevision?";
        if (quotationId !== undefined)
            url_ += "QuotationId=" + encodeURIComponent("" + quotationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processQuotationRevision(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processQuotationRevision(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processQuotationRevision(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    deleteQuotation(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/DeleteQuotation?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteQuotation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteQuotation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateQuotationTotal(input: UpdateQuotationTotal): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/UpdateQuotationTotal";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateQuotationTotal(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateQuotationTotal(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateQuotationTotal(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationProduct(quotationId: number): Observable<ListResultDtoOfQuotationProductList> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationProduct?";
        if (quotationId !== undefined)
            url_ += "QuotationId=" + encodeURIComponent("" + quotationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationProduct(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfQuotationProductList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfQuotationProductList>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationProduct(response: Response): Observable<ListResultDtoOfQuotationProductList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfQuotationProductList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfQuotationProductList.fromJS(resultData200) : new ListResultDtoOfQuotationProductList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfQuotationProductList>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationProductForEdit(id: number): Observable<GetQuotationProduct> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationProductForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationProductForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationProductForEdit(response_);
                } catch (e) {
                    return <Observable<GetQuotationProduct>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetQuotationProduct>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationProductForEdit(response: Response): Observable<GetQuotationProduct> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetQuotationProduct = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetQuotationProduct.fromJS(resultData200) : new GetQuotationProduct();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetQuotationProduct>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateQuotationProduct(input: CreateQuotationProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateOrUpdateQuotationProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateQuotationProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateQuotationProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateQuotationProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createQuotationProduct(input: CreateQuotationProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateQuotationProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateQuotationProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateQuotationProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateQuotationProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateQuotationProduct(input: CreateQuotationProductInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/UpdateQuotationProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateQuotationProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateQuotationProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateQuotationProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteQuotationProduct(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/DeleteQuotationProduct?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteQuotationProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteQuotationProduct(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteQuotationProduct(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationService(quotationId: number): Observable<ListResultDtoOfQuotationServiceList> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationService?";
        if (quotationId !== undefined)
            url_ += "QuotationId=" + encodeURIComponent("" + quotationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationService(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationService(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfQuotationServiceList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfQuotationServiceList>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationService(response: Response): Observable<ListResultDtoOfQuotationServiceList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfQuotationServiceList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfQuotationServiceList.fromJS(resultData200) : new ListResultDtoOfQuotationServiceList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfQuotationServiceList>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationServiceForEdit(id: number): Observable<GetQuotationService> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationServiceForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationServiceForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationServiceForEdit(response_);
                } catch (e) {
                    return <Observable<GetQuotationService>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetQuotationService>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationServiceForEdit(response: Response): Observable<GetQuotationService> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetQuotationService = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetQuotationService.fromJS(resultData200) : new GetQuotationService();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetQuotationService>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateQuotationService(input: CreateQuotationServiceInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateOrUpdateQuotationService";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateQuotationService(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateQuotationService(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateQuotationService(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createQuotationService(input: CreateQuotationServiceInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateQuotationService";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateQuotationService(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateQuotationService(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateQuotationService(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateQuotationService(input: CreateQuotationServiceInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/UpdateQuotationService";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateQuotationService(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateQuotationService(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateQuotationService(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteQuotationService(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/DeleteQuotationService?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteQuotationService(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteQuotationService(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteQuotationService(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationPreviewForEdit(id: number): Observable<GetQuotationPreview> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationPreviewForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationPreviewForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationPreviewForEdit(response_);
                } catch (e) {
                    return <Observable<GetQuotationPreview>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetQuotationPreview>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationPreviewForEdit(response: Response): Observable<GetQuotationPreview> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetQuotationPreview = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetQuotationPreview.fromJS(resultData200) : new GetQuotationPreview();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetQuotationPreview>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesOrder(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfQuotationList> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetSalesOrder?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesOrder(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesOrder(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuotationList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuotationList>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesOrder(response: Response): Observable<PagedResultDtoOfQuotationList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfQuotationList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuotationList.fromJS(resultData200) : new PagedResultDtoOfQuotationList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfQuotationList>(<any>null);
    }

    /**
     * @return Success
     */
    getPaymentSchedule(quotationId: number): Observable<ListResultDtoOfPaymentScheduleLists> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetPaymentSchedule?";
        if (quotationId !== undefined)
            url_ += "QuotationId=" + encodeURIComponent("" + quotationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPaymentSchedule(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentSchedule(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfPaymentScheduleLists>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfPaymentScheduleLists>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentSchedule(response: Response): Observable<ListResultDtoOfPaymentScheduleLists> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfPaymentScheduleLists = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfPaymentScheduleLists.fromJS(resultData200) : new ListResultDtoOfPaymentScheduleLists();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfPaymentScheduleLists>(<any>null);
    }

    /**
     * @return Success
     */
    getPaymentScheduleForEdit(id: number): Observable<PaymentScheduleLists> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetPaymentScheduleForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPaymentScheduleForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentScheduleForEdit(response_);
                } catch (e) {
                    return <Observable<PaymentScheduleLists>><any>Observable.throw(e);
                }
            } else
                return <Observable<PaymentScheduleLists>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentScheduleForEdit(response: Response): Observable<PaymentScheduleLists> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PaymentScheduleLists = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PaymentScheduleLists.fromJS(resultData200) : new PaymentScheduleLists();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PaymentScheduleLists>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdatePaymentSchedule(input: CreatePaymentScheduleInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateOrUpdatePaymentSchedule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdatePaymentSchedule(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdatePaymentSchedule(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdatePaymentSchedule(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createPaymentSchedule(input: CreatePaymentScheduleInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreatePaymentSchedule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreatePaymentSchedule(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreatePaymentSchedule(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreatePaymentSchedule(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updatePaymentSchedule(input: CreatePaymentScheduleInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/UpdatePaymentSchedule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdatePaymentSchedule(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdatePaymentSchedule(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdatePaymentSchedule(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deletePaymentSchedule(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/DeletePaymentSchedule?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeletePaymentSchedule(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeletePaymentSchedule(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeletePaymentSchedule(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getPaymentCollection(quotationId: number): Observable<ListResultDtoOfPaymentCollectionLists> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetPaymentCollection?";
        if (quotationId !== undefined)
            url_ += "QuotationId=" + encodeURIComponent("" + quotationId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPaymentCollection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentCollection(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfPaymentCollectionLists>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfPaymentCollectionLists>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentCollection(response: Response): Observable<ListResultDtoOfPaymentCollectionLists> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfPaymentCollectionLists = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfPaymentCollectionLists.fromJS(resultData200) : new ListResultDtoOfPaymentCollectionLists();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfPaymentCollectionLists>(<any>null);
    }

    /**
     * @return Success
     */
    getPaymentCollectionForEdit(id: number): Observable<PaymentCollectionLists> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetPaymentCollectionForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPaymentCollectionForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPaymentCollectionForEdit(response_);
                } catch (e) {
                    return <Observable<PaymentCollectionLists>><any>Observable.throw(e);
                }
            } else
                return <Observable<PaymentCollectionLists>><any>Observable.throw(response_);
        });
    }

    protected processGetPaymentCollectionForEdit(response: Response): Observable<PaymentCollectionLists> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PaymentCollectionLists = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PaymentCollectionLists.fromJS(resultData200) : new PaymentCollectionLists();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PaymentCollectionLists>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdatePaymentCollection(input: CreatePaymentCollectionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateOrUpdatePaymentCollection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdatePaymentCollection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdatePaymentCollection(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdatePaymentCollection(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createPaymentCollection(input: CreatePaymentCollectionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreatePaymentCollection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreatePaymentCollection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreatePaymentCollection(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreatePaymentCollection(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updatePaymentCollection(input: CreatePaymentCollectionInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/UpdatePaymentCollection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdatePaymentCollection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdatePaymentCollection(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdatePaymentCollection(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deletePaymentCollection(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/DeletePaymentCollection?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeletePaymentCollection(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeletePaymentCollection(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeletePaymentCollection(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    convertCurrency(amount: number, fromCurrency: string, toCurrency: string): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/ConvertCurrency?";
        if (amount !== undefined)
            url_ += "amount=" + encodeURIComponent("" + amount) + "&"; 
        if (fromCurrency !== undefined)
            url_ += "fromCurrency=" + encodeURIComponent("" + fromCurrency) + "&"; 
        if (toCurrency !== undefined)
            url_ += "toCurrency=" + encodeURIComponent("" + toCurrency) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processConvertCurrency(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processConvertCurrency(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processConvertCurrency(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    updateQuotation(input: CreateQuotationInput): Observable<number> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/UpdateQuotation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateQuotation(response_);
                } catch (e) {
                    return <Observable<number>><any>Observable.throw(e);
                }
            } else
                return <Observable<number>><any>Observable.throw(response_);
        });
    }

    protected processUpdateQuotation(response: Response): Observable<number> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: number = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<number>(<any>null);
    }

    /**
     * @return Success
     */
    quotationRevoke(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/QuotationRevoke";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processQuotationRevoke(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processQuotationRevoke(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processQuotationRevoke(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getRevisionQuotation(quotationId: number, filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfQuotationList> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetRevisionQuotation?";
        if (quotationId !== undefined)
            url_ += "QuotationId=" + encodeURIComponent("" + quotationId) + "&"; 
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRevisionQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRevisionQuotation(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuotationList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuotationList>><any>Observable.throw(response_);
        });
    }

    protected processGetRevisionQuotation(response: Response): Observable<PagedResultDtoOfQuotationList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfQuotationList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuotationList.fromJS(resultData200) : new PagedResultDtoOfQuotationList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfQuotationList>(<any>null);
    }
}

@Injectable()
export class QuotationStatusServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getQuotationStatus(filter: string): Observable<ListResultDtoOfQuotationStatusList> {
        let url_ = this.baseUrl + "/api/services/app/QuotationStatus/GetQuotationStatus?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationStatus(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfQuotationStatusList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfQuotationStatusList>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationStatus(response: Response): Observable<ListResultDtoOfQuotationStatusList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfQuotationStatusList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfQuotationStatusList.fromJS(resultData200) : new ListResultDtoOfQuotationStatusList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfQuotationStatusList>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationStatusForEdit(id: number): Observable<GetQuotationStatus> {
        let url_ = this.baseUrl + "/api/services/app/QuotationStatus/GetQuotationStatusForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationStatusForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationStatusForEdit(response_);
                } catch (e) {
                    return <Observable<GetQuotationStatus>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetQuotationStatus>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationStatusForEdit(response: Response): Observable<GetQuotationStatus> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetQuotationStatus = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetQuotationStatus.fromJS(resultData200) : new GetQuotationStatus();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetQuotationStatus>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateQuotationStatus(input: CreateQuotationStatusInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationStatus/CreateOrUpdateQuotationStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateQuotationStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateQuotationStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateQuotationStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createQuotationStatus(input: CreateQuotationStatusInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationStatus/CreateQuotationStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateQuotationStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateQuotationStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateQuotationStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateQuotationStatus(input: CreateQuotationStatusInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationStatus/UpdateQuotationStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateQuotationStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateQuotationStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateQuotationStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteQuotationStatus(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationStatus/GetDeleteQuotationStatus?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteQuotationStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteQuotationStatus(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteQuotationStatus(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ReasonServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getReason(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfReasonListDto> {
        let url_ = this.baseUrl + "/api/services/app/Reason/GetReason?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetReason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetReason(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfReasonListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfReasonListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetReason(response: Response): Observable<PagedResultDtoOfReasonListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfReasonListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfReasonListDto.fromJS(resultData200) : new PagedResultDtoOfReasonListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfReasonListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getReasonForEdit(id: number): Observable<GetReason> {
        let url_ = this.baseUrl + "/api/services/app/Reason/GetReasonForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetReasonForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetReasonForEdit(response_);
                } catch (e) {
                    return <Observable<GetReason>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetReason>><any>Observable.throw(response_);
        });
    }

    protected processGetReasonForEdit(response: Response): Observable<GetReason> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetReason = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetReason.fromJS(resultData200) : new GetReason();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetReason>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateReason(input: CreateReasonInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Reason/CreateOrUpdateReason";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateReason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateReason(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateReason(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createReason(input: CreateReasonInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Reason/CreateReason";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateReason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateReason(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateReason(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateReason(input: CreateReasonInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Reason/UpdateReason";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateReason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateReason(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateReason(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteReason(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Reason/GetDeleteReason?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteReason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteReason(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteReason(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class ReportServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getQuotationSubmittedReport(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfReportList> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetQuotationSubmittedReport?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationSubmittedReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationSubmittedReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfReportList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfReportList>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationSubmittedReport(response: Response): Observable<PagedResultDtoOfReportList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfReportList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfReportList.fromJS(resultData200) : new PagedResultDtoOfReportList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfReportList>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationWonReport(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfReportList> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetQuotationWonReport?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationWonReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationWonReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfReportList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfReportList>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationWonReport(response: Response): Observable<PagedResultDtoOfReportList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfReportList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfReportList.fromJS(resultData200) : new PagedResultDtoOfReportList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfReportList>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationLostReport(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfReportList> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetQuotationLostReport?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationLostReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationLostReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfReportList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfReportList>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationLostReport(response: Response): Observable<PagedResultDtoOfReportList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfReportList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfReportList.fromJS(resultData200) : new PagedResultDtoOfReportList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfReportList>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationReport(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfQuotationReportDtoList> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetQuotationReport?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuotationReportDtoList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuotationReportDtoList>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationReport(response: Response): Observable<PagedResultDtoOfQuotationReportDtoList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfQuotationReportDtoList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuotationReportDtoList.fromJS(resultData200) : new PagedResultDtoOfQuotationReportDtoList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfQuotationReportDtoList>(<any>null);
    }

    /**
     * @return Success
     */
    getInquiryReport(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfQuotationReportDtoList> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetInquiryReport?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetInquiryReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetInquiryReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfQuotationReportDtoList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfQuotationReportDtoList>><any>Observable.throw(response_);
        });
    }

    protected processGetInquiryReport(response: Response): Observable<PagedResultDtoOfQuotationReportDtoList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfQuotationReportDtoList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfQuotationReportDtoList.fromJS(resultData200) : new PagedResultDtoOfQuotationReportDtoList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfQuotationReportDtoList>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyReport(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfCompanyReportList> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetCompanyReport?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfCompanyReportList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfCompanyReportList>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyReport(response: Response): Observable<PagedResultDtoOfCompanyReportList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfCompanyReportList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfCompanyReportList.fromJS(resultData200) : new PagedResultDtoOfCompanyReportList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfCompanyReportList>(<any>null);
    }

    /**
     * @return Success
     */
    getContactReport(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfCompanyReportList> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetContactReport?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfCompanyReportList>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfCompanyReportList>><any>Observable.throw(response_);
        });
    }

    protected processGetContactReport(response: Response): Observable<PagedResultDtoOfCompanyReportList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfCompanyReportList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfCompanyReportList.fromJS(resultData200) : new PagedResultDtoOfCompanyReportList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfCompanyReportList>(<any>null);
    }

    /**
     * @return Success
     */
    getGlobalReportColumn(): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetGlobalReportColumn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetGlobalReportColumn(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetGlobalReportColumn(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetGlobalReportColumn(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getSubmittedReportToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetSubmittedReportToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSubmittedReportToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSubmittedReportToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetSubmittedReportToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getWonReportToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetWonReportToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetWonReportToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetWonReportToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetWonReportToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getLostReportToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetLostReportToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLostReportToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLostReportToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLostReportToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    createReport(input: ReportGeneratorInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Report/CreateReport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateReport(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateReport(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getFilterReport(reportTypeId: number, reportViewId: number, salesperson: string, creator: string, country: string, customerType: string, currency: string, mileStone: string, mileStoneStatus: string, quotationStatus: string, enquiryCreationTime: string, enquiryCreationTimeId: number, quotationCreationTime: string, quotationCreationTimeId: number, submittedDate: string, submittedDateId: number, wonDate: string, wonDateId: number, lostDate: string, lostDateId: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfFilterListOutput> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetFilterReport?";
        if (reportTypeId !== undefined)
            url_ += "ReportTypeId=" + encodeURIComponent("" + reportTypeId) + "&"; 
        if (reportViewId !== undefined)
            url_ += "ReportViewId=" + encodeURIComponent("" + reportViewId) + "&"; 
        if (salesperson !== undefined)
            url_ += "Salesperson=" + encodeURIComponent("" + salesperson) + "&"; 
        if (creator !== undefined)
            url_ += "Creator=" + encodeURIComponent("" + creator) + "&"; 
        if (country !== undefined)
            url_ += "Country=" + encodeURIComponent("" + country) + "&"; 
        if (customerType !== undefined)
            url_ += "CustomerType=" + encodeURIComponent("" + customerType) + "&"; 
        if (currency !== undefined)
            url_ += "Currency=" + encodeURIComponent("" + currency) + "&"; 
        if (mileStone !== undefined)
            url_ += "MileStone=" + encodeURIComponent("" + mileStone) + "&"; 
        if (mileStoneStatus !== undefined)
            url_ += "MileStoneStatus=" + encodeURIComponent("" + mileStoneStatus) + "&"; 
        if (quotationStatus !== undefined)
            url_ += "QuotationStatus=" + encodeURIComponent("" + quotationStatus) + "&"; 
        if (enquiryCreationTime !== undefined)
            url_ += "EnquiryCreationTime=" + encodeURIComponent("" + enquiryCreationTime) + "&"; 
        if (enquiryCreationTimeId !== undefined)
            url_ += "EnquiryCreationTimeId=" + encodeURIComponent("" + enquiryCreationTimeId) + "&"; 
        if (quotationCreationTime !== undefined)
            url_ += "QuotationCreationTime=" + encodeURIComponent("" + quotationCreationTime) + "&"; 
        if (quotationCreationTimeId !== undefined)
            url_ += "QuotationCreationTimeId=" + encodeURIComponent("" + quotationCreationTimeId) + "&"; 
        if (submittedDate !== undefined)
            url_ += "SubmittedDate=" + encodeURIComponent("" + submittedDate) + "&"; 
        if (submittedDateId !== undefined)
            url_ += "SubmittedDateId=" + encodeURIComponent("" + submittedDateId) + "&"; 
        if (wonDate !== undefined)
            url_ += "WonDate=" + encodeURIComponent("" + wonDate) + "&"; 
        if (wonDateId !== undefined)
            url_ += "WonDateId=" + encodeURIComponent("" + wonDateId) + "&"; 
        if (lostDate !== undefined)
            url_ += "LostDate=" + encodeURIComponent("" + lostDate) + "&"; 
        if (lostDateId !== undefined)
            url_ += "LostDateId=" + encodeURIComponent("" + lostDateId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetFilterReport(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetFilterReport(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfFilterListOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfFilterListOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetFilterReport(response: Response): Observable<PagedResultDtoOfFilterListOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfFilterListOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfFilterListOutput.fromJS(resultData200) : new PagedResultDtoOfFilterListOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfFilterListOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryReportColumn(): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetEnquiryReportColumn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryReportColumn(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryReportColumn(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryReportColumn(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationReportColumn(): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetQuotationReportColumn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationReportColumn(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationReportColumn(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationReportColumn(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyReportColumn(): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetCompanyReportColumn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyReportColumn(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyReportColumn(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyReportColumn(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getContactReportColumn(): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/Report/GetContactReportColumn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactReportColumn(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactReportColumn(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetContactReportColumn(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }
}

@Injectable()
export class RoleServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getRoles(permission: string): Observable<ListResultDtoOfRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoles?";
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRoles(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRoles(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfRoleListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfRoleListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRoles(response: Response): Observable<ListResultDtoOfRoleListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfRoleListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfRoleListDto.fromJS(resultData200) : new ListResultDtoOfRoleListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfRoleListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getRoleForEdit(id: number): Observable<GetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRoleForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRoleForEdit(response_);
                } catch (e) {
                    return <Observable<GetRoleForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetRoleForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetRoleForEdit(response: Response): Observable<GetRoleForEditOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetRoleForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetRoleForEditOutput.fromJS(resultData200) : new GetRoleForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetRoleForEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateRole(input: CreateOrUpdateRoleInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/CreateOrUpdateRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateRole(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateRole(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateRole(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteRole(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/DeleteRole?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteRole(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteRole(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteRole(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class Select2ServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getproductPriceLevel(id: number): Observable<Select4Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetproductPriceLevel?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetproductPriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetproductPriceLevel(response_);
                } catch (e) {
                    return <Observable<Select4Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select4Result>><any>Observable.throw(response_);
        });
    }

    protected processGetproductPriceLevel(response: Response): Observable<Select4Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select4Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select4Result.fromJS(resultData200) : new Select4Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select4Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCurrency(): Observable<Select3Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCurrency";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrency(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrency(response_);
                } catch (e) {
                    return <Observable<Select3Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3Result>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrency(response: Response): Observable<Select3Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3Result.fromJS(resultData200) : new Select3Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3Result>(<any>null);
    }

    /**
     * @return Success
     */
    getPriceLevel(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetPriceLevel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPriceLevel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPriceLevel(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetPriceLevel(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getTargetType(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetTargetType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTargetType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTargetType(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetTargetType(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getActivityType(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetActivityType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivityType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivityType(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetActivityType(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCompany(): Observable<Select2Company> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCompany";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompany(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompany(response_);
                } catch (e) {
                    return <Observable<Select2Company>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Company>><any>Observable.throw(response_);
        });
    }

    protected processGetCompany(response: Response): Observable<Select2Company> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Company = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Company.fromJS(resultData200) : new Select2Company();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Company>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesman(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetSalesman";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesman(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesman(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesman(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getMilestone(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetMilestone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMilestone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMilestone(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetMilestone(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getEnqMilestone(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetEnqMilestone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnqMilestone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnqMilestone(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetEnqMilestone(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCompanyContact(id: number): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCompanyContact?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompanyContact(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompanyContact(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetCompanyContact(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getMileStoneMileStatus(id: number): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetMileStoneMileStatus?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMileStoneMileStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMileStoneMileStatus(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetMileStoneMileStatus(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCountry(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCountry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCountry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCountry(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetCountry(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getContactInfo(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetContactInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactInfo(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetContactInfo(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getAddressInfo(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetAddressInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAddressInfo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAddressInfo(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetAddressInfo(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getCompetitor(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetCompetitor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCompetitor(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCompetitor(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetCompetitor(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    geCompanyType(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GeCompanyType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGeCompanyType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGeCompanyType(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGeCompanyType(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getContactType(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetContactType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetContactType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetContactType(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetContactType(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getProductGroup(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProductGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductGroup(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetProductGroup(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getProductSubGroup(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProductSubGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProductSubGroup(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProductSubGroup(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetProductSubGroup(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getTitle(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetTitle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTitle(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTitle(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetTitle(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getTenantType(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetTenantType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantType(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantType(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationTitle(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetQuotationTitle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationTitle(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationTitle(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationTitle(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getStatus(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetStatus(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetStatus(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getFreight(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetFreight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetFreight(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetFreight(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetFreight(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getPayment(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetPayment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPayment(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPayment(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetPayment(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getPacking(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetPacking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPacking(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPacking(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetPacking(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getWarranty(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetWarranty";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetWarranty(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetWarranty(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetWarranty(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getValidity(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetValidity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetValidity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetValidity(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetValidity(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getDelivery(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetDelivery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDelivery(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDelivery(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetDelivery(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getReason(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetReason";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetReason(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetReason(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetReason(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getProduct(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetProduct(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetProduct(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetProduct(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getService(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetService";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetService(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetService(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetService(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesPerson(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetSalesPerson";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesPerson(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesPerson(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesPerson(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiry(input: string): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetEnquiry?";
        if (input !== undefined)
            url_ += "Input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiry(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiry(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiry(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getEnquiryDetail(id: number): Observable<Select5Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetEnquiryDetail?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEnquiryDetail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEnquiryDetail(response_);
                } catch (e) {
                    return <Observable<Select5Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select5Result>><any>Observable.throw(response_);
        });
    }

    protected processGetEnquiryDetail(response: Response): Observable<Select5Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select5Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select5Result.fromJS(resultData200) : new Select5Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select5Result>(<any>null);
    }

    /**
     * @return Success
     */
    getPayments(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetPayments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetPayments(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetPayments(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetPayments(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getDueAmount(id: number): Observable<Select6Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetDueAmount?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDueAmount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDueAmount(response_);
                } catch (e) {
                    return <Observable<Select6Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select6Result>><any>Observable.throw(response_);
        });
    }

    protected processGetDueAmount(response: Response): Observable<Select6Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select6Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select6Result.fromJS(resultData200) : new Select6Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select6Result>(<any>null);
    }

    /**
     * @return Success
     */
    getDashboardSelect(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetDashboardSelect";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDashboardSelect(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDashboardSelect(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetDashboardSelect(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationMilestone(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetQuotationMilestone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationMilestone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationMilestone(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationMilestone(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    getQuotationStatus(): Observable<Select3Result> {
        let url_ = this.baseUrl + "/api/services/app/Select2/GetQuotationStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetQuotationStatus(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetQuotationStatus(response_);
                } catch (e) {
                    return <Observable<Select3Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select3Result>><any>Observable.throw(response_);
        });
    }

    protected processGetQuotationStatus(response: Response): Observable<Select3Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select3Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select3Result.fromJS(resultData200) : new Select3Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select3Result>(<any>null);
    }
}

@Injectable()
export class ServiceServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getService(filter: string): Observable<ListResultDtoOfServiceList> {
        let url_ = this.baseUrl + "/api/services/app/Service/GetService?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetService(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetService(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfServiceList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfServiceList>><any>Observable.throw(response_);
        });
    }

    protected processGetService(response: Response): Observable<ListResultDtoOfServiceList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfServiceList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfServiceList.fromJS(resultData200) : new ListResultDtoOfServiceList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfServiceList>(<any>null);
    }

    /**
     * @return Success
     */
    getServiceForEdit(id: number): Observable<GetService> {
        let url_ = this.baseUrl + "/api/services/app/Service/GetServiceForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetServiceForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetServiceForEdit(response_);
                } catch (e) {
                    return <Observable<GetService>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetService>><any>Observable.throw(response_);
        });
    }

    protected processGetServiceForEdit(response: Response): Observable<GetService> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetService = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetService.fromJS(resultData200) : new GetService();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetService>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateService(input: CreateServiceInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Service/CreateOrUpdateService";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateService(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateService(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateService(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createService(input: CreateServiceInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Service/CreateService";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateService(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateService(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateService(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateService(input: CreateServiceInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Service/UpdateService";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateService(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateService(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateService(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteService(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Service/DeleteService?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteService(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteService(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteService(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCurrentLoginInformations(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCurrentLoginInformations(response_);
                } catch (e) {
                    return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCurrentLoginInformationsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetCurrentLoginInformations(response: Response): Observable<GetCurrentLoginInformationsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetCurrentLoginInformationsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetCurrentLoginInformationsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    updateUserSignInToken(): Observable<UpdateUserSignInTokenOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/UpdateUserSignInToken";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateUserSignInToken(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateUserSignInToken(response_);
                } catch (e) {
                    return <Observable<UpdateUserSignInTokenOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<UpdateUserSignInTokenOutput>><any>Observable.throw(response_);
        });
    }

    protected processUpdateUserSignInToken(response: Response): Observable<UpdateUserSignInTokenOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: UpdateUserSignInTokenOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? UpdateUserSignInTokenOutput.fromJS(resultData200) : new UpdateUserSignInTokenOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<UpdateUserSignInTokenOutput>(<any>null);
    }
}

@Injectable()
export class TargetTypeServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTargetType(filter: string): Observable<ListResultDtoOfTargetTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/TargetType/GetTargetType?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTargetType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTargetType(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfTargetTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfTargetTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTargetType(response: Response): Observable<ListResultDtoOfTargetTypeListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfTargetTypeListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfTargetTypeListDto.fromJS(resultData200) : new ListResultDtoOfTargetTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfTargetTypeListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getTargetType1(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTargetTypeListDto> {
        let url_ = this.baseUrl + "/api/services/app/TargetType/GetTargetType1?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTargetType1(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTargetType1(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTargetTypeListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTargetTypeListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTargetType1(response: Response): Observable<PagedResultDtoOfTargetTypeListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfTargetTypeListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTargetTypeListDto.fromJS(resultData200) : new PagedResultDtoOfTargetTypeListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfTargetTypeListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getTargetTypeForEdit(id: number): Observable<GetTargetType> {
        let url_ = this.baseUrl + "/api/services/app/TargetType/GetTargetTypeForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTargetTypeForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTargetTypeForEdit(response_);
                } catch (e) {
                    return <Observable<GetTargetType>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTargetType>><any>Observable.throw(response_);
        });
    }

    protected processGetTargetTypeForEdit(response: Response): Observable<GetTargetType> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetTargetType = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTargetType.fromJS(resultData200) : new GetTargetType();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetTargetType>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateTargetType(input: CreateTargetTypeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TargetType/CreateOrUpdateTargetType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateTargetType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateTargetType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateTargetType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createTargetType(input: CreateTargetTypeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TargetType/CreateTargetType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTargetType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTargetType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTargetType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateTargetType(input: CreateTargetTypeInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TargetType/UpdateTargetType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTargetType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTargetType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTargetType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteTargetType(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TargetType/GetDeleteTargetType?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteTargetType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteTargetType(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteTargetType(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTenants(filter: string, subscriptionEndDateStart: moment.Moment, subscriptionEndDateEnd: moment.Moment, creationDateStart: moment.Moment, creationDateEnd: moment.Moment, editionId: number, editionIdSpecified: boolean, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTenantListDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenants?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (subscriptionEndDateStart !== undefined)
            url_ += "SubscriptionEndDateStart=" + encodeURIComponent("" + subscriptionEndDateStart.toJSON()) + "&"; 
        if (subscriptionEndDateEnd !== undefined)
            url_ += "SubscriptionEndDateEnd=" + encodeURIComponent("" + subscriptionEndDateEnd.toJSON()) + "&"; 
        if (creationDateStart !== undefined)
            url_ += "CreationDateStart=" + encodeURIComponent("" + creationDateStart.toJSON()) + "&"; 
        if (creationDateEnd !== undefined)
            url_ += "CreationDateEnd=" + encodeURIComponent("" + creationDateEnd.toJSON()) + "&"; 
        if (editionId !== undefined)
            url_ += "EditionId=" + encodeURIComponent("" + editionId) + "&"; 
        if (editionIdSpecified !== undefined)
            url_ += "EditionIdSpecified=" + encodeURIComponent("" + editionIdSpecified) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenants(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenants(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTenantListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTenantListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenants(response: Response): Observable<PagedResultDtoOfTenantListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfTenantListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTenantListDto.fromJS(resultData200) : new PagedResultDtoOfTenantListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfTenantListDto>(<any>null);
    }

    /**
     * @return Success
     */
    createTenant(input: CreateTenantInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/CreateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTenant(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTenant(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTenantForEdit(id: number): Observable<TenantEditDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantForEdit(response_);
                } catch (e) {
                    return <Observable<TenantEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantForEdit(response: Response): Observable<TenantEditDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: TenantEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantEditDto.fromJS(resultData200) : new TenantEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<TenantEditDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateTenant(input: TenantEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTenant(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTenant(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteTenant(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/DeleteTenant?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteTenant(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteTenant(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTenantFeaturesForEdit(id: number): Observable<GetTenantFeaturesEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantFeaturesForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantFeaturesForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantFeaturesForEdit(response_);
                } catch (e) {
                    return <Observable<GetTenantFeaturesEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTenantFeaturesEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantFeaturesForEdit(response: Response): Observable<GetTenantFeaturesEditOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetTenantFeaturesEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTenantFeaturesEditOutput.fromJS(resultData200) : new GetTenantFeaturesEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetTenantFeaturesEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    updateTenantFeatures(input: UpdateTenantFeaturesInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenantFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTenantFeatures(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTenantFeatures(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTenantFeatures(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    resetTenantSpecificFeatures(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/ResetTenantSpecificFeatures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processResetTenantSpecificFeatures(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetTenantSpecificFeatures(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processResetTenantSpecificFeatures(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    unlockTenantAdmin(input: EntityDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/UnlockTenantAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnlockTenantAdmin(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnlockTenantAdmin(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnlockTenantAdmin(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getActivepotential(): Observable<PagedResultDtoOfSpResultActivepotential> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetActivepotential";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivepotential(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivepotential(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfSpResultActivepotential>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfSpResultActivepotential>><any>Observable.throw(response_);
        });
    }

    protected processGetActivepotential(response: Response): Observable<PagedResultDtoOfSpResultActivepotential> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfSpResultActivepotential = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfSpResultActivepotential.fromJS(resultData200) : new PagedResultDtoOfSpResultActivepotential();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfSpResultActivepotential>(<any>null);
    }
}

@Injectable()
export class TenantDashboardServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMemberActivity(): Observable<GetMemberActivityOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetMemberActivity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetMemberActivity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetMemberActivity(response_);
                } catch (e) {
                    return <Observable<GetMemberActivityOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetMemberActivityOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetMemberActivity(response: Response): Observable<GetMemberActivityOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetMemberActivityOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetMemberActivityOutput.fromJS(resultData200) : new GetMemberActivityOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetMemberActivityOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getDashboardData(salesSummaryDatePeriod: SalesSummaryDatePeriod): Observable<GetDashboardDataOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetDashboardData?";
        if (salesSummaryDatePeriod !== undefined)
            url_ += "SalesSummaryDatePeriod=" + encodeURIComponent("" + salesSummaryDatePeriod) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDashboardData(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDashboardData(response_);
                } catch (e) {
                    return <Observable<GetDashboardDataOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDashboardDataOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetDashboardData(response: Response): Observable<GetDashboardDataOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetDashboardDataOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetDashboardDataOutput.fromJS(resultData200) : new GetDashboardDataOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetDashboardDataOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesSummary(salesSummaryDatePeriod: SalesSummaryDatePeriod2): Observable<GetSalesSummaryOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetSalesSummary?";
        if (salesSummaryDatePeriod !== undefined)
            url_ += "SalesSummaryDatePeriod=" + encodeURIComponent("" + salesSummaryDatePeriod) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesSummary(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesSummary(response_);
                } catch (e) {
                    return <Observable<GetSalesSummaryOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetSalesSummaryOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesSummary(response: Response): Observable<GetSalesSummaryOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetSalesSummaryOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetSalesSummaryOutput.fromJS(resultData200) : new GetSalesSummaryOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetSalesSummaryOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getWorldMap(input: any): Observable<GetWorldMapOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetWorldMap?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetWorldMap(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetWorldMap(response_);
                } catch (e) {
                    return <Observable<GetWorldMapOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetWorldMapOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetWorldMap(response: Response): Observable<GetWorldMapOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetWorldMapOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetWorldMapOutput.fromJS(resultData200) : new GetWorldMapOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetWorldMapOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getServerStats(input: any): Observable<GetServerStatsOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetServerStats?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetServerStats(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetServerStats(response_);
                } catch (e) {
                    return <Observable<GetServerStatsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetServerStatsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetServerStats(response: Response): Observable<GetServerStatsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetServerStatsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetServerStatsOutput.fromJS(resultData200) : new GetServerStatsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetServerStatsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getGeneralStats(input: any): Observable<GetGeneralStatsOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetGeneralStats?";
        if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetGeneralStats(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetGeneralStats(response_);
                } catch (e) {
                    return <Observable<GetGeneralStatsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetGeneralStatsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetGeneralStats(response: Response): Observable<GetGeneralStatsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetGeneralStatsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetGeneralStatsOutput.fromJS(resultData200) : new GetGeneralStatsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetGeneralStatsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getTenantTarget(filter: string): Observable<ListResultDtoOfTenantTargetListDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetTenantTarget?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantTarget(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantTarget(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfTenantTargetListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfTenantTargetListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantTarget(response: Response): Observable<ListResultDtoOfTenantTargetListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfTenantTargetListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfTenantTargetListDto.fromJS(resultData200) : new ListResultDtoOfTenantTargetListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfTenantTargetListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getTenantTargetPagedResult(filter: string, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTenantTargetListDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetTenantTargetPagedResult?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantTargetPagedResult(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantTargetPagedResult(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTenantTargetListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTenantTargetListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantTargetPagedResult(response: Response): Observable<PagedResultDtoOfTenantTargetListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfTenantTargetListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTenantTargetListDto.fromJS(resultData200) : new PagedResultDtoOfTenantTargetListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfTenantTargetListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getTenantTargetForEdit(id: number): Observable<GetTenantTarget> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetTenantTargetForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantTargetForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantTargetForEdit(response_);
                } catch (e) {
                    return <Observable<GetTenantTarget>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTenantTarget>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantTargetForEdit(response: Response): Observable<GetTenantTarget> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetTenantTarget = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTenantTarget.fromJS(resultData200) : new GetTenantTarget();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetTenantTarget>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateTenantTarget(input: CreateTenantTargetInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/CreateOrUpdateTenantTarget";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateTenantTarget(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateTenantTarget(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateTenantTarget(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createTenantTarget(input: CreateTenantTargetInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/CreateTenantTarget";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTenantTarget(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTenantTarget(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTenantTarget(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateTenantTarget(input: CreateTenantTargetInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/UpdateTenantTarget";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTenantTarget(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTenantTarget(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTenantTarget(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteTarget(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetDeleteTarget?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteTarget(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteTarget(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteTarget(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getActivepotential(): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetActivepotential";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetActivepotential(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetActivepotential(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetActivepotential(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getUserTarget(id: number): Observable<any[]> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetUserTarget?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserTarget(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserTarget(response_);
                } catch (e) {
                    return <Observable<any[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<any[]>><any>Observable.throw(response_);
        });
    }

    protected processGetUserTarget(response: Response): Observable<any[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: any[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<any[]>(<any>null);
    }

    /**
     * @return Success
     */
    getSalesExecutive(): Observable<SliderDataList[]> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetSalesExecutive";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetSalesExecutive(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetSalesExecutive(response_);
                } catch (e) {
                    return <Observable<SliderDataList[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<SliderDataList[]>><any>Observable.throw(response_);
        });
    }

    protected processGetSalesExecutive(response: Response): Observable<SliderDataList[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: SliderDataList[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(SliderDataList.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<SliderDataList[]>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateTenantVatAmount(input: SettingVatAmountInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/CreateOrUpdateTenantVatAmount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateTenantVatAmount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateTenantVatAmount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateTenantVatAmount(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createTenantVatAmount(input: SettingVatAmountInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/CreateTenantVatAmount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTenantVatAmount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTenantVatAmount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTenantVatAmount(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateTenantVatAmount(input: SettingVatAmountInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/UpdateTenantVatAmount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTenantVatAmount(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTenantVatAmount(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTenantVatAmount(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTenantVatAmountSettingForEdit(id: number): Observable<SettingVatAmountInput> {
        let url_ = this.baseUrl + "/api/services/app/TenantDashboard/GetTenantVatAmountSettingForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantVatAmountSettingForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantVatAmountSettingForEdit(response_);
                } catch (e) {
                    return <Observable<SettingVatAmountInput>><any>Observable.throw(e);
                }
            } else
                return <Observable<SettingVatAmountInput>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantVatAmountSettingForEdit(response: Response): Observable<SettingVatAmountInput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: SettingVatAmountInput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SettingVatAmountInput.fromJS(resultData200) : new SettingVatAmountInput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<SettingVatAmountInput>(<any>null);
    }
}

@Injectable()
export class TenantRegistrationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    registerTenant(input: RegisterTenantInput): Observable<RegisterTenantOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/RegisterTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processRegisterTenant(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processRegisterTenant(response_);
                } catch (e) {
                    return <Observable<RegisterTenantOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<RegisterTenantOutput>><any>Observable.throw(response_);
        });
    }

    protected processRegisterTenant(response: Response): Observable<RegisterTenantOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: RegisterTenantOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? RegisterTenantOutput.fromJS(resultData200) : new RegisterTenantOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<RegisterTenantOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getEditionsForSelect(): Observable<EditionsSelectOutput> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/GetEditionsForSelect";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEditionsForSelect(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEditionsForSelect(response_);
                } catch (e) {
                    return <Observable<EditionsSelectOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditionsSelectOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetEditionsForSelect(response: Response): Observable<EditionsSelectOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: EditionsSelectOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditionsSelectOutput.fromJS(resultData200) : new EditionsSelectOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<EditionsSelectOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getEdition(editionId: number): Observable<EditionSelectDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/GetEdition?";
        if (editionId !== undefined)
            url_ += "editionId=" + encodeURIComponent("" + editionId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetEdition(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetEdition(response_);
                } catch (e) {
                    return <Observable<EditionSelectDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditionSelectDto>><any>Observable.throw(response_);
        });
    }

    protected processGetEdition(response: Response): Observable<EditionSelectDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: EditionSelectDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditionSelectDto.fromJS(resultData200) : new EditionSelectDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<EditionSelectDto>(<any>null);
    }

    /**
     * @return Success
     */
    createMilestone(input: CreateMileInputDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/CreateMilestone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateMilestone(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateMilestone(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateMilestone(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTenantType(): Observable<Select2Result> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/GetTenantType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTenantType(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTenantType(response_);
                } catch (e) {
                    return <Observable<Select2Result>><any>Observable.throw(e);
                }
            } else
                return <Observable<Select2Result>><any>Observable.throw(response_);
        });
    }

    protected processGetTenantType(response: Response): Observable<Select2Result> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: Select2Result = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Select2Result.fromJS(resultData200) : new Select2Result();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<Select2Result>(<any>null);
    }

    /**
     * @return Success
     */
    emailValidation(input: EmailCheck): Observable<CheckEmailValid> {
        let url_ = this.baseUrl + "/api/services/app/TenantRegistration/EmailValidation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processEmailValidation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processEmailValidation(response_);
                } catch (e) {
                    return <Observable<CheckEmailValid>><any>Observable.throw(e);
                }
            } else
                return <Observable<CheckEmailValid>><any>Observable.throw(response_);
        });
    }

    protected processEmailValidation(response: Response): Observable<CheckEmailValid> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: CheckEmailValid = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? CheckEmailValid.fromJS(resultData200) : new CheckEmailValid();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<CheckEmailValid>(<any>null);
    }
}

@Injectable()
export class TenantSettingsServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllSettings(): Observable<TenantSettingsEditDto> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetAllSettings(response_);
                } catch (e) {
                    return <Observable<TenantSettingsEditDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<TenantSettingsEditDto>><any>Observable.throw(response_);
        });
    }

    protected processGetAllSettings(response: Response): Observable<TenantSettingsEditDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: TenantSettingsEditDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? TenantSettingsEditDto.fromJS(resultData200) : new TenantSettingsEditDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<TenantSettingsEditDto>(<any>null);
    }

    /**
     * @return Success
     */
    updateAllSettings(input: TenantSettingsEditDto): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateAllSettings(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateAllSettings(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateAllSettings(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    clearLogo(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearLogo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processClearLogo(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearLogo(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearLogo(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    clearCustomCss(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearCustomCss";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processClearCustomCss(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processClearCustomCss(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processClearCustomCss(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    sendTestEmail(input: SendTestEmailInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TenantSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendTestEmail(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendTestEmail(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendTestEmail(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TimingServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTimezones(defaultTimezoneScope: DefaultTimezoneScope): Observable<ListResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezones?";
        if (defaultTimezoneScope !== undefined)
            url_ += "DefaultTimezoneScope=" + encodeURIComponent("" + defaultTimezoneScope) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTimezones(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTimezones(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfNameValueDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfNameValueDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTimezones(response: Response): Observable<ListResultDtoOfNameValueDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfNameValueDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfNameValueDto.fromJS(resultData200) : new ListResultDtoOfNameValueDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfNameValueDto>(<any>null);
    }

    /**
     * @return Success
     */
    getTimezoneComboboxItems(selectedTimezoneId: string): Observable<ComboboxItemDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Timing/GetTimezoneComboboxItems?";
        if (selectedTimezoneId !== undefined)
            url_ += "SelectedTimezoneId=" + encodeURIComponent("" + selectedTimezoneId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTimezoneComboboxItems(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTimezoneComboboxItems(response_);
                } catch (e) {
                    return <Observable<ComboboxItemDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ComboboxItemDto[]>><any>Observable.throw(response_);
        });
    }

    protected processGetTimezoneComboboxItems(response: Response): Observable<ComboboxItemDto[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ComboboxItemDto[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ComboboxItemDto.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ComboboxItemDto[]>(<any>null);
    }
}

@Injectable()
export class TitleOfQuotationServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getTitleOfQuotation(filter: string): Observable<ListResultDtoOfTitleOfQuotationList> {
        let url_ = this.baseUrl + "/api/services/app/TitleOfQuotation/GetTitleOfQuotation?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTitleOfQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTitleOfQuotation(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfTitleOfQuotationList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfTitleOfQuotationList>><any>Observable.throw(response_);
        });
    }

    protected processGetTitleOfQuotation(response: Response): Observable<ListResultDtoOfTitleOfQuotationList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfTitleOfQuotationList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfTitleOfQuotationList.fromJS(resultData200) : new ListResultDtoOfTitleOfQuotationList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfTitleOfQuotationList>(<any>null);
    }

    /**
     * @return Success
     */
    getTitleOfQuotationForEdit(id: number): Observable<GetTitleOfQuotation> {
        let url_ = this.baseUrl + "/api/services/app/TitleOfQuotation/GetTitleOfQuotationForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTitleOfQuotationForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTitleOfQuotationForEdit(response_);
                } catch (e) {
                    return <Observable<GetTitleOfQuotation>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTitleOfQuotation>><any>Observable.throw(response_);
        });
    }

    protected processGetTitleOfQuotationForEdit(response: Response): Observable<GetTitleOfQuotation> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetTitleOfQuotation = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTitleOfQuotation.fromJS(resultData200) : new GetTitleOfQuotation();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetTitleOfQuotation>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateTitleOfQuotation(input: TitleOfQuotationInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TitleOfQuotation/CreateOrUpdateTitleOfQuotation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateTitleOfQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateTitleOfQuotation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateTitleOfQuotation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createTitleOfQuotation(input: TitleOfQuotationInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TitleOfQuotation/CreateTitleOfQuotation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTitleOfQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTitleOfQuotation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTitleOfQuotation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateTitleOfQuotation(input: TitleOfQuotationInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TitleOfQuotation/UpdateTitleOfQuotation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTitleOfQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTitleOfQuotation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTitleOfQuotation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteTitleOfQuotation(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/TitleOfQuotation/GetDeleteTitleOfQuotation?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteTitleOfQuotation(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteTitleOfQuotation(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteTitleOfQuotation(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    authenticate(model: AuthenticateModel): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processAuthenticate(response_);
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processAuthenticate(response: Response): Observable<AuthenticateResultModel> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: AuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<AuthenticateResultModel>(<any>null);
    }

    /**
     * @return Success
     */
    tenentSearching(model: AuthenticateModel): Observable<AuthenticateTenentResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/TenentSearching";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processTenentSearching(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processTenentSearching(response_);
                } catch (e) {
                    return <Observable<AuthenticateTenentResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<AuthenticateTenentResultModel>><any>Observable.throw(response_);
        });
    }

    protected processTenentSearching(response: Response): Observable<AuthenticateTenentResultModel> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: AuthenticateTenentResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateTenentResultModel.fromJS(resultData200) : new AuthenticateTenentResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<AuthenticateTenentResultModel>(<any>null);
    }

    /**
     * @return Success
     */
    sendTwoFactorAuthCode(model: SendTwoFactorAuthCodeModel): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/SendTwoFactorAuthCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processSendTwoFactorAuthCode(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processSendTwoFactorAuthCode(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processSendTwoFactorAuthCode(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    impersonatedAuthenticate(impersonationToken: string): Observable<ImpersonatedAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ImpersonatedAuthenticate?";
        if (impersonationToken !== undefined)
            url_ += "impersonationToken=" + encodeURIComponent("" + impersonationToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processImpersonatedAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processImpersonatedAuthenticate(response_);
                } catch (e) {
                    return <Observable<ImpersonatedAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ImpersonatedAuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processImpersonatedAuthenticate(response: Response): Observable<ImpersonatedAuthenticateResultModel> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ImpersonatedAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ImpersonatedAuthenticateResultModel.fromJS(resultData200) : new ImpersonatedAuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ImpersonatedAuthenticateResultModel>(<any>null);
    }

    /**
     * @return Success
     */
    linkedAccountAuthenticate(switchAccountToken: string): Observable<SwitchedAccountAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/LinkedAccountAuthenticate?";
        if (switchAccountToken !== undefined)
            url_ += "switchAccountToken=" + encodeURIComponent("" + switchAccountToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLinkedAccountAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLinkedAccountAuthenticate(response_);
                } catch (e) {
                    return <Observable<SwitchedAccountAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<SwitchedAccountAuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processLinkedAccountAuthenticate(response: Response): Observable<SwitchedAccountAuthenticateResultModel> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: SwitchedAccountAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? SwitchedAccountAuthenticateResultModel.fromJS(resultData200) : new SwitchedAccountAuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<SwitchedAccountAuthenticateResultModel>(<any>null);
    }

    /**
     * @return Success
     */
    getExternalAuthenticationProviders(): Observable<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetExternalAuthenticationProviders(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetExternalAuthenticationProviders(response_);
                } catch (e) {
                    return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalLoginProviderInfoModel[]>><any>Observable.throw(response_);
        });
    }

    protected processGetExternalAuthenticationProviders(response: Response): Observable<ExternalLoginProviderInfoModel[]> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ExternalLoginProviderInfoModel[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(ExternalLoginProviderInfoModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ExternalLoginProviderInfoModel[]>(<any>null);
    }

    /**
     * @return Success
     */
    externalAuthenticate(model: ExternalAuthenticateModel): Observable<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model ? model.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processExternalAuthenticate(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processExternalAuthenticate(response_);
                } catch (e) {
                    return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<ExternalAuthenticateResultModel>><any>Observable.throw(response_);
        });
    }

    protected processExternalAuthenticate(response: Response): Observable<ExternalAuthenticateResultModel> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ExternalAuthenticateResultModel = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ExternalAuthenticateResultModel.fromJS(resultData200) : new ExternalAuthenticateResultModel();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ExternalAuthenticateResultModel>(<any>null);
    }

    /**
     * @return Success
     */
    testNotification(message: string, severity: string): Observable<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/TestNotification?";
        if (message !== undefined)
            url_ += "message=" + encodeURIComponent("" + message) + "&"; 
        if (severity !== undefined)
            url_ += "severity=" + encodeURIComponent("" + severity) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processTestNotification(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processTestNotification(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processTestNotification(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getUsers(filter: string, permission: string, role: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsers?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&"; 
        if (role !== undefined)
            url_ += "Role=" + encodeURIComponent("" + role) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfUserListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUsers(response: Response): Observable<PagedResultDtoOfUserListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfUserListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfUserListDto.fromJS(resultData200) : new PagedResultDtoOfUserListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfUserListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getUsersToExcel(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsersToExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUsersToExcel(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUsersToExcel(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processGetUsersToExcel(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }

    /**
     * @return Success
     */
    getUserForEdit(id: number): Observable<GetUserForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserForEdit(response_);
                } catch (e) {
                    return <Observable<GetUserForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserForEdit(response: Response): Observable<GetUserForEditOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetUserForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserForEditOutput.fromJS(resultData200) : new GetUserForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetUserForEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    getUserPermissionsForEdit(id: number): Observable<GetUserPermissionsForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserPermissionsForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetUserPermissionsForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetUserPermissionsForEdit(response_);
                } catch (e) {
                    return <Observable<GetUserPermissionsForEditOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserPermissionsForEditOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetUserPermissionsForEdit(response: Response): Observable<GetUserPermissionsForEditOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetUserPermissionsForEditOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserPermissionsForEditOutput.fromJS(resultData200) : new GetUserPermissionsForEditOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetUserPermissionsForEditOutput>(<any>null);
    }

    /**
     * @return Success
     */
    resetUserSpecificPermissions(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetUserSpecificPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processResetUserSpecificPermissions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processResetUserSpecificPermissions(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processResetUserSpecificPermissions(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateUserPermissions(input: UpdateUserPermissionsInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateUserPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateUserPermissions(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateUserPermissions(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateUserPermissions(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateUser(input: CreateOrUpdateUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateOrUpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteUser(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/DeleteUser?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    unlockUser(input: EntityDtoOfInt64): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UnlockUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnlockUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnlockUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnlockUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getTarget(filter: string, userId: number): Observable<ListResultDtoOfTargetListDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetTarget?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTarget(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTarget(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfTargetListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfTargetListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTarget(response: Response): Observable<ListResultDtoOfTargetListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfTargetListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfTargetListDto.fromJS(resultData200) : new ListResultDtoOfTargetListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfTargetListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getTarget1(filter: string, userId: number, sorting: string, maxResultCount: number, skipCount: number): Observable<PagedResultDtoOfTargetListDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetTarget1?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTarget1(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTarget1(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTargetListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfTargetListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetTarget1(response: Response): Observable<PagedResultDtoOfTargetListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfTargetListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTargetListDto.fromJS(resultData200) : new PagedResultDtoOfTargetListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfTargetListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getTargetForEdit(id: number, dateInput: moment.Moment): Observable<GetTarget> {
        let url_ = this.baseUrl + "/api/services/app/User/GetTargetForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        if (dateInput !== undefined)
            url_ += "DateInput=" + encodeURIComponent("" + dateInput.toJSON()) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetTargetForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetTargetForEdit(response_);
                } catch (e) {
                    return <Observable<GetTarget>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetTarget>><any>Observable.throw(response_);
        });
    }

    protected processGetTargetForEdit(response: Response): Observable<GetTarget> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetTarget = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetTarget.fromJS(resultData200) : new GetTarget();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetTarget>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateTarget(input: CreateTargetInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateOrUpdateTarget";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateTarget(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateTarget(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateTarget(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createTarget(input: CreateTargetInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateTarget";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateTarget(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateTarget(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateTarget(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateTarget(input: CreateTargetInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateTarget";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateTarget(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateTarget(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateTarget(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteTarget(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/GetDeleteTarget?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteTarget(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteTarget(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteTarget(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    generateProfilePicture(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/User/GenerateProfilePicture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGenerateProfilePicture(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGenerateProfilePicture(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGenerateProfilePicture(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserLinkServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    linkToUser(input: LinkToUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/LinkToUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processLinkToUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processLinkToUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processLinkToUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getLinkedUsers(maxResultCount: number, skipCount: number, sorting: string): Observable<PagedResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetLinkedUsers?";
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLinkedUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLinkedUsers(response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfLinkedUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfLinkedUserDto>><any>Observable.throw(response_);
        });
    }

    protected processGetLinkedUsers(response: Response): Observable<PagedResultDtoOfLinkedUserDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: PagedResultDtoOfLinkedUserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfLinkedUserDto.fromJS(resultData200) : new PagedResultDtoOfLinkedUserDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<PagedResultDtoOfLinkedUserDto>(<any>null);
    }

    /**
     * @return Success
     */
    getRecentlyUsedLinkedUsers(): Observable<ListResultDtoOfLinkedUserDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/GetRecentlyUsedLinkedUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRecentlyUsedLinkedUsers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRecentlyUsedLinkedUsers(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfLinkedUserDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfLinkedUserDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRecentlyUsedLinkedUsers(response: Response): Observable<ListResultDtoOfLinkedUserDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfLinkedUserDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfLinkedUserDto.fromJS(resultData200) : new ListResultDtoOfLinkedUserDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfLinkedUserDto>(<any>null);
    }

    /**
     * @return Success
     */
    unlinkUser(input: UnlinkUserInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/UserLink/UnlinkUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUnlinkUser(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUnlinkUser(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUnlinkUser(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class UserLoginServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getRecentUserLoginAttempts(): Observable<ListResultDtoOfUserLoginAttemptDto> {
        let url_ = this.baseUrl + "/api/services/app/UserLogin/GetRecentUserLoginAttempts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetRecentUserLoginAttempts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetRecentUserLoginAttempts(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfUserLoginAttemptDto>><any>Observable.throw(response_);
        });
    }

    protected processGetRecentUserLoginAttempts(response: Response): Observable<ListResultDtoOfUserLoginAttemptDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfUserLoginAttemptDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfUserLoginAttemptDto.fromJS(resultData200) : new ListResultDtoOfUserLoginAttemptDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfUserLoginAttemptDto>(<any>null);
    }
}

@Injectable()
export class ValidityServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getValidity(filter: string): Observable<ListResultDtoOfValidityList> {
        let url_ = this.baseUrl + "/api/services/app/Validity/GetValidity?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetValidity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetValidity(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfValidityList>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfValidityList>><any>Observable.throw(response_);
        });
    }

    protected processGetValidity(response: Response): Observable<ListResultDtoOfValidityList> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfValidityList = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfValidityList.fromJS(resultData200) : new ListResultDtoOfValidityList();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfValidityList>(<any>null);
    }

    /**
     * @return Success
     */
    getValidityForEdit(id: number): Observable<GetValidity> {
        let url_ = this.baseUrl + "/api/services/app/Validity/GetValidityForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetValidityForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetValidityForEdit(response_);
                } catch (e) {
                    return <Observable<GetValidity>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetValidity>><any>Observable.throw(response_);
        });
    }

    protected processGetValidityForEdit(response: Response): Observable<GetValidity> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetValidity = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetValidity.fromJS(resultData200) : new GetValidity();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetValidity>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateValidity(input: CreateValidityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Validity/CreateOrUpdateValidity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateValidity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateValidity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateValidity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createValidity(input: CreateValidityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Validity/CreateValidity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateValidity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateValidity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateValidity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateValidity(input: CreateValidityInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Validity/UpdateValidity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateValidity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateValidity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateValidity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteValidity(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Validity/GetDeleteValidity?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteValidity(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteValidity(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteValidity(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class WarrantyServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getWarranty(filter: string): Observable<ListResultDtoOfWarrantyListDto> {
        let url_ = this.baseUrl + "/api/services/app/Warranty/GetWarranty?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetWarranty(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetWarranty(response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfWarrantyListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<ListResultDtoOfWarrantyListDto>><any>Observable.throw(response_);
        });
    }

    protected processGetWarranty(response: Response): Observable<ListResultDtoOfWarrantyListDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: ListResultDtoOfWarrantyListDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfWarrantyListDto.fromJS(resultData200) : new ListResultDtoOfWarrantyListDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<ListResultDtoOfWarrantyListDto>(<any>null);
    }

    /**
     * @return Success
     */
    getWarrantyForEdit(id: number): Observable<GetWarranty> {
        let url_ = this.baseUrl + "/api/services/app/Warranty/GetWarrantyForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetWarrantyForEdit(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetWarrantyForEdit(response_);
                } catch (e) {
                    return <Observable<GetWarranty>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetWarranty>><any>Observable.throw(response_);
        });
    }

    protected processGetWarrantyForEdit(response: Response): Observable<GetWarranty> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetWarranty = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetWarranty.fromJS(resultData200) : new GetWarranty();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetWarranty>(<any>null);
    }

    /**
     * @return Success
     */
    createOrUpdateWarranty(input: CreateWarrantyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Warranty/CreateOrUpdateWarranty";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateOrUpdateWarranty(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateOrUpdateWarranty(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateOrUpdateWarranty(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    createWarranty(input: CreateWarrantyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Warranty/CreateWarranty";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processCreateWarranty(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processCreateWarranty(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processCreateWarranty(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    updateWarranty(input: CreateWarrantyInput): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Warranty/UpdateWarranty";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input ? input.toJSON() : null);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processUpdateWarranty(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processUpdateWarranty(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUpdateWarranty(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    getDeleteWarranty(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/Warranty/GetDeleteWarranty?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetDeleteWarranty(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetDeleteWarranty(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetDeleteWarranty(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class WebLogServiceProxy {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getLatestWebLogs(): Observable<GetLatestWebLogsOutput> {
        let url_ = this.baseUrl + "/api/services/app/WebLog/GetLatestWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetLatestWebLogs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetLatestWebLogs(response_);
                } catch (e) {
                    return <Observable<GetLatestWebLogsOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetLatestWebLogsOutput>><any>Observable.throw(response_);
        });
    }

    protected processGetLatestWebLogs(response: Response): Observable<GetLatestWebLogsOutput> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: GetLatestWebLogsOutput = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetLatestWebLogsOutput.fromJS(resultData200) : new GetLatestWebLogsOutput();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<GetLatestWebLogsOutput>(<any>null);
    }

    /**
     * @return Success
     */
    downloadWebLogs(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/WebLog/DownloadWebLogs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = "";
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8", 
                "Accept": "application/json; charset=UTF-8"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDownloadWebLogs(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDownloadWebLogs(response_);
                } catch (e) {
                    return <Observable<FileDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<FileDto>><any>Observable.throw(response_);
        });
    }

    protected processDownloadWebLogs(response: Response): Observable<FileDto> {
        const status = response.status; 

        if (status === 200) {
            const responseText = response.text();
            let result200: FileDto = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const responseText = response.text();
            return throwException("An unexpected server error occurred.", status, responseText);
        }
        return Observable.of<FileDto>(<any>null);
    }
}

export class IsTenantAvailableInput implements IIsTenantAvailableInput {
    tenancyName: string;

    constructor(data?: IIsTenantAvailableInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        let result = new IsTenantAvailableInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface IIsTenantAvailableInput {
    tenancyName: string;
}

export class IsTenantAvailableOutput implements IIsTenantAvailableOutput {
    state: IsTenantAvailableOutputState;
    tenantId: number;

    constructor(data?: IIsTenantAvailableOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.state = data["state"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        let result = new IsTenantAvailableOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IIsTenantAvailableOutput {
    state: IsTenantAvailableOutputState;
    tenantId: number;
}

export class RegisterInput implements IRegisterInput {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    password: string;
    captchaResponse: string;

    constructor(data?: IRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.password = data["password"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): RegisterInput {
        let result = new RegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }
}

export interface IRegisterInput {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    password: string;
    captchaResponse: string;
}

export class RegisterOutput implements IRegisterOutput {
    canLogin: boolean;

    constructor(data?: IRegisterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
        }
    }

    static fromJS(data: any): RegisterOutput {
        let result = new RegisterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        return data; 
    }
}

export interface IRegisterOutput {
    canLogin: boolean;
}

export class SendPasswordResetCodeInput implements ISendPasswordResetCodeInput {
    emailAddress: string;

    constructor(data?: ISendPasswordResetCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendPasswordResetCodeInput {
        let result = new SendPasswordResetCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendPasswordResetCodeInput {
    emailAddress: string;
}

export class ResetPasswordInput implements IResetPasswordInput {
    userId: number;
    resetCode: string;
    password: string;
    returnUrl: string;
    singleSignIn: string;

    constructor(data?: IResetPasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.resetCode = data["resetCode"];
            this.password = data["password"];
            this.returnUrl = data["returnUrl"];
            this.singleSignIn = data["singleSignIn"];
        }
    }

    static fromJS(data: any): ResetPasswordInput {
        let result = new ResetPasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["resetCode"] = this.resetCode;
        data["password"] = this.password;
        data["returnUrl"] = this.returnUrl;
        data["singleSignIn"] = this.singleSignIn;
        return data; 
    }
}

export interface IResetPasswordInput {
    userId: number;
    resetCode: string;
    password: string;
    returnUrl: string;
    singleSignIn: string;
}

export class ResetPasswordOutput implements IResetPasswordOutput {
    canLogin: boolean;
    userName: string;

    constructor(data?: IResetPasswordOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): ResetPasswordOutput {
        let result = new ResetPasswordOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IResetPasswordOutput {
    canLogin: boolean;
    userName: string;
}

export class SendEmailActivationLinkInput implements ISendEmailActivationLinkInput {
    emailAddress: string;

    constructor(data?: ISendEmailActivationLinkInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendEmailActivationLinkInput {
        let result = new SendEmailActivationLinkInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendEmailActivationLinkInput {
    emailAddress: string;
}

export class ActivateEmailInput implements IActivateEmailInput {
    userId: number;
    confirmationCode: string;

    constructor(data?: IActivateEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.confirmationCode = data["confirmationCode"];
        }
    }

    static fromJS(data: any): ActivateEmailInput {
        let result = new ActivateEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["confirmationCode"] = this.confirmationCode;
        return data; 
    }
}

export interface IActivateEmailInput {
    userId: number;
    confirmationCode: string;
}

export class ImpersonateInput implements IImpersonateInput {
    tenantId: number;
    userId: number;

    constructor(data?: IImpersonateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): ImpersonateInput {
        let result = new ImpersonateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IImpersonateInput {
    tenantId: number;
    userId: number;
}

export class ImpersonateOutput implements IImpersonateOutput {
    impersonationToken: string;
    tenancyName: string;

    constructor(data?: IImpersonateOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.impersonationToken = data["impersonationToken"];
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): ImpersonateOutput {
        let result = new ImpersonateOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["impersonationToken"] = this.impersonationToken;
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface IImpersonateOutput {
    impersonationToken: string;
    tenancyName: string;
}

export class SwitchToLinkedAccountInput implements ISwitchToLinkedAccountInput {
    targetTenantId: number;
    targetUserId: number;

    constructor(data?: ISwitchToLinkedAccountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.targetTenantId = data["targetTenantId"];
            this.targetUserId = data["targetUserId"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountInput {
        let result = new SwitchToLinkedAccountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetTenantId"] = this.targetTenantId;
        data["targetUserId"] = this.targetUserId;
        return data; 
    }
}

export interface ISwitchToLinkedAccountInput {
    targetTenantId: number;
    targetUserId: number;
}

export class SwitchToLinkedAccountOutput implements ISwitchToLinkedAccountOutput {
    switchAccountToken: string;
    tenancyName: string;

    constructor(data?: ISwitchToLinkedAccountOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.switchAccountToken = data["switchAccountToken"];
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): SwitchToLinkedAccountOutput {
        let result = new SwitchToLinkedAccountOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["switchAccountToken"] = this.switchAccountToken;
        data["tenancyName"] = this.tenancyName;
        return data; 
    }
}

export interface ISwitchToLinkedAccountOutput {
    switchAccountToken: string;
    tenancyName: string;
}

export class ListResultDtoOfActivityListDto implements IListResultDtoOfActivityListDto {
    items: ActivityListDto[];

    constructor(data?: IListResultDtoOfActivityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ActivityListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfActivityListDto {
        let result = new ListResultDtoOfActivityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfActivityListDto {
    items: ActivityListDto[];
}

export class ActivityListDto implements IActivityListDto {
    id: number;
    activityTypeId: number;
    actTypeName: string;
    title: string;
    description: string;
    enquiryId: number;
    enquiryNo: string;
    scheduleTime: moment.Moment;
    status: boolean;
    tenantId: number;
    contactId: number;
    contactName: string;

    constructor(data?: IActivityListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.activityTypeId = data["activityTypeId"];
            this.actTypeName = data["actTypeName"];
            this.title = data["title"];
            this.description = data["description"];
            this.enquiryId = data["enquiryId"];
            this.enquiryNo = data["enquiryNo"];
            this.scheduleTime = data["scheduleTime"] ? moment(data["scheduleTime"].toString()) : <any>undefined;
            this.status = data["status"];
            this.tenantId = data["tenantId"];
            this.contactId = data["contactId"];
            this.contactName = data["contactName"];
        }
    }

    static fromJS(data: any): ActivityListDto {
        let result = new ActivityListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activityTypeId"] = this.activityTypeId;
        data["actTypeName"] = this.actTypeName;
        data["title"] = this.title;
        data["description"] = this.description;
        data["enquiryId"] = this.enquiryId;
        data["enquiryNo"] = this.enquiryNo;
        data["scheduleTime"] = this.scheduleTime ? this.scheduleTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["tenantId"] = this.tenantId;
        data["contactId"] = this.contactId;
        data["contactName"] = this.contactName;
        return data; 
    }
}

export interface IActivityListDto {
    id: number;
    activityTypeId: number;
    actTypeName: string;
    title: string;
    description: string;
    enquiryId: number;
    enquiryNo: string;
    scheduleTime: moment.Moment;
    status: boolean;
    tenantId: number;
    contactId: number;
    contactName: string;
}

export class GetActivity implements IGetActivity {
    activitys: CreateActivityInput;

    constructor(data?: IGetActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.activitys = data["activitys"] ? CreateActivityInput.fromJS(data["activitys"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetActivity {
        let result = new GetActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activitys"] = this.activitys ? this.activitys.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetActivity {
    activitys: CreateActivityInput;
}

export class CreateActivityInput implements ICreateActivityInput {
    id: number;
    activityTypeId: number;
    title: string;
    description: string;
    enquiryId: number;
    scheduleTime: moment.Moment;
    status: boolean;
    contactId: number;
    tenantId: number;

    constructor(data?: ICreateActivityInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.activityTypeId = data["activityTypeId"];
            this.title = data["title"];
            this.description = data["description"];
            this.enquiryId = data["enquiryId"];
            this.scheduleTime = data["scheduleTime"] ? moment(data["scheduleTime"].toString()) : <any>undefined;
            this.status = data["status"];
            this.contactId = data["contactId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateActivityInput {
        let result = new CreateActivityInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activityTypeId"] = this.activityTypeId;
        data["title"] = this.title;
        data["description"] = this.description;
        data["enquiryId"] = this.enquiryId;
        data["scheduleTime"] = this.scheduleTime ? this.scheduleTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["contactId"] = this.contactId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateActivityInput {
    id: number;
    activityTypeId: number;
    title: string;
    description: string;
    enquiryId: number;
    scheduleTime: moment.Moment;
    status: boolean;
    contactId: number;
    tenantId: number;
}

export class ListResultDtoOfActivityCommandListDto implements IListResultDtoOfActivityCommandListDto {
    items: ActivityCommandListDto[];

    constructor(data?: IListResultDtoOfActivityCommandListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ActivityCommandListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfActivityCommandListDto {
        let result = new ListResultDtoOfActivityCommandListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfActivityCommandListDto {
    items: ActivityCommandListDto[];
}

export class ActivityCommandListDto implements IActivityCommandListDto {
    id: number;
    activityId: number;
    commands: string;

    constructor(data?: IActivityCommandListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.activityId = data["activityId"];
            this.commands = data["commands"];
        }
    }

    static fromJS(data: any): ActivityCommandListDto {
        let result = new ActivityCommandListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activityId"] = this.activityId;
        data["commands"] = this.commands;
        return data; 
    }
}

export interface IActivityCommandListDto {
    id: number;
    activityId: number;
    commands: string;
}

export class CreateActivityCommandInput implements ICreateActivityCommandInput {
    id: number;
    activityId: number;
    commands: string;

    constructor(data?: ICreateActivityCommandInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.activityId = data["activityId"];
            this.commands = data["commands"];
        }
    }

    static fromJS(data: any): CreateActivityCommandInput {
        let result = new CreateActivityCommandInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activityId"] = this.activityId;
        data["commands"] = this.commands;
        return data; 
    }
}

export interface ICreateActivityCommandInput {
    id: number;
    activityId: number;
    commands: string;
}

export class FileDto implements IFileDto {
    fileName: string;
    fileType: string;
    fileToken: string;

    constructor(data?: IFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.fileType = data["fileType"];
            this.fileToken = data["fileToken"];
        }
    }

    static fromJS(data: any): FileDto {
        let result = new FileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileType"] = this.fileType;
        data["fileToken"] = this.fileToken;
        return data; 
    }
}

export interface IFileDto {
    fileName: string;
    fileType: string;
    fileToken: string;
}

export class ListResultDtoOfActivityTypeListDto implements IListResultDtoOfActivityTypeListDto {
    items: ActivityTypeListDto[];

    constructor(data?: IListResultDtoOfActivityTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ActivityTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfActivityTypeListDto {
        let result = new ListResultDtoOfActivityTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfActivityTypeListDto {
    items: ActivityTypeListDto[];
}

export class ActivityTypeListDto implements IActivityTypeListDto {
    id: number;
    code: string;
    name: string;
    tenantId: number;

    constructor(data?: IActivityTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): ActivityTypeListDto {
        let result = new ActivityTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IActivityTypeListDto {
    id: number;
    code: string;
    name: string;
    tenantId: number;
}

export class GetActivityType implements IGetActivityType {
    activityTypes: CreateActivityTypeInput;

    constructor(data?: IGetActivityType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.activityTypes = data["activityTypes"] ? CreateActivityTypeInput.fromJS(data["activityTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetActivityType {
        let result = new GetActivityType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activityTypes"] = this.activityTypes ? this.activityTypes.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetActivityType {
    activityTypes: CreateActivityTypeInput;
}

export class CreateActivityTypeInput implements ICreateActivityTypeInput {
    id: number;
    code: string;
    name: string;
    tenantId: number;

    constructor(data?: ICreateActivityTypeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateActivityTypeInput {
        let result = new CreateActivityTypeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateActivityTypeInput {
    id: number;
    code: string;
    name: string;
    tenantId: number;
}

export class PagedResultDtoOfAuditLogListDto implements IPagedResultDtoOfAuditLogListDto {
    totalCount: number;
    items: AuditLogListDto[];

    constructor(data?: IPagedResultDtoOfAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(AuditLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAuditLogListDto {
        let result = new PagedResultDtoOfAuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfAuditLogListDto {
    totalCount: number;
    items: AuditLogListDto[];
}

export class AuditLogListDto implements IAuditLogListDto {
    userId: number;
    userName: string;
    impersonatorTenantId: number;
    impersonatorUserId: number;
    serviceName: string;
    methodName: string;
    parameters: string;
    executionTime: moment.Moment;
    executionDuration: number;
    clientIpAddress: string;
    clientName: string;
    browserInfo: string;
    exception: string;
    customData: string;
    id: number;

    constructor(data?: IAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.userName = data["userName"];
            this.impersonatorTenantId = data["impersonatorTenantId"];
            this.impersonatorUserId = data["impersonatorUserId"];
            this.serviceName = data["serviceName"];
            this.methodName = data["methodName"];
            this.parameters = data["parameters"];
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : <any>undefined;
            this.executionDuration = data["executionDuration"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.exception = data["exception"];
            this.customData = data["customData"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AuditLogListDto {
        let result = new AuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["impersonatorTenantId"] = this.impersonatorTenantId;
        data["impersonatorUserId"] = this.impersonatorUserId;
        data["serviceName"] = this.serviceName;
        data["methodName"] = this.methodName;
        data["parameters"] = this.parameters;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : <any>undefined;
        data["executionDuration"] = this.executionDuration;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["exception"] = this.exception;
        data["customData"] = this.customData;
        data["id"] = this.id;
        return data; 
    }
}

export interface IAuditLogListDto {
    userId: number;
    userName: string;
    impersonatorTenantId: number;
    impersonatorUserId: number;
    serviceName: string;
    methodName: string;
    parameters: string;
    executionTime: moment.Moment;
    executionDuration: number;
    clientIpAddress: string;
    clientName: string;
    browserInfo: string;
    exception: string;
    customData: string;
    id: number;
}

export class ListResultDtoOfCacheDto implements IListResultDtoOfCacheDto {
    items: CacheDto[];

    constructor(data?: IListResultDtoOfCacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CacheDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCacheDto {
        let result = new ListResultDtoOfCacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfCacheDto {
    items: CacheDto[];
}

export class CacheDto implements ICacheDto {
    name: string;

    constructor(data?: ICacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CacheDto {
        let result = new CacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ICacheDto {
    name: string;
}

export class EntityDtoOfString implements IEntityDtoOfString {
    id: string;

    constructor(data?: IEntityDtoOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfString {
        let result = new EntityDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfString {
    id: string;
}

export class GetUserChatFriendsWithSettingsOutput implements IGetUserChatFriendsWithSettingsOutput {
    serverTime: moment.Moment;
    friends: FriendDto[];

    constructor(data?: IGetUserChatFriendsWithSettingsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.serverTime = data["serverTime"] ? moment(data["serverTime"].toString()) : <any>undefined;
            if (data["friends"] && data["friends"].constructor === Array) {
                this.friends = [];
                for (let item of data["friends"])
                    this.friends.push(FriendDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserChatFriendsWithSettingsOutput {
        let result = new GetUserChatFriendsWithSettingsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverTime"] = this.serverTime ? this.serverTime.toISOString() : <any>undefined;
        if (this.friends && this.friends.constructor === Array) {
            data["friends"] = [];
            for (let item of this.friends)
                data["friends"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetUserChatFriendsWithSettingsOutput {
    serverTime: moment.Moment;
    friends: FriendDto[];
}

export class FriendDto implements IFriendDto {
    friendUserId: number;
    friendTenantId: number;
    friendUserName: string;
    friendTenancyName: string;
    friendProfilePictureId: string;
    unreadMessageCount: number;
    isOnline: boolean;
    state: FriendDtoState;

    constructor(data?: IFriendDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.friendUserId = data["friendUserId"];
            this.friendTenantId = data["friendTenantId"];
            this.friendUserName = data["friendUserName"];
            this.friendTenancyName = data["friendTenancyName"];
            this.friendProfilePictureId = data["friendProfilePictureId"];
            this.unreadMessageCount = data["unreadMessageCount"];
            this.isOnline = data["isOnline"];
            this.state = data["state"];
        }
    }

    static fromJS(data: any): FriendDto {
        let result = new FriendDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["friendUserId"] = this.friendUserId;
        data["friendTenantId"] = this.friendTenantId;
        data["friendUserName"] = this.friendUserName;
        data["friendTenancyName"] = this.friendTenancyName;
        data["friendProfilePictureId"] = this.friendProfilePictureId;
        data["unreadMessageCount"] = this.unreadMessageCount;
        data["isOnline"] = this.isOnline;
        data["state"] = this.state;
        return data; 
    }
}

export interface IFriendDto {
    friendUserId: number;
    friendTenantId: number;
    friendUserName: string;
    friendTenancyName: string;
    friendProfilePictureId: string;
    unreadMessageCount: number;
    isOnline: boolean;
    state: FriendDtoState;
}

export class ListResultDtoOfChatMessageDto implements IListResultDtoOfChatMessageDto {
    items: ChatMessageDto[];

    constructor(data?: IListResultDtoOfChatMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ChatMessageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfChatMessageDto {
        let result = new ListResultDtoOfChatMessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfChatMessageDto {
    items: ChatMessageDto[];
}

export class ChatMessageDto implements IChatMessageDto {
    userId: number;
    tenantId: number;
    targetUserId: number;
    targetTenantId: number;
    side: ChatMessageDtoSide;
    readState: ChatMessageDtoReadState;
    message: string;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IChatMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
            this.targetUserId = data["targetUserId"];
            this.targetTenantId = data["targetTenantId"];
            this.side = data["side"];
            this.readState = data["readState"];
            this.message = data["message"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ChatMessageDto {
        let result = new ChatMessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        data["targetUserId"] = this.targetUserId;
        data["targetTenantId"] = this.targetTenantId;
        data["side"] = this.side;
        data["readState"] = this.readState;
        data["message"] = this.message;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IChatMessageDto {
    userId: number;
    tenantId: number;
    targetUserId: number;
    targetTenantId: number;
    side: ChatMessageDtoSide;
    readState: ChatMessageDtoReadState;
    message: string;
    creationTime: moment.Moment;
    id: number;
}

export class MarkAllUnreadMessagesOfUserAsReadInput implements IMarkAllUnreadMessagesOfUserAsReadInput {
    tenantId: number;
    userId: number;

    constructor(data?: IMarkAllUnreadMessagesOfUserAsReadInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): MarkAllUnreadMessagesOfUserAsReadInput {
        let result = new MarkAllUnreadMessagesOfUserAsReadInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IMarkAllUnreadMessagesOfUserAsReadInput {
    tenantId: number;
    userId: number;
}

export class ListResultDtoOfSubscribableEditionComboboxItemDto implements IListResultDtoOfSubscribableEditionComboboxItemDto {
    items: SubscribableEditionComboboxItemDto[];

    constructor(data?: IListResultDtoOfSubscribableEditionComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SubscribableEditionComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfSubscribableEditionComboboxItemDto {
        let result = new ListResultDtoOfSubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfSubscribableEditionComboboxItemDto {
    items: SubscribableEditionComboboxItemDto[];
}

export class SubscribableEditionComboboxItemDto implements ISubscribableEditionComboboxItemDto {
    isFree: boolean;
    value: string;
    displayText: string;
    isSelected: boolean;

    constructor(data?: ISubscribableEditionComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isFree = data["isFree"];
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    }

    static fromJS(data: any): SubscribableEditionComboboxItemDto {
        let result = new SubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isFree"] = this.isFree;
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data; 
    }
}

export interface ISubscribableEditionComboboxItemDto {
    isFree: boolean;
    value: string;
    displayText: string;
    isSelected: boolean;
}

export class FindUsersInput implements IFindUsersInput {
    tenantId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;

    constructor(data?: IFindUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
            this.filter = data["filter"];
        }
    }

    static fromJS(data: any): FindUsersInput {
        let result = new FindUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filter"] = this.filter;
        return data; 
    }
}

export interface IFindUsersInput {
    tenantId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;
}

export class PagedResultDtoOfNameValueDto implements IPagedResultDtoOfNameValueDto {
    totalCount: number;
    items: NameValueDto[];

    constructor(data?: IPagedResultDtoOfNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNameValueDto {
        let result = new PagedResultDtoOfNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNameValueDto {
    totalCount: number;
    items: NameValueDto[];
}

export class NameValueDto implements INameValueDto {
    name: string;
    value: string;

    constructor(data?: INameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): NameValueDto {
        let result = new NameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface INameValueDto {
    name: string;
    value: string;
}

export class GetDefaultEditionNameOutput implements IGetDefaultEditionNameOutput {
    name: string;

    constructor(data?: IGetDefaultEditionNameOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): GetDefaultEditionNameOutput {
        let result = new GetDefaultEditionNameOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface IGetDefaultEditionNameOutput {
    name: string;
}

export class PagedResultDtoOfNewCompanyListDto implements IPagedResultDtoOfNewCompanyListDto {
    totalCount: number;
    items: NewCompanyListDto[];

    constructor(data?: IPagedResultDtoOfNewCompanyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NewCompanyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNewCompanyListDto {
        let result = new PagedResultDtoOfNewCompanyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNewCompanyListDto {
    totalCount: number;
    items: NewCompanyListDto[];
}

export class NewCompanyListDto implements INewCompanyListDto {
    id: number;
    companyName: string;
    newCustomerTypeId: number;
    customerTypeName: string;
    accountManagerId: number;
    managedBy: string;
    currencyId: number;
    currencyCode: string;
    countryCode: string;
    countryId: number;

    constructor(data?: INewCompanyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.companyName = data["companyName"];
            this.newCustomerTypeId = data["newCustomerTypeId"];
            this.customerTypeName = data["customerTypeName"];
            this.accountManagerId = data["accountManagerId"];
            this.managedBy = data["managedBy"];
            this.currencyId = data["currencyId"];
            this.currencyCode = data["currencyCode"];
            this.countryCode = data["countryCode"];
            this.countryId = data["countryId"];
        }
    }

    static fromJS(data: any): NewCompanyListDto {
        let result = new NewCompanyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyName"] = this.companyName;
        data["newCustomerTypeId"] = this.newCustomerTypeId;
        data["customerTypeName"] = this.customerTypeName;
        data["accountManagerId"] = this.accountManagerId;
        data["managedBy"] = this.managedBy;
        data["currencyId"] = this.currencyId;
        data["currencyCode"] = this.currencyCode;
        data["countryCode"] = this.countryCode;
        data["countryId"] = this.countryId;
        return data; 
    }
}

export interface INewCompanyListDto {
    id: number;
    companyName: string;
    newCustomerTypeId: number;
    customerTypeName: string;
    accountManagerId: number;
    managedBy: string;
    currencyId: number;
    currencyCode: string;
    countryCode: string;
    countryId: number;
}

export class CreateCompanyOrContact implements ICreateCompanyOrContact {
    id: number;
    name: string;
    customerTypeId: number;
    companyId: number;
    accountManagerId: number;
    titleId: number;
    lastName: string;
    currencyId: number;
    countryId: number;

    constructor(data?: ICreateCompanyOrContact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.customerTypeId = data["customerTypeId"];
            this.companyId = data["companyId"];
            this.accountManagerId = data["accountManagerId"];
            this.titleId = data["titleId"];
            this.lastName = data["lastName"];
            this.currencyId = data["currencyId"];
            this.countryId = data["countryId"];
        }
    }

    static fromJS(data: any): CreateCompanyOrContact {
        let result = new CreateCompanyOrContact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["customerTypeId"] = this.customerTypeId;
        data["companyId"] = this.companyId;
        data["accountManagerId"] = this.accountManagerId;
        data["titleId"] = this.titleId;
        data["lastName"] = this.lastName;
        data["currencyId"] = this.currencyId;
        data["countryId"] = this.countryId;
        return data; 
    }
}

export interface ICreateCompanyOrContact {
    id: number;
    name: string;
    customerTypeId: number;
    companyId: number;
    accountManagerId: number;
    titleId: number;
    lastName: string;
    currencyId: number;
    countryId: number;
}

export class CreateAddressInfo implements ICreateAddressInfo {
    id: number;
    companyId: number;
    contacId: number;
    infoTypeId: number;
    address1: string;
    address2: string;

    constructor(data?: ICreateAddressInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.companyId = data["companyId"];
            this.contacId = data["contacId"];
            this.infoTypeId = data["infoTypeId"];
            this.address1 = data["address1"];
            this.address2 = data["address2"];
        }
    }

    static fromJS(data: any): CreateAddressInfo {
        let result = new CreateAddressInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyId"] = this.companyId;
        data["contacId"] = this.contacId;
        data["infoTypeId"] = this.infoTypeId;
        data["address1"] = this.address1;
        data["address2"] = this.address2;
        return data; 
    }
}

export interface ICreateAddressInfo {
    id: number;
    companyId: number;
    contacId: number;
    infoTypeId: number;
    address1: string;
    address2: string;
}

export class CreateContactInfo implements ICreateContactInfo {
    id: number;
    companyId: number;
    contacId: number;
    infoTypeId: number;
    infoData: string;

    constructor(data?: ICreateContactInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.companyId = data["companyId"];
            this.contacId = data["contacId"];
            this.infoTypeId = data["infoTypeId"];
            this.infoData = data["infoData"];
        }
    }

    static fromJS(data: any): CreateContactInfo {
        let result = new CreateContactInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyId"] = this.companyId;
        data["contacId"] = this.contacId;
        data["infoTypeId"] = this.infoTypeId;
        data["infoData"] = this.infoData;
        return data; 
    }
}

export interface ICreateContactInfo {
    id: number;
    companyId: number;
    contacId: number;
    infoTypeId: number;
    infoData: string;
}

export class GetNewAddressInfo implements IGetNewAddressInfo {
    createAddressInfos: CreateAddressInfo;

    constructor(data?: IGetNewAddressInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createAddressInfos = data["createAddressInfos"] ? CreateAddressInfo.fromJS(data["createAddressInfos"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetNewAddressInfo {
        let result = new GetNewAddressInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createAddressInfos"] = this.createAddressInfos ? this.createAddressInfos.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetNewAddressInfo {
    createAddressInfos: CreateAddressInfo;
}

export class GetNewContactInfo implements IGetNewContactInfo {
    createContactInfos: CreateContactInfo;

    constructor(data?: IGetNewContactInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createContactInfos = data["createContactInfos"] ? CreateContactInfo.fromJS(data["createContactInfos"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetNewContactInfo {
        let result = new GetNewContactInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createContactInfos"] = this.createContactInfos ? this.createContactInfos.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetNewContactInfo {
    createContactInfos: CreateContactInfo;
}

export class PagedResultDtoOfNewContactListDto implements IPagedResultDtoOfNewContactListDto {
    totalCount: number;
    items: NewContactListDto[];

    constructor(data?: IPagedResultDtoOfNewContactListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NewContactListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNewContactListDto {
        let result = new PagedResultDtoOfNewContactListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNewContactListDto {
    totalCount: number;
    items: NewContactListDto[];
}

export class NewContactListDto implements INewContactListDto {
    id: number;
    contactName: string;
    companyName: string;
    newCustomerTypeId: number;
    customerTypeName: string;
    contactTypeName: string;
    titleId: number;
    title: string;
    lastName: string;
    industryName: string;

    constructor(data?: INewContactListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.contactName = data["contactName"];
            this.companyName = data["companyName"];
            this.newCustomerTypeId = data["newCustomerTypeId"];
            this.customerTypeName = data["customerTypeName"];
            this.contactTypeName = data["contactTypeName"];
            this.titleId = data["titleId"];
            this.title = data["title"];
            this.lastName = data["lastName"];
            this.industryName = data["industryName"];
        }
    }

    static fromJS(data: any): NewContactListDto {
        let result = new NewContactListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["contactName"] = this.contactName;
        data["companyName"] = this.companyName;
        data["newCustomerTypeId"] = this.newCustomerTypeId;
        data["customerTypeName"] = this.customerTypeName;
        data["contactTypeName"] = this.contactTypeName;
        data["titleId"] = this.titleId;
        data["title"] = this.title;
        data["lastName"] = this.lastName;
        data["industryName"] = this.industryName;
        return data; 
    }
}

export interface INewContactListDto {
    id: number;
    contactName: string;
    companyName: string;
    newCustomerTypeId: number;
    customerTypeName: string;
    contactTypeName: string;
    titleId: number;
    title: string;
    lastName: string;
    industryName: string;
}

export class ListResultDtoOfNewContactListDto implements IListResultDtoOfNewContactListDto {
    items: NewContactListDto[];

    constructor(data?: IListResultDtoOfNewContactListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NewContactListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfNewContactListDto {
        let result = new ListResultDtoOfNewContactListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfNewContactListDto {
    items: NewContactListDto[];
}

export class ListResultDtoOfCurrencyListDto implements IListResultDtoOfCurrencyListDto {
    items: CurrencyListDto[];

    constructor(data?: IListResultDtoOfCurrencyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CurrencyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCurrencyListDto {
        let result = new ListResultDtoOfCurrencyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfCurrencyListDto {
    items: CurrencyListDto[];
}

export class CurrencyListDto implements ICurrencyListDto {
    code: string;
    name: string;
    conversionRatio: number;
    id: number;

    constructor(data?: ICurrencyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.conversionRatio = data["conversionRatio"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CurrencyListDto {
        let result = new CurrencyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["conversionRatio"] = this.conversionRatio;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICurrencyListDto {
    code: string;
    name: string;
    conversionRatio: number;
    id: number;
}

export class GetCurrencyNew implements IGetCurrencyNew {
    currency: CurrencyListDto[];
    customCurrency: CustomCurrencyListDto[];

    constructor(data?: IGetCurrencyNew) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["currency"] && data["currency"].constructor === Array) {
                this.currency = [];
                for (let item of data["currency"])
                    this.currency.push(CurrencyListDto.fromJS(item));
            }
            if (data["customCurrency"] && data["customCurrency"].constructor === Array) {
                this.customCurrency = [];
                for (let item of data["customCurrency"])
                    this.customCurrency.push(CustomCurrencyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCurrencyNew {
        let result = new GetCurrencyNew();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.currency && this.currency.constructor === Array) {
            data["currency"] = [];
            for (let item of this.currency)
                data["currency"].push(item.toJSON());
        }
        if (this.customCurrency && this.customCurrency.constructor === Array) {
            data["customCurrency"] = [];
            for (let item of this.customCurrency)
                data["customCurrency"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetCurrencyNew {
    currency: CurrencyListDto[];
    customCurrency: CustomCurrencyListDto[];
}

export class CustomCurrencyListDto implements ICustomCurrencyListDto {
    code: string;
    name: string;
    conversionRatio: number;
    currencyId: number;
    tenantId: number;
    id: number;
    online: boolean;

    constructor(data?: ICustomCurrencyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.conversionRatio = data["conversionRatio"];
            this.currencyId = data["currencyId"];
            this.tenantId = data["tenantId"];
            this.id = data["id"];
            this.online = data["online"];
        }
    }

    static fromJS(data: any): CustomCurrencyListDto {
        let result = new CustomCurrencyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["conversionRatio"] = this.conversionRatio;
        data["currencyId"] = this.currencyId;
        data["tenantId"] = this.tenantId;
        data["id"] = this.id;
        data["online"] = this.online;
        return data; 
    }
}

export interface ICustomCurrencyListDto {
    code: string;
    name: string;
    conversionRatio: number;
    currencyId: number;
    tenantId: number;
    id: number;
    online: boolean;
}

export class GetCurrency implements IGetCurrency {
    currency: CreateCurrencyInput;

    constructor(data?: IGetCurrency) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.currency = data["currency"] ? CreateCurrencyInput.fromJS(data["currency"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCurrency {
        let result = new GetCurrency();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCurrency {
    currency: CreateCurrencyInput;
}

export class CreateCurrencyInput implements ICreateCurrencyInput {
    id: number;
    code: string;
    name: string;
    conversionRatio: number;

    constructor(data?: ICreateCurrencyInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.conversionRatio = data["conversionRatio"];
        }
    }

    static fromJS(data: any): CreateCurrencyInput {
        let result = new CreateCurrencyInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["conversionRatio"] = this.conversionRatio;
        return data; 
    }
}

export interface ICreateCurrencyInput {
    id: number;
    code: string;
    name: string;
    conversionRatio: number;
}

export class GetCustomCurrency implements IGetCustomCurrency {
    customCurrency: CreateCustomCurrencyInput;

    constructor(data?: IGetCustomCurrency) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customCurrency = data["customCurrency"] ? CreateCustomCurrencyInput.fromJS(data["customCurrency"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCustomCurrency {
        let result = new GetCustomCurrency();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customCurrency"] = this.customCurrency ? this.customCurrency.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCustomCurrency {
    customCurrency: CreateCustomCurrencyInput;
}

export class CreateCustomCurrencyInput implements ICreateCustomCurrencyInput {
    code: string;
    name: string;
    conversionRatio: number;
    currencyId: number;
    tenantId: number;
    id: number;
    online: boolean;

    constructor(data?: ICreateCustomCurrencyInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.conversionRatio = data["conversionRatio"];
            this.currencyId = data["currencyId"];
            this.tenantId = data["tenantId"];
            this.id = data["id"];
            this.online = data["online"];
        }
    }

    static fromJS(data: any): CreateCustomCurrencyInput {
        let result = new CreateCustomCurrencyInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["conversionRatio"] = this.conversionRatio;
        data["currencyId"] = this.currencyId;
        data["tenantId"] = this.tenantId;
        data["id"] = this.id;
        data["online"] = this.online;
        return data; 
    }
}

export interface ICreateCustomCurrencyInput {
    code: string;
    name: string;
    conversionRatio: number;
    currencyId: number;
    tenantId: number;
    id: number;
    online: boolean;
}

export class PagedResultDtoOfNewCustomerTypeListDto implements IPagedResultDtoOfNewCustomerTypeListDto {
    totalCount: number;
    items: NewCustomerTypeListDto[];

    constructor(data?: IPagedResultDtoOfNewCustomerTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NewCustomerTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNewCustomerTypeListDto {
        let result = new PagedResultDtoOfNewCustomerTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNewCustomerTypeListDto {
    totalCount: number;
    items: NewCustomerTypeListDto[];
}

export class NewCustomerTypeListDto implements INewCustomerTypeListDto {
    id: number;
    title: string;
    company: boolean;
    tenantId: number;

    constructor(data?: INewCustomerTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.company = data["company"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): NewCustomerTypeListDto {
        let result = new NewCustomerTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["company"] = this.company;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface INewCustomerTypeListDto {
    id: number;
    title: string;
    company: boolean;
    tenantId: number;
}

export class GetNewCustomerType implements IGetNewCustomerType {
    newCustomerTypes: NewCustomerTypeListDto;

    constructor(data?: IGetNewCustomerType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.newCustomerTypes = data["newCustomerTypes"] ? NewCustomerTypeListDto.fromJS(data["newCustomerTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetNewCustomerType {
        let result = new GetNewCustomerType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newCustomerTypes"] = this.newCustomerTypes ? this.newCustomerTypes.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetNewCustomerType {
    newCustomerTypes: NewCustomerTypeListDto;
}

export class NewCustomerTypeInputDto implements INewCustomerTypeInputDto {
    id: number;
    title: string;
    company: boolean;
    tenantId: number;

    constructor(data?: INewCustomerTypeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.company = data["company"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): NewCustomerTypeInputDto {
        let result = new NewCustomerTypeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["company"] = this.company;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface INewCustomerTypeInputDto {
    id: number;
    title: string;
    company: boolean;
    tenantId: number;
}

export class NullableIdDto implements INullableIdDto {
    id: number;

    constructor(data?: INullableIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): NullableIdDto {
        let result = new NullableIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface INullableIdDto {
    id: number;
}

export class ListResultDtoOfDeliveryList implements IListResultDtoOfDeliveryList {
    items: DeliveryList[];

    constructor(data?: IListResultDtoOfDeliveryList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(DeliveryList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfDeliveryList {
        let result = new ListResultDtoOfDeliveryList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfDeliveryList {
    items: DeliveryList[];
}

export class DeliveryList implements IDeliveryList {
    id: number;
    deliveryCode: string;
    deliveryName: string;
    tenantId: number;

    constructor(data?: IDeliveryList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.deliveryCode = data["deliveryCode"];
            this.deliveryName = data["deliveryName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): DeliveryList {
        let result = new DeliveryList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deliveryCode"] = this.deliveryCode;
        data["deliveryName"] = this.deliveryName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IDeliveryList {
    id: number;
    deliveryCode: string;
    deliveryName: string;
    tenantId: number;
}

export class GetDelivery implements IGetDelivery {
    delivery: CreateDeliveryInput;

    constructor(data?: IGetDelivery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.delivery = data["delivery"] ? CreateDeliveryInput.fromJS(data["delivery"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetDelivery {
        let result = new GetDelivery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["delivery"] = this.delivery ? this.delivery.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetDelivery {
    delivery: CreateDeliveryInput;
}

export class CreateDeliveryInput implements ICreateDeliveryInput {
    id: number;
    deliveryCode: string;
    deliveryName: string;
    tenantId: number;

    constructor(data?: ICreateDeliveryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.deliveryCode = data["deliveryCode"];
            this.deliveryName = data["deliveryName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateDeliveryInput {
        let result = new CreateDeliveryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deliveryCode"] = this.deliveryCode;
        data["deliveryName"] = this.deliveryName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateDeliveryInput {
    id: number;
    deliveryCode: string;
    deliveryName: string;
    tenantId: number;
}

export class DateToStringOutput implements IDateToStringOutput {
    dateString: string;

    constructor(data?: IDateToStringOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dateString = data["dateString"];
        }
    }

    static fromJS(data: any): DateToStringOutput {
        let result = new DateToStringOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateString"] = this.dateString;
        return data; 
    }
}

export interface IDateToStringOutput {
    dateString: string;
}

export class NameValueOfString implements INameValueOfString {
    name: string;
    value: string;

    constructor(data?: INameValueOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): NameValueOfString {
        let result = new NameValueOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data; 
    }
}

export interface INameValueOfString {
    name: string;
    value: string;
}

export class StringOutput implements IStringOutput {
    output: string;

    constructor(data?: IStringOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.output = data["output"];
        }
    }

    static fromJS(data: any): StringOutput {
        let result = new StringOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["output"] = this.output;
        return data; 
    }
}

export interface IStringOutput {
    output: string;
}

export class ListResultDtoOfEditionListDto implements IListResultDtoOfEditionListDto {
    items: EditionListDto[];

    constructor(data?: IListResultDtoOfEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EditionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEditionListDto {
        let result = new ListResultDtoOfEditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfEditionListDto {
    items: EditionListDto[];
}

export class EditionListDto implements IEditionListDto {
    name: string;
    displayName: string;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IEditionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EditionListDto {
        let result = new EditionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEditionListDto {
    name: string;
    displayName: string;
    creationTime: moment.Moment;
    id: number;
}

export class GetEditionEditOutput implements IGetEditionEditOutput {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];

    constructor(data?: IGetEditionEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : <any>undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionEditOutput {
        let result = new GetEditionEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEditionEditOutput {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];
}

export class EditionEditDto implements IEditionEditDto {
    id: number;
    displayName: string;
    monthlyPrice: number;
    annualPrice: number;
    trialDayCount: number;
    waitingDayAfterExpire: number;
    expiringEditionId: number;

    constructor(data?: IEditionEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.trialDayCount = data["trialDayCount"];
            this.waitingDayAfterExpire = data["waitingDayAfterExpire"];
            this.expiringEditionId = data["expiringEditionId"];
        }
    }

    static fromJS(data: any): EditionEditDto {
        let result = new EditionEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["trialDayCount"] = this.trialDayCount;
        data["waitingDayAfterExpire"] = this.waitingDayAfterExpire;
        data["expiringEditionId"] = this.expiringEditionId;
        return data; 
    }
}

export interface IEditionEditDto {
    id: number;
    displayName: string;
    monthlyPrice: number;
    annualPrice: number;
    trialDayCount: number;
    waitingDayAfterExpire: number;
    expiringEditionId: number;
}

export class FlatFeatureDto implements IFlatFeatureDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: FeatureInputTypeDto;

    constructor(data?: IFlatFeatureDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.defaultValue = data["defaultValue"];
            this.inputType = data["inputType"] ? FeatureInputTypeDto.fromJS(data["inputType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FlatFeatureDto {
        let result = new FlatFeatureDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IFlatFeatureDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: FeatureInputTypeDto;
}

export class FeatureInputTypeDto implements IFeatureInputTypeDto {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;
    itemSource: LocalizableComboboxItemSourceDto;

    constructor(data?: IFeatureInputTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key];
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : <any>undefined;
            this.itemSource = data["itemSource"] ? LocalizableComboboxItemSourceDto.fromJS(data["itemSource"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FeatureInputTypeDto {
        let result = new FeatureInputTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : <any>undefined;
        data["itemSource"] = this.itemSource ? this.itemSource.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IFeatureInputTypeDto {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;
    itemSource: LocalizableComboboxItemSourceDto;
}

export class IValueValidator implements IIValueValidator {
    name: string;
    attributes: { [key: string] : any; };

    constructor(data?: IIValueValidator) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key];
                }
            }
        }
    }

    static fromJS(data: any): IValueValidator {
        let result = new IValueValidator();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        return data; 
    }
}

export interface IIValueValidator {
    name: string;
    attributes: { [key: string] : any; };
}

export class LocalizableComboboxItemSourceDto implements ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[];

    constructor(data?: ILocalizableComboboxItemSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LocalizableComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LocalizableComboboxItemSourceDto {
        let result = new LocalizableComboboxItemSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILocalizableComboboxItemSourceDto {
    items: LocalizableComboboxItemDto[];
}

export class LocalizableComboboxItemDto implements ILocalizableComboboxItemDto {
    value: string;
    displayText: string;

    constructor(data?: ILocalizableComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
        }
    }

    static fromJS(data: any): LocalizableComboboxItemDto {
        let result = new LocalizableComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        return data; 
    }
}

export interface ILocalizableComboboxItemDto {
    value: string;
    displayText: string;
}

export class CreateOrUpdateEditionDto implements ICreateOrUpdateEditionDto {
    edition: EditionEditDto = new EditionEditDto();
    featureValues: NameValueDto[] = [];

    constructor(data?: ICreateOrUpdateEditionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : new EditionEditDto();
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateEditionDto {
        let result = new CreateOrUpdateEditionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateOrUpdateEditionDto {
    edition: EditionEditDto;
    featureValues: NameValueDto[];
}

export class PagedResultDtoOfEnquiryList implements IPagedResultDtoOfEnquiryList {
    totalCount: number;
    items: EnquiryList[];

    constructor(data?: IPagedResultDtoOfEnquiryList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EnquiryList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfEnquiryList {
        let result = new PagedResultDtoOfEnquiryList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfEnquiryList {
    totalCount: number;
    items: EnquiryList[];
}

export class EnquiryList implements IEnquiryList {
    id: number;
    enquiryNo: string;
    title: string;
    mileStoneId: number;
    mileStoneName: string;
    mileStoneStatusId: number;
    mileStoneStatusName: string;
    companyId: number;
    companyName: string;
    contactId: number;
    contactName: string;
    remarks: string;
    creationTime: moment.Moment;
    closeDate: moment.Moment;
    estimationValue: number;

    constructor(data?: IEnquiryList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.enquiryNo = data["enquiryNo"];
            this.title = data["title"];
            this.mileStoneId = data["mileStoneId"];
            this.mileStoneName = data["mileStoneName"];
            this.mileStoneStatusId = data["mileStoneStatusId"];
            this.mileStoneStatusName = data["mileStoneStatusName"];
            this.companyId = data["companyId"];
            this.companyName = data["companyName"];
            this.contactId = data["contactId"];
            this.contactName = data["contactName"];
            this.remarks = data["remarks"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.closeDate = data["closeDate"] ? moment(data["closeDate"].toString()) : <any>undefined;
            this.estimationValue = data["estimationValue"];
        }
    }

    static fromJS(data: any): EnquiryList {
        let result = new EnquiryList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enquiryNo"] = this.enquiryNo;
        data["title"] = this.title;
        data["mileStoneId"] = this.mileStoneId;
        data["mileStoneName"] = this.mileStoneName;
        data["mileStoneStatusId"] = this.mileStoneStatusId;
        data["mileStoneStatusName"] = this.mileStoneStatusName;
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        data["contactId"] = this.contactId;
        data["contactName"] = this.contactName;
        data["remarks"] = this.remarks;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["closeDate"] = this.closeDate ? this.closeDate.toISOString() : <any>undefined;
        data["estimationValue"] = this.estimationValue;
        return data; 
    }
}

export interface IEnquiryList {
    id: number;
    enquiryNo: string;
    title: string;
    mileStoneId: number;
    mileStoneName: string;
    mileStoneStatusId: number;
    mileStoneStatusName: string;
    companyId: number;
    companyName: string;
    contactId: number;
    contactName: string;
    remarks: string;
    creationTime: moment.Moment;
    closeDate: moment.Moment;
    estimationValue: number;
}

export class ListResultDtoOfEnquiryList implements IListResultDtoOfEnquiryList {
    items: EnquiryList[];

    constructor(data?: IListResultDtoOfEnquiryList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EnquiryList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfEnquiryList {
        let result = new ListResultDtoOfEnquiryList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfEnquiryList {
    items: EnquiryList[];
}

export class EnquiryInput implements IEnquiryInput {
    id: number;
    enquiryNo: string;
    title: string;
    mileStoneId: number;
    mileStoneStatusId: number;
    companyId: number;
    contactId: number;
    remarks: string;
    closeDate: moment.Moment;
    tenantId: number;
    estimationValue: number;

    constructor(data?: IEnquiryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.enquiryNo = data["enquiryNo"];
            this.title = data["title"];
            this.mileStoneId = data["mileStoneId"];
            this.mileStoneStatusId = data["mileStoneStatusId"];
            this.companyId = data["companyId"];
            this.contactId = data["contactId"];
            this.remarks = data["remarks"];
            this.closeDate = data["closeDate"] ? moment(data["closeDate"].toString()) : <any>undefined;
            this.tenantId = data["tenantId"];
            this.estimationValue = data["estimationValue"];
        }
    }

    static fromJS(data: any): EnquiryInput {
        let result = new EnquiryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enquiryNo"] = this.enquiryNo;
        data["title"] = this.title;
        data["mileStoneId"] = this.mileStoneId;
        data["mileStoneStatusId"] = this.mileStoneStatusId;
        data["companyId"] = this.companyId;
        data["contactId"] = this.contactId;
        data["remarks"] = this.remarks;
        data["closeDate"] = this.closeDate ? this.closeDate.toISOString() : <any>undefined;
        data["tenantId"] = this.tenantId;
        data["estimationValue"] = this.estimationValue;
        return data; 
    }
}

export interface IEnquiryInput {
    id: number;
    enquiryNo: string;
    title: string;
    mileStoneId: number;
    mileStoneStatusId: number;
    companyId: number;
    contactId: number;
    remarks: string;
    closeDate: moment.Moment;
    tenantId: number;
    estimationValue: number;
}

export class GetEnquiry implements IGetEnquiry {
    enquiryDetail: EnquiryList;

    constructor(data?: IGetEnquiry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.enquiryDetail = data["enquiryDetail"] ? EnquiryList.fromJS(data["enquiryDetail"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetEnquiry {
        let result = new GetEnquiry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enquiryDetail"] = this.enquiryDetail ? this.enquiryDetail.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetEnquiry {
    enquiryDetail: EnquiryList;
}

export class EnquiryKanbanUpdateInput implements IEnquiryKanbanUpdateInput {
    enquiryId: number;
    updateMilestone: string;
    currentMilestone: string;

    constructor(data?: IEnquiryKanbanUpdateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.enquiryId = data["enquiryId"];
            this.updateMilestone = data["updateMilestone"];
            this.currentMilestone = data["currentMilestone"];
        }
    }

    static fromJS(data: any): EnquiryKanbanUpdateInput {
        let result = new EnquiryKanbanUpdateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enquiryId"] = this.enquiryId;
        data["updateMilestone"] = this.updateMilestone;
        data["currentMilestone"] = this.currentMilestone;
        return data; 
    }
}

export interface IEnquiryKanbanUpdateInput {
    enquiryId: number;
    updateMilestone: string;
    currentMilestone: string;
}

export class EnquiryQuotationKanbanUpdateInput implements IEnquiryQuotationKanbanUpdateInput {
    quotationId: number;
    updateMilestone: string;
    currentMilestone: string;

    constructor(data?: IEnquiryQuotationKanbanUpdateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.quotationId = data["quotationId"];
            this.updateMilestone = data["updateMilestone"];
            this.currentMilestone = data["currentMilestone"];
        }
    }

    static fromJS(data: any): EnquiryQuotationKanbanUpdateInput {
        let result = new EnquiryQuotationKanbanUpdateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotationId"] = this.quotationId;
        data["updateMilestone"] = this.updateMilestone;
        data["currentMilestone"] = this.currentMilestone;
        return data; 
    }
}

export interface IEnquiryQuotationKanbanUpdateInput {
    quotationId: number;
    updateMilestone: string;
    currentMilestone: string;
}

export class PagedResultDtoOfQuotationList implements IPagedResultDtoOfQuotationList {
    totalCount: number;
    items: QuotationList[];

    constructor(data?: IPagedResultDtoOfQuotationList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QuotationList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfQuotationList {
        let result = new PagedResultDtoOfQuotationList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfQuotationList {
    totalCount: number;
    items: QuotationList[];
}

export class QuotationList implements IQuotationList {
    id: number;
    subjectName: string;
    proposalNumber: string;
    projectRef: string;
    date: moment.Moment;
    dateString: string;
    closureDate: moment.Moment;
    revised: boolean;
    archived: boolean;
    total: number;
    salesOrderNumber: string;
    lostDate: moment.Moment;
    overallDiscount: number;
    overallDiscountinUSD: number;
    customerPONumber: string;
    exchangeRate: number;
    enquiryId: number;
    enquiryTitle: string;
    quotationTitleId: number;
    quotationTitleName: string;
    companyId: number;
    companyName: string;
    statusId: number;
    statusName: string;
    freightId: number;
    freightName: string;
    paymentId: number;
    paymentName: string;
    packingId: number;
    packingName: string;
    warrantyId: number;
    warrantyName: string;
    validityId: number;
    validityName: string;
    deliveryId: number;
    deliveryName: string;
    currencyId: number;
    currencyName: string;
    salesmanId: number;
    reasonId: number;
    reasonName: string;
    tenantId: number;
    contactId: number;
    contactName: string;
    mileStoneId: number;
    submitted: boolean;
    submittedDate: moment.Moment;
    won: boolean;
    wonDate: moment.Moment;
    lost: boolean;
    overAllTotal: number;
    competitorId: number;
    competitorName: string;
    vat: boolean;
    vatPercentage: number;
    vatAmount: number;
    creationTime: moment.Moment;

    constructor(data?: IQuotationList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.subjectName = data["subjectName"];
            this.proposalNumber = data["proposalNumber"];
            this.projectRef = data["projectRef"];
            this.date = data["date"] ? moment(data["date"].toString()) : <any>undefined;
            this.dateString = data["dateString"];
            this.closureDate = data["closureDate"] ? moment(data["closureDate"].toString()) : <any>undefined;
            this.revised = data["revised"];
            this.archived = data["archived"];
            this.total = data["total"];
            this.salesOrderNumber = data["salesOrderNumber"];
            this.lostDate = data["lostDate"] ? moment(data["lostDate"].toString()) : <any>undefined;
            this.overallDiscount = data["overallDiscount"];
            this.overallDiscountinUSD = data["overallDiscountinUSD"];
            this.customerPONumber = data["customerPONumber"];
            this.exchangeRate = data["exchangeRate"];
            this.enquiryId = data["enquiryId"];
            this.enquiryTitle = data["enquiryTitle"];
            this.quotationTitleId = data["quotationTitleId"];
            this.quotationTitleName = data["quotationTitleName"];
            this.companyId = data["companyId"];
            this.companyName = data["companyName"];
            this.statusId = data["statusId"];
            this.statusName = data["statusName"];
            this.freightId = data["freightId"];
            this.freightName = data["freightName"];
            this.paymentId = data["paymentId"];
            this.paymentName = data["paymentName"];
            this.packingId = data["packingId"];
            this.packingName = data["packingName"];
            this.warrantyId = data["warrantyId"];
            this.warrantyName = data["warrantyName"];
            this.validityId = data["validityId"];
            this.validityName = data["validityName"];
            this.deliveryId = data["deliveryId"];
            this.deliveryName = data["deliveryName"];
            this.currencyId = data["currencyId"];
            this.currencyName = data["currencyName"];
            this.salesmanId = data["salesmanId"];
            this.reasonId = data["reasonId"];
            this.reasonName = data["reasonName"];
            this.tenantId = data["tenantId"];
            this.contactId = data["contactId"];
            this.contactName = data["contactName"];
            this.mileStoneId = data["mileStoneId"];
            this.submitted = data["submitted"];
            this.submittedDate = data["submittedDate"] ? moment(data["submittedDate"].toString()) : <any>undefined;
            this.won = data["won"];
            this.wonDate = data["wonDate"] ? moment(data["wonDate"].toString()) : <any>undefined;
            this.lost = data["lost"];
            this.overAllTotal = data["overAllTotal"];
            this.competitorId = data["competitorId"];
            this.competitorName = data["competitorName"];
            this.vat = data["vat"];
            this.vatPercentage = data["vatPercentage"];
            this.vatAmount = data["vatAmount"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): QuotationList {
        let result = new QuotationList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["subjectName"] = this.subjectName;
        data["proposalNumber"] = this.proposalNumber;
        data["projectRef"] = this.projectRef;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["dateString"] = this.dateString;
        data["closureDate"] = this.closureDate ? this.closureDate.toISOString() : <any>undefined;
        data["revised"] = this.revised;
        data["archived"] = this.archived;
        data["total"] = this.total;
        data["salesOrderNumber"] = this.salesOrderNumber;
        data["lostDate"] = this.lostDate ? this.lostDate.toISOString() : <any>undefined;
        data["overallDiscount"] = this.overallDiscount;
        data["overallDiscountinUSD"] = this.overallDiscountinUSD;
        data["customerPONumber"] = this.customerPONumber;
        data["exchangeRate"] = this.exchangeRate;
        data["enquiryId"] = this.enquiryId;
        data["enquiryTitle"] = this.enquiryTitle;
        data["quotationTitleId"] = this.quotationTitleId;
        data["quotationTitleName"] = this.quotationTitleName;
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        data["statusId"] = this.statusId;
        data["statusName"] = this.statusName;
        data["freightId"] = this.freightId;
        data["freightName"] = this.freightName;
        data["paymentId"] = this.paymentId;
        data["paymentName"] = this.paymentName;
        data["packingId"] = this.packingId;
        data["packingName"] = this.packingName;
        data["warrantyId"] = this.warrantyId;
        data["warrantyName"] = this.warrantyName;
        data["validityId"] = this.validityId;
        data["validityName"] = this.validityName;
        data["deliveryId"] = this.deliveryId;
        data["deliveryName"] = this.deliveryName;
        data["currencyId"] = this.currencyId;
        data["currencyName"] = this.currencyName;
        data["salesmanId"] = this.salesmanId;
        data["reasonId"] = this.reasonId;
        data["reasonName"] = this.reasonName;
        data["tenantId"] = this.tenantId;
        data["contactId"] = this.contactId;
        data["contactName"] = this.contactName;
        data["mileStoneId"] = this.mileStoneId;
        data["submitted"] = this.submitted;
        data["submittedDate"] = this.submittedDate ? this.submittedDate.toISOString() : <any>undefined;
        data["won"] = this.won;
        data["wonDate"] = this.wonDate ? this.wonDate.toISOString() : <any>undefined;
        data["lost"] = this.lost;
        data["overAllTotal"] = this.overAllTotal;
        data["competitorId"] = this.competitorId;
        data["competitorName"] = this.competitorName;
        data["vat"] = this.vat;
        data["vatPercentage"] = this.vatPercentage;
        data["vatAmount"] = this.vatAmount;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IQuotationList {
    id: number;
    subjectName: string;
    proposalNumber: string;
    projectRef: string;
    date: moment.Moment;
    dateString: string;
    closureDate: moment.Moment;
    revised: boolean;
    archived: boolean;
    total: number;
    salesOrderNumber: string;
    lostDate: moment.Moment;
    overallDiscount: number;
    overallDiscountinUSD: number;
    customerPONumber: string;
    exchangeRate: number;
    enquiryId: number;
    enquiryTitle: string;
    quotationTitleId: number;
    quotationTitleName: string;
    companyId: number;
    companyName: string;
    statusId: number;
    statusName: string;
    freightId: number;
    freightName: string;
    paymentId: number;
    paymentName: string;
    packingId: number;
    packingName: string;
    warrantyId: number;
    warrantyName: string;
    validityId: number;
    validityName: string;
    deliveryId: number;
    deliveryName: string;
    currencyId: number;
    currencyName: string;
    salesmanId: number;
    reasonId: number;
    reasonName: string;
    tenantId: number;
    contactId: number;
    contactName: string;
    mileStoneId: number;
    submitted: boolean;
    submittedDate: moment.Moment;
    won: boolean;
    wonDate: moment.Moment;
    lost: boolean;
    overAllTotal: number;
    competitorId: number;
    competitorName: string;
    vat: boolean;
    vatPercentage: number;
    vatAmount: number;
    creationTime: moment.Moment;
}

export class PagedResultDtoOfEnquiryQuotationKanbanList implements IPagedResultDtoOfEnquiryQuotationKanbanList {
    totalCount: number;
    items: EnquiryQuotationKanbanList[];

    constructor(data?: IPagedResultDtoOfEnquiryQuotationKanbanList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(EnquiryQuotationKanbanList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfEnquiryQuotationKanbanList {
        let result = new PagedResultDtoOfEnquiryQuotationKanbanList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfEnquiryQuotationKanbanList {
    totalCount: number;
    items: EnquiryQuotationKanbanList[];
}

export class EnquiryQuotationKanbanList implements IEnquiryQuotationKanbanList {
    id: number;
    enquiryNo: string;
    title: string;
    mileStoneId: number;
    mileStoneName: string;
    mileStoneStatusId: number;
    mileStoneStatusName: string;
    companyId: number;
    companyName: string;
    contactId: number;
    contactName: string;
    creationTime: moment.Moment;
    isQuotation: boolean;
    quotationId: number;
    subjectName: string;
    closeDate: moment.Moment;
    total: number;
    quotationCount: number;
    enqQuotation: string;
    qRefno: string;
    creator: string;
    creatorImg: string;
    salesperson: string;
    salespersonImg: string;
    remarks: string;

    constructor(data?: IEnquiryQuotationKanbanList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.enquiryNo = data["enquiryNo"];
            this.title = data["title"];
            this.mileStoneId = data["mileStoneId"];
            this.mileStoneName = data["mileStoneName"];
            this.mileStoneStatusId = data["mileStoneStatusId"];
            this.mileStoneStatusName = data["mileStoneStatusName"];
            this.companyId = data["companyId"];
            this.companyName = data["companyName"];
            this.contactId = data["contactId"];
            this.contactName = data["contactName"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.isQuotation = data["isQuotation"];
            this.quotationId = data["quotationId"];
            this.subjectName = data["subjectName"];
            this.closeDate = data["closeDate"] ? moment(data["closeDate"].toString()) : <any>undefined;
            this.total = data["total"];
            this.quotationCount = data["quotationCount"];
            this.enqQuotation = data["enqQuotation"];
            this.qRefno = data["qRefno"];
            this.creator = data["creator"];
            this.creatorImg = data["creatorImg"];
            this.salesperson = data["salesperson"];
            this.salespersonImg = data["salespersonImg"];
            this.remarks = data["remarks"];
        }
    }

    static fromJS(data: any): EnquiryQuotationKanbanList {
        let result = new EnquiryQuotationKanbanList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enquiryNo"] = this.enquiryNo;
        data["title"] = this.title;
        data["mileStoneId"] = this.mileStoneId;
        data["mileStoneName"] = this.mileStoneName;
        data["mileStoneStatusId"] = this.mileStoneStatusId;
        data["mileStoneStatusName"] = this.mileStoneStatusName;
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        data["contactId"] = this.contactId;
        data["contactName"] = this.contactName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["isQuotation"] = this.isQuotation;
        data["quotationId"] = this.quotationId;
        data["subjectName"] = this.subjectName;
        data["closeDate"] = this.closeDate ? this.closeDate.toISOString() : <any>undefined;
        data["total"] = this.total;
        data["quotationCount"] = this.quotationCount;
        data["enqQuotation"] = this.enqQuotation;
        data["qRefno"] = this.qRefno;
        data["creator"] = this.creator;
        data["creatorImg"] = this.creatorImg;
        data["salesperson"] = this.salesperson;
        data["salespersonImg"] = this.salespersonImg;
        data["remarks"] = this.remarks;
        return data; 
    }
}

export interface IEnquiryQuotationKanbanList {
    id: number;
    enquiryNo: string;
    title: string;
    mileStoneId: number;
    mileStoneName: string;
    mileStoneStatusId: number;
    mileStoneStatusName: string;
    companyId: number;
    companyName: string;
    contactId: number;
    contactName: string;
    creationTime: moment.Moment;
    isQuotation: boolean;
    quotationId: number;
    subjectName: string;
    closeDate: moment.Moment;
    total: number;
    quotationCount: number;
    enqQuotation: string;
    qRefno: string;
    creator: string;
    creatorImg: string;
    salesperson: string;
    salespersonImg: string;
    remarks: string;
}

export class ListResultDtoOfFreightListDto implements IListResultDtoOfFreightListDto {
    items: FreightListDto[];

    constructor(data?: IListResultDtoOfFreightListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(FreightListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfFreightListDto {
        let result = new ListResultDtoOfFreightListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfFreightListDto {
    items: FreightListDto[];
}

export class FreightListDto implements IFreightListDto {
    id: number;
    freightCode: string;
    freightName: string;
    tenantId: number;

    constructor(data?: IFreightListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.freightCode = data["freightCode"];
            this.freightName = data["freightName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): FreightListDto {
        let result = new FreightListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["freightCode"] = this.freightCode;
        data["freightName"] = this.freightName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IFreightListDto {
    id: number;
    freightCode: string;
    freightName: string;
    tenantId: number;
}

export class GetFreight implements IGetFreight {
    freight: CreateFreightInput;

    constructor(data?: IGetFreight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.freight = data["freight"] ? CreateFreightInput.fromJS(data["freight"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFreight {
        let result = new GetFreight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["freight"] = this.freight ? this.freight.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetFreight {
    freight: CreateFreightInput;
}

export class CreateFreightInput implements ICreateFreightInput {
    id: number;
    freightCode: string;
    freightName: string;
    tenantId: number;

    constructor(data?: ICreateFreightInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.freightCode = data["freightCode"];
            this.freightName = data["freightName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateFreightInput {
        let result = new CreateFreightInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["freightCode"] = this.freightCode;
        data["freightName"] = this.freightName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateFreightInput {
    id: number;
    freightCode: string;
    freightName: string;
    tenantId: number;
}

export class CreateFriendshipRequestInput implements ICreateFriendshipRequestInput {
    userId: number;
    tenantId: number;

    constructor(data?: ICreateFriendshipRequestInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateFriendshipRequestInput {
        let result = new CreateFriendshipRequestInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateFriendshipRequestInput {
    userId: number;
    tenantId: number;
}

export class CreateFriendshipRequestByUserNameInput implements ICreateFriendshipRequestByUserNameInput {
    tenancyName: string;
    userName: string;

    constructor(data?: ICreateFriendshipRequestByUserNameInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): CreateFriendshipRequestByUserNameInput {
        let result = new CreateFriendshipRequestByUserNameInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface ICreateFriendshipRequestByUserNameInput {
    tenancyName: string;
    userName: string;
}

export class BlockUserInput implements IBlockUserInput {
    userId: number;
    tenantId: number;

    constructor(data?: IBlockUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): BlockUserInput {
        let result = new BlockUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IBlockUserInput {
    userId: number;
    tenantId: number;
}

export class UnblockUserInput implements IUnblockUserInput {
    userId: number;
    tenantId: number;

    constructor(data?: IUnblockUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): UnblockUserInput {
        let result = new UnblockUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IUnblockUserInput {
    userId: number;
    tenantId: number;
}

export class AcceptFriendshipRequestInput implements IAcceptFriendshipRequestInput {
    userId: number;
    tenantId: number;

    constructor(data?: IAcceptFriendshipRequestInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): AcceptFriendshipRequestInput {
        let result = new AcceptFriendshipRequestInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IAcceptFriendshipRequestInput {
    userId: number;
    tenantId: number;
}

export class HostDashboardData implements IHostDashboardData {
    newTenantsCount: number;
    newSubscriptionAmount: number;
    dashboardPlaceholder1: number;
    dashboardPlaceholder2: number;
    incomeStatistics: IncomeStastistic[];
    editionStatistics: TenantEdition[];
    expiringTenants: ExpiringTenant[];
    recentTenants: RecentTenant[];
    maxExpiringTenantsShownCount: number;
    maxRecentTenantsShownCount: number;
    subscriptionEndAlertDayCount: number;
    recentTenantsDayCount: number;
    subscriptionEndDateStart: moment.Moment;
    subscriptionEndDateEnd: moment.Moment;
    tenantCreationStartDate: moment.Moment;

    constructor(data?: IHostDashboardData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.newTenantsCount = data["newTenantsCount"];
            this.newSubscriptionAmount = data["newSubscriptionAmount"];
            this.dashboardPlaceholder1 = data["dashboardPlaceholder1"];
            this.dashboardPlaceholder2 = data["dashboardPlaceholder2"];
            if (data["incomeStatistics"] && data["incomeStatistics"].constructor === Array) {
                this.incomeStatistics = [];
                for (let item of data["incomeStatistics"])
                    this.incomeStatistics.push(IncomeStastistic.fromJS(item));
            }
            if (data["editionStatistics"] && data["editionStatistics"].constructor === Array) {
                this.editionStatistics = [];
                for (let item of data["editionStatistics"])
                    this.editionStatistics.push(TenantEdition.fromJS(item));
            }
            if (data["expiringTenants"] && data["expiringTenants"].constructor === Array) {
                this.expiringTenants = [];
                for (let item of data["expiringTenants"])
                    this.expiringTenants.push(ExpiringTenant.fromJS(item));
            }
            if (data["recentTenants"] && data["recentTenants"].constructor === Array) {
                this.recentTenants = [];
                for (let item of data["recentTenants"])
                    this.recentTenants.push(RecentTenant.fromJS(item));
            }
            this.maxExpiringTenantsShownCount = data["maxExpiringTenantsShownCount"];
            this.maxRecentTenantsShownCount = data["maxRecentTenantsShownCount"];
            this.subscriptionEndAlertDayCount = data["subscriptionEndAlertDayCount"];
            this.recentTenantsDayCount = data["recentTenantsDayCount"];
            this.subscriptionEndDateStart = data["subscriptionEndDateStart"] ? moment(data["subscriptionEndDateStart"].toString()) : <any>undefined;
            this.subscriptionEndDateEnd = data["subscriptionEndDateEnd"] ? moment(data["subscriptionEndDateEnd"].toString()) : <any>undefined;
            this.tenantCreationStartDate = data["tenantCreationStartDate"] ? moment(data["tenantCreationStartDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HostDashboardData {
        let result = new HostDashboardData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newTenantsCount"] = this.newTenantsCount;
        data["newSubscriptionAmount"] = this.newSubscriptionAmount;
        data["dashboardPlaceholder1"] = this.dashboardPlaceholder1;
        data["dashboardPlaceholder2"] = this.dashboardPlaceholder2;
        if (this.incomeStatistics && this.incomeStatistics.constructor === Array) {
            data["incomeStatistics"] = [];
            for (let item of this.incomeStatistics)
                data["incomeStatistics"].push(item.toJSON());
        }
        if (this.editionStatistics && this.editionStatistics.constructor === Array) {
            data["editionStatistics"] = [];
            for (let item of this.editionStatistics)
                data["editionStatistics"].push(item.toJSON());
        }
        if (this.expiringTenants && this.expiringTenants.constructor === Array) {
            data["expiringTenants"] = [];
            for (let item of this.expiringTenants)
                data["expiringTenants"].push(item.toJSON());
        }
        if (this.recentTenants && this.recentTenants.constructor === Array) {
            data["recentTenants"] = [];
            for (let item of this.recentTenants)
                data["recentTenants"].push(item.toJSON());
        }
        data["maxExpiringTenantsShownCount"] = this.maxExpiringTenantsShownCount;
        data["maxRecentTenantsShownCount"] = this.maxRecentTenantsShownCount;
        data["subscriptionEndAlertDayCount"] = this.subscriptionEndAlertDayCount;
        data["recentTenantsDayCount"] = this.recentTenantsDayCount;
        data["subscriptionEndDateStart"] = this.subscriptionEndDateStart ? this.subscriptionEndDateStart.toISOString() : <any>undefined;
        data["subscriptionEndDateEnd"] = this.subscriptionEndDateEnd ? this.subscriptionEndDateEnd.toISOString() : <any>undefined;
        data["tenantCreationStartDate"] = this.tenantCreationStartDate ? this.tenantCreationStartDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IHostDashboardData {
    newTenantsCount: number;
    newSubscriptionAmount: number;
    dashboardPlaceholder1: number;
    dashboardPlaceholder2: number;
    incomeStatistics: IncomeStastistic[];
    editionStatistics: TenantEdition[];
    expiringTenants: ExpiringTenant[];
    recentTenants: RecentTenant[];
    maxExpiringTenantsShownCount: number;
    maxRecentTenantsShownCount: number;
    subscriptionEndAlertDayCount: number;
    recentTenantsDayCount: number;
    subscriptionEndDateStart: moment.Moment;
    subscriptionEndDateEnd: moment.Moment;
    tenantCreationStartDate: moment.Moment;
}

export class IncomeStastistic implements IIncomeStastistic {
    label: string;
    date: moment.Moment;
    amount: number;

    constructor(data?: IIncomeStastistic) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.label = data["label"];
            this.date = data["date"] ? moment(data["date"].toString()) : <any>undefined;
            this.amount = data["amount"];
        }
    }

    static fromJS(data: any): IncomeStastistic {
        let result = new IncomeStastistic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface IIncomeStastistic {
    label: string;
    date: moment.Moment;
    amount: number;
}

export class TenantEdition implements ITenantEdition {
    label: string;
    value: number;

    constructor(data?: ITenantEdition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.label = data["label"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): TenantEdition {
        let result = new TenantEdition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data; 
    }
}

export interface ITenantEdition {
    label: string;
    value: number;
}

export class ExpiringTenant implements IExpiringTenant {
    tenantName: string;
    remainingDayCount: number;

    constructor(data?: IExpiringTenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantName = data["tenantName"];
            this.remainingDayCount = data["remainingDayCount"];
        }
    }

    static fromJS(data: any): ExpiringTenant {
        let result = new ExpiringTenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantName"] = this.tenantName;
        data["remainingDayCount"] = this.remainingDayCount;
        return data; 
    }
}

export interface IExpiringTenant {
    tenantName: string;
    remainingDayCount: number;
}

export class RecentTenant implements IRecentTenant {
    id: number;
    name: string;
    creationTime: moment.Moment;

    constructor(data?: IRecentTenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RecentTenant {
        let result = new RecentTenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IRecentTenant {
    id: number;
    name: string;
    creationTime: moment.Moment;
}

export class GetIncomeStatisticsDataOutput implements IGetIncomeStatisticsDataOutput {
    incomeStatistics: IncomeStastistic[];

    constructor(data?: IGetIncomeStatisticsDataOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["incomeStatistics"] && data["incomeStatistics"].constructor === Array) {
                this.incomeStatistics = [];
                for (let item of data["incomeStatistics"])
                    this.incomeStatistics.push(IncomeStastistic.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetIncomeStatisticsDataOutput {
        let result = new GetIncomeStatisticsDataOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.incomeStatistics && this.incomeStatistics.constructor === Array) {
            data["incomeStatistics"] = [];
            for (let item of this.incomeStatistics)
                data["incomeStatistics"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetIncomeStatisticsDataOutput {
    incomeStatistics: IncomeStastistic[];
}

export class GetEditionTenantStatisticsOutput implements IGetEditionTenantStatisticsOutput {
    editionStatistics: TenantEdition[];

    constructor(data?: IGetEditionTenantStatisticsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["editionStatistics"] && data["editionStatistics"].constructor === Array) {
                this.editionStatistics = [];
                for (let item of data["editionStatistics"])
                    this.editionStatistics.push(TenantEdition.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEditionTenantStatisticsOutput {
        let result = new GetEditionTenantStatisticsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.editionStatistics && this.editionStatistics.constructor === Array) {
            data["editionStatistics"] = [];
            for (let item of this.editionStatistics)
                data["editionStatistics"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEditionTenantStatisticsOutput {
    editionStatistics: TenantEdition[];
}

export class HostSettingsEditDto implements IHostSettingsEditDto {
    general: GeneralSettingsEditDto = new GeneralSettingsEditDto();
    userManagement: HostUserManagementSettingsEditDto = new HostUserManagementSettingsEditDto();
    email: EmailSettingsEditDto = new EmailSettingsEditDto();
    tenantManagement: TenantManagementSettingsEditDto = new TenantManagementSettingsEditDto();
    security: SecuritySettingsEditDto = new SecuritySettingsEditDto();

    constructor(data?: IHostSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : new GeneralSettingsEditDto();
            this.userManagement = data["userManagement"] ? HostUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new HostUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : new EmailSettingsEditDto();
            this.tenantManagement = data["tenantManagement"] ? TenantManagementSettingsEditDto.fromJS(data["tenantManagement"]) : new TenantManagementSettingsEditDto();
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
        }
    }

    static fromJS(data: any): HostSettingsEditDto {
        let result = new HostSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any>undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
        data["email"] = this.email ? this.email.toJSON() : <any>undefined;
        data["tenantManagement"] = this.tenantManagement ? this.tenantManagement.toJSON() : <any>undefined;
        data["security"] = this.security ? this.security.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IHostSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: HostUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    tenantManagement: TenantManagementSettingsEditDto;
    security: SecuritySettingsEditDto;
}

export class GeneralSettingsEditDto implements IGeneralSettingsEditDto {
    timezone: string;
    timezoneForComparison: string;

    constructor(data?: IGeneralSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.timezone = data["timezone"];
            this.timezoneForComparison = data["timezoneForComparison"];
        }
    }

    static fromJS(data: any): GeneralSettingsEditDto {
        let result = new GeneralSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timezone"] = this.timezone;
        data["timezoneForComparison"] = this.timezoneForComparison;
        return data; 
    }
}

export interface IGeneralSettingsEditDto {
    timezone: string;
    timezoneForComparison: string;
}

export class HostUserManagementSettingsEditDto implements IHostUserManagementSettingsEditDto {
    isEmailConfirmationRequiredForLogin: boolean;
    smsVerificationEnabled: boolean;

    constructor(data?: IHostUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"];
            this.smsVerificationEnabled = data["smsVerificationEnabled"];
        }
    }

    static fromJS(data: any): HostUserManagementSettingsEditDto {
        let result = new HostUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["smsVerificationEnabled"] = this.smsVerificationEnabled;
        return data; 
    }
}

export interface IHostUserManagementSettingsEditDto {
    isEmailConfirmationRequiredForLogin: boolean;
    smsVerificationEnabled: boolean;
}

export class EmailSettingsEditDto implements IEmailSettingsEditDto {
    defaultFromAddress: string;
    defaultFromDisplayName: string;
    smtpHost: string;
    smtpPort: number;
    smtpUserName: string;
    smtpPassword: string;
    smtpDomain: string;
    smtpEnableSsl: boolean;
    smtpUseDefaultCredentials: boolean;

    constructor(data?: IEmailSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.defaultFromAddress = data["defaultFromAddress"];
            this.defaultFromDisplayName = data["defaultFromDisplayName"];
            this.smtpHost = data["smtpHost"];
            this.smtpPort = data["smtpPort"];
            this.smtpUserName = data["smtpUserName"];
            this.smtpPassword = data["smtpPassword"];
            this.smtpDomain = data["smtpDomain"];
            this.smtpEnableSsl = data["smtpEnableSsl"];
            this.smtpUseDefaultCredentials = data["smtpUseDefaultCredentials"];
        }
    }

    static fromJS(data: any): EmailSettingsEditDto {
        let result = new EmailSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultFromAddress"] = this.defaultFromAddress;
        data["defaultFromDisplayName"] = this.defaultFromDisplayName;
        data["smtpHost"] = this.smtpHost;
        data["smtpPort"] = this.smtpPort;
        data["smtpUserName"] = this.smtpUserName;
        data["smtpPassword"] = this.smtpPassword;
        data["smtpDomain"] = this.smtpDomain;
        data["smtpEnableSsl"] = this.smtpEnableSsl;
        data["smtpUseDefaultCredentials"] = this.smtpUseDefaultCredentials;
        return data; 
    }
}

export interface IEmailSettingsEditDto {
    defaultFromAddress: string;
    defaultFromDisplayName: string;
    smtpHost: string;
    smtpPort: number;
    smtpUserName: string;
    smtpPassword: string;
    smtpDomain: string;
    smtpEnableSsl: boolean;
    smtpUseDefaultCredentials: boolean;
}

export class TenantManagementSettingsEditDto implements ITenantManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredTenantActiveByDefault: boolean;
    useCaptchaOnRegistration: boolean;
    defaultEditionId: number;

    constructor(data?: ITenantManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.allowSelfRegistration = data["allowSelfRegistration"];
            this.isNewRegisteredTenantActiveByDefault = data["isNewRegisteredTenantActiveByDefault"];
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"];
            this.defaultEditionId = data["defaultEditionId"];
        }
    }

    static fromJS(data: any): TenantManagementSettingsEditDto {
        let result = new TenantManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredTenantActiveByDefault"] = this.isNewRegisteredTenantActiveByDefault;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration;
        data["defaultEditionId"] = this.defaultEditionId;
        return data; 
    }
}

export interface ITenantManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredTenantActiveByDefault: boolean;
    useCaptchaOnRegistration: boolean;
    defaultEditionId: number;
}

export class SecuritySettingsEditDto implements ISecuritySettingsEditDto {
    useDefaultPasswordComplexitySettings: boolean;
    passwordComplexity: PasswordComplexitySetting;
    defaultPasswordComplexity: PasswordComplexitySetting;
    userLockOut: UserLockOutSettingsEditDto;
    twoFactorLogin: TwoFactorLoginSettingsEditDto;

    constructor(data?: ISecuritySettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.useDefaultPasswordComplexitySettings = data["useDefaultPasswordComplexitySettings"];
            this.passwordComplexity = data["passwordComplexity"] ? PasswordComplexitySetting.fromJS(data["passwordComplexity"]) : <any>undefined;
            this.defaultPasswordComplexity = data["defaultPasswordComplexity"] ? PasswordComplexitySetting.fromJS(data["defaultPasswordComplexity"]) : <any>undefined;
            this.userLockOut = data["userLockOut"] ? UserLockOutSettingsEditDto.fromJS(data["userLockOut"]) : <any>undefined;
            this.twoFactorLogin = data["twoFactorLogin"] ? TwoFactorLoginSettingsEditDto.fromJS(data["twoFactorLogin"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SecuritySettingsEditDto {
        let result = new SecuritySettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["useDefaultPasswordComplexitySettings"] = this.useDefaultPasswordComplexitySettings;
        data["passwordComplexity"] = this.passwordComplexity ? this.passwordComplexity.toJSON() : <any>undefined;
        data["defaultPasswordComplexity"] = this.defaultPasswordComplexity ? this.defaultPasswordComplexity.toJSON() : <any>undefined;
        data["userLockOut"] = this.userLockOut ? this.userLockOut.toJSON() : <any>undefined;
        data["twoFactorLogin"] = this.twoFactorLogin ? this.twoFactorLogin.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISecuritySettingsEditDto {
    useDefaultPasswordComplexitySettings: boolean;
    passwordComplexity: PasswordComplexitySetting;
    defaultPasswordComplexity: PasswordComplexitySetting;
    userLockOut: UserLockOutSettingsEditDto;
    twoFactorLogin: TwoFactorLoginSettingsEditDto;
}

export class PasswordComplexitySetting implements IPasswordComplexitySetting {
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;

    constructor(data?: IPasswordComplexitySetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.requireDigit = data["requireDigit"];
            this.requireLowercase = data["requireLowercase"];
            this.requireNonAlphanumeric = data["requireNonAlphanumeric"];
            this.requireUppercase = data["requireUppercase"];
            this.requiredLength = data["requiredLength"];
        }
    }

    static fromJS(data: any): PasswordComplexitySetting {
        let result = new PasswordComplexitySetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requireDigit"] = this.requireDigit;
        data["requireLowercase"] = this.requireLowercase;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric;
        data["requireUppercase"] = this.requireUppercase;
        data["requiredLength"] = this.requiredLength;
        return data; 
    }
}

export interface IPasswordComplexitySetting {
    requireDigit: boolean;
    requireLowercase: boolean;
    requireNonAlphanumeric: boolean;
    requireUppercase: boolean;
    requiredLength: number;
}

export class UserLockOutSettingsEditDto implements IUserLockOutSettingsEditDto {
    isEnabled: boolean;
    maxFailedAccessAttemptsBeforeLockout: number;
    defaultAccountLockoutSeconds: number;

    constructor(data?: IUserLockOutSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEnabled = data["isEnabled"];
            this.maxFailedAccessAttemptsBeforeLockout = data["maxFailedAccessAttemptsBeforeLockout"];
            this.defaultAccountLockoutSeconds = data["defaultAccountLockoutSeconds"];
        }
    }

    static fromJS(data: any): UserLockOutSettingsEditDto {
        let result = new UserLockOutSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        data["maxFailedAccessAttemptsBeforeLockout"] = this.maxFailedAccessAttemptsBeforeLockout;
        data["defaultAccountLockoutSeconds"] = this.defaultAccountLockoutSeconds;
        return data; 
    }
}

export interface IUserLockOutSettingsEditDto {
    isEnabled: boolean;
    maxFailedAccessAttemptsBeforeLockout: number;
    defaultAccountLockoutSeconds: number;
}

export class TwoFactorLoginSettingsEditDto implements ITwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    isEnabled: boolean;
    isEmailProviderEnabled: boolean;
    isSmsProviderEnabled: boolean;
    isRememberBrowserEnabled: boolean;
    isGoogleAuthenticatorEnabled: boolean;

    constructor(data?: ITwoFactorLoginSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isEnabledForApplication = data["isEnabledForApplication"];
            this.isEnabled = data["isEnabled"];
            this.isEmailProviderEnabled = data["isEmailProviderEnabled"];
            this.isSmsProviderEnabled = data["isSmsProviderEnabled"];
            this.isRememberBrowserEnabled = data["isRememberBrowserEnabled"];
            this.isGoogleAuthenticatorEnabled = data["isGoogleAuthenticatorEnabled"];
        }
    }

    static fromJS(data: any): TwoFactorLoginSettingsEditDto {
        let result = new TwoFactorLoginSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabledForApplication"] = this.isEnabledForApplication;
        data["isEnabled"] = this.isEnabled;
        data["isEmailProviderEnabled"] = this.isEmailProviderEnabled;
        data["isSmsProviderEnabled"] = this.isSmsProviderEnabled;
        data["isRememberBrowserEnabled"] = this.isRememberBrowserEnabled;
        data["isGoogleAuthenticatorEnabled"] = this.isGoogleAuthenticatorEnabled;
        return data; 
    }
}

export interface ITwoFactorLoginSettingsEditDto {
    isEnabledForApplication: boolean;
    isEnabled: boolean;
    isEmailProviderEnabled: boolean;
    isSmsProviderEnabled: boolean;
    isRememberBrowserEnabled: boolean;
    isGoogleAuthenticatorEnabled: boolean;
}

export class SendTestEmailInput implements ISendTestEmailInput {
    emailAddress: string;

    constructor(data?: ISendTestEmailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    }

    static fromJS(data: any): SendTestEmailInput {
        let result = new SendTestEmailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data; 
    }
}

export interface ISendTestEmailInput {
    emailAddress: string;
}

export class PagedResultDtoOfNewInfoTypeListDto implements IPagedResultDtoOfNewInfoTypeListDto {
    totalCount: number;
    items: NewInfoTypeListDto[];

    constructor(data?: IPagedResultDtoOfNewInfoTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NewInfoTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfNewInfoTypeListDto {
        let result = new PagedResultDtoOfNewInfoTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfNewInfoTypeListDto {
    totalCount: number;
    items: NewInfoTypeListDto[];
}

export class NewInfoTypeListDto implements INewInfoTypeListDto {
    id: number;
    contactName: string;
    info: boolean;
    tenantId: number;

    constructor(data?: INewInfoTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.contactName = data["contactName"];
            this.info = data["info"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): NewInfoTypeListDto {
        let result = new NewInfoTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["contactName"] = this.contactName;
        data["info"] = this.info;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface INewInfoTypeListDto {
    id: number;
    contactName: string;
    info: boolean;
    tenantId: number;
}

export class GetNewInfoType implements IGetNewInfoType {
    newInfoTypes: NewInfoTypeListDto;

    constructor(data?: IGetNewInfoType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.newInfoTypes = data["newInfoTypes"] ? NewInfoTypeListDto.fromJS(data["newInfoTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetNewInfoType {
        let result = new GetNewInfoType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newInfoTypes"] = this.newInfoTypes ? this.newInfoTypes.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetNewInfoType {
    newInfoTypes: NewInfoTypeListDto;
}

export class NewInfoTypeInputDto implements INewInfoTypeInputDto {
    id: number;
    contactName: string;
    info: boolean;
    tenantId: number;

    constructor(data?: INewInfoTypeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.contactName = data["contactName"];
            this.info = data["info"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): NewInfoTypeInputDto {
        let result = new NewInfoTypeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["contactName"] = this.contactName;
        data["info"] = this.info;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface INewInfoTypeInputDto {
    id: number;
    contactName: string;
    info: boolean;
    tenantId: number;
}

export class GetLanguagesOutput implements IGetLanguagesOutput {
    defaultLanguageName: string;
    items: ApplicationLanguageListDto[];

    constructor(data?: IGetLanguagesOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.defaultLanguageName = data["defaultLanguageName"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ApplicationLanguageListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguagesOutput {
        let result = new GetLanguagesOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultLanguageName"] = this.defaultLanguageName;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetLanguagesOutput {
    defaultLanguageName: string;
    items: ApplicationLanguageListDto[];
}

export class ApplicationLanguageListDto implements IApplicationLanguageListDto {
    tenantId: number;
    name: string;
    displayName: string;
    icon: string;
    isDisabled: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: IApplicationLanguageListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.icon = data["icon"];
            this.isDisabled = data["isDisabled"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ApplicationLanguageListDto {
        let result = new ApplicationLanguageListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["isDisabled"] = this.isDisabled;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IApplicationLanguageListDto {
    tenantId: number;
    name: string;
    displayName: string;
    icon: string;
    isDisabled: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;
}

export class GetLanguageForEditOutput implements IGetLanguageForEditOutput {
    language: ApplicationLanguageEditDto;
    languageNames: ComboboxItemDto[];
    flags: ComboboxItemDto[];

    constructor(data?: IGetLanguageForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : <any>undefined;
            if (data["languageNames"] && data["languageNames"].constructor === Array) {
                this.languageNames = [];
                for (let item of data["languageNames"])
                    this.languageNames.push(ComboboxItemDto.fromJS(item));
            }
            if (data["flags"] && data["flags"].constructor === Array) {
                this.flags = [];
                for (let item of data["flags"])
                    this.flags.push(ComboboxItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguageForEditOutput {
        let result = new GetLanguageForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        if (this.languageNames && this.languageNames.constructor === Array) {
            data["languageNames"] = [];
            for (let item of this.languageNames)
                data["languageNames"].push(item.toJSON());
        }
        if (this.flags && this.flags.constructor === Array) {
            data["flags"] = [];
            for (let item of this.flags)
                data["flags"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetLanguageForEditOutput {
    language: ApplicationLanguageEditDto;
    languageNames: ComboboxItemDto[];
    flags: ComboboxItemDto[];
}

export class ApplicationLanguageEditDto implements IApplicationLanguageEditDto {
    id: number;
    name: string;
    icon: string;
    isEnabled: boolean;

    constructor(data?: IApplicationLanguageEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.icon = data["icon"];
            this.isEnabled = data["isEnabled"];
        }
    }

    static fromJS(data: any): ApplicationLanguageEditDto {
        let result = new ApplicationLanguageEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["isEnabled"] = this.isEnabled;
        return data; 
    }
}

export interface IApplicationLanguageEditDto {
    id: number;
    name: string;
    icon: string;
    isEnabled: boolean;
}

export class ComboboxItemDto implements IComboboxItemDto {
    value: string;
    displayText: string;
    isSelected: boolean;

    constructor(data?: IComboboxItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    }

    static fromJS(data: any): ComboboxItemDto {
        let result = new ComboboxItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data; 
    }
}

export interface IComboboxItemDto {
    value: string;
    displayText: string;
    isSelected: boolean;
}

export class CreateOrUpdateLanguageInput implements ICreateOrUpdateLanguageInput {
    language: ApplicationLanguageEditDto = new ApplicationLanguageEditDto();

    constructor(data?: ICreateOrUpdateLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.language = data["language"] ? ApplicationLanguageEditDto.fromJS(data["language"]) : new ApplicationLanguageEditDto();
        }
    }

    static fromJS(data: any): CreateOrUpdateLanguageInput {
        let result = new CreateOrUpdateLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateOrUpdateLanguageInput {
    language: ApplicationLanguageEditDto;
}

export class SetDefaultLanguageInput implements ISetDefaultLanguageInput {
    name: string;

    constructor(data?: ISetDefaultLanguageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): SetDefaultLanguageInput {
        let result = new SetDefaultLanguageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ISetDefaultLanguageInput {
    name: string;
}

export class PagedResultDtoOfLanguageTextListDto implements IPagedResultDtoOfLanguageTextListDto {
    totalCount: number;
    items: LanguageTextListDto[];

    constructor(data?: IPagedResultDtoOfLanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LanguageTextListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLanguageTextListDto {
        let result = new PagedResultDtoOfLanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLanguageTextListDto {
    totalCount: number;
    items: LanguageTextListDto[];
}

export class LanguageTextListDto implements ILanguageTextListDto {
    key: string;
    baseValue: string;
    targetValue: string;

    constructor(data?: ILanguageTextListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.key = data["key"];
            this.baseValue = data["baseValue"];
            this.targetValue = data["targetValue"];
        }
    }

    static fromJS(data: any): LanguageTextListDto {
        let result = new LanguageTextListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["baseValue"] = this.baseValue;
        data["targetValue"] = this.targetValue;
        return data; 
    }
}

export interface ILanguageTextListDto {
    key: string;
    baseValue: string;
    targetValue: string;
}

export class UpdateLanguageTextInput implements IUpdateLanguageTextInput {
    languageName: string;
    sourceName: string;
    key: string;
    value: string;

    constructor(data?: IUpdateLanguageTextInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.languageName = data["languageName"];
            this.sourceName = data["sourceName"];
            this.key = data["key"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): UpdateLanguageTextInput {
        let result = new UpdateLanguageTextInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        data["sourceName"] = this.sourceName;
        data["key"] = this.key;
        data["value"] = this.value;
        return data; 
    }
}

export interface IUpdateLanguageTextInput {
    languageName: string;
    sourceName: string;
    key: string;
    value: string;
}

export class ListResultDtoOfMileStoneListDto implements IListResultDtoOfMileStoneListDto {
    items: MileStoneListDto[];

    constructor(data?: IListResultDtoOfMileStoneListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(MileStoneListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfMileStoneListDto {
        let result = new ListResultDtoOfMileStoneListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfMileStoneListDto {
    items: MileStoneListDto[];
}

export class MileStoneListDto implements IMileStoneListDto {
    code: string;
    name: string;
    id: number;
    tenantId: number;
    isQuotation: boolean;
    endOfQuotation: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IMileStoneListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.id = data["id"];
            this.tenantId = data["tenantId"];
            this.isQuotation = data["isQuotation"];
            this.endOfQuotation = data["endOfQuotation"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): MileStoneListDto {
        let result = new MileStoneListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["isQuotation"] = this.isQuotation;
        data["endOfQuotation"] = this.endOfQuotation;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IMileStoneListDto {
    code: string;
    name: string;
    id: number;
    tenantId: number;
    isQuotation: boolean;
    endOfQuotation: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetMileStone implements IGetMileStone {
    mileStones: CreateMileInputDto;
    mileStoneStatus: MileStoneDetailListDto[];

    constructor(data?: IGetMileStone) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.mileStones = data["mileStones"] ? CreateMileInputDto.fromJS(data["mileStones"]) : <any>undefined;
            if (data["mileStoneStatus"] && data["mileStoneStatus"].constructor === Array) {
                this.mileStoneStatus = [];
                for (let item of data["mileStoneStatus"])
                    this.mileStoneStatus.push(MileStoneDetailListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMileStone {
        let result = new GetMileStone();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mileStones"] = this.mileStones ? this.mileStones.toJSON() : <any>undefined;
        if (this.mileStoneStatus && this.mileStoneStatus.constructor === Array) {
            data["mileStoneStatus"] = [];
            for (let item of this.mileStoneStatus)
                data["mileStoneStatus"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetMileStone {
    mileStones: CreateMileInputDto;
    mileStoneStatus: MileStoneDetailListDto[];
}

export class CreateMileInputDto implements ICreateMileInputDto {
    code: string;
    name: string;
    tenantId: number;
    id: number;
    isQuotation: boolean;
    endOfQuotation: boolean;

    constructor(data?: ICreateMileInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.tenantId = data["tenantId"];
            this.id = data["id"];
            this.isQuotation = data["isQuotation"];
            this.endOfQuotation = data["endOfQuotation"];
        }
    }

    static fromJS(data: any): CreateMileInputDto {
        let result = new CreateMileInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["tenantId"] = this.tenantId;
        data["id"] = this.id;
        data["isQuotation"] = this.isQuotation;
        data["endOfQuotation"] = this.endOfQuotation;
        return data; 
    }
}

export interface ICreateMileInputDto {
    code: string;
    name: string;
    tenantId: number;
    id: number;
    isQuotation: boolean;
    endOfQuotation: boolean;
}

export class MileStoneDetailListDto implements IMileStoneDetailListDto {
    milestoneId: number;
    milestoneStatusId: number;
    statusName: string;
    id: number;
    endOfQuotation: boolean;

    constructor(data?: IMileStoneDetailListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.milestoneId = data["milestoneId"];
            this.milestoneStatusId = data["milestoneStatusId"];
            this.statusName = data["statusName"];
            this.id = data["id"];
            this.endOfQuotation = data["endOfQuotation"];
        }
    }

    static fromJS(data: any): MileStoneDetailListDto {
        let result = new MileStoneDetailListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["milestoneId"] = this.milestoneId;
        data["milestoneStatusId"] = this.milestoneStatusId;
        data["statusName"] = this.statusName;
        data["id"] = this.id;
        data["endOfQuotation"] = this.endOfQuotation;
        return data; 
    }
}

export interface IMileStoneDetailListDto {
    milestoneId: number;
    milestoneStatusId: number;
    statusName: string;
    id: number;
    endOfQuotation: boolean;
}

export class GetMilestoneDetail implements IGetMilestoneDetail {
    mileStoneStatus: CreateMileStoneDetailInput;

    constructor(data?: IGetMilestoneDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.mileStoneStatus = data["mileStoneStatus"] ? CreateMileStoneDetailInput.fromJS(data["mileStoneStatus"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMilestoneDetail {
        let result = new GetMilestoneDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mileStoneStatus"] = this.mileStoneStatus ? this.mileStoneStatus.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMilestoneDetail {
    mileStoneStatus: CreateMileStoneDetailInput;
}

export class CreateMileStoneDetailInput implements ICreateMileStoneDetailInput {
    mileStoneId: number;
    mileStoneStatusId: number;
    id: number;

    constructor(data?: ICreateMileStoneDetailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.mileStoneId = data["mileStoneId"];
            this.mileStoneStatusId = data["mileStoneStatusId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CreateMileStoneDetailInput {
        let result = new CreateMileStoneDetailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mileStoneId"] = this.mileStoneId;
        data["mileStoneStatusId"] = this.mileStoneStatusId;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreateMileStoneDetailInput {
    mileStoneId: number;
    mileStoneStatusId: number;
    id: number;
}

export class ListResultDtoOfMileStoneStatusListDto implements IListResultDtoOfMileStoneStatusListDto {
    items: MileStoneStatusListDto[];

    constructor(data?: IListResultDtoOfMileStoneStatusListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(MileStoneStatusListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfMileStoneStatusListDto {
        let result = new ListResultDtoOfMileStoneStatusListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfMileStoneStatusListDto {
    items: MileStoneStatusListDto[];
}

export class MileStoneStatusListDto implements IMileStoneStatusListDto {
    code: string;
    name: string;
    color: string;
    id: number;
    tenantId: number;

    constructor(data?: IMileStoneStatusListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.color = data["color"];
            this.id = data["id"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): MileStoneStatusListDto {
        let result = new MileStoneStatusListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["color"] = this.color;
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IMileStoneStatusListDto {
    code: string;
    name: string;
    color: string;
    id: number;
    tenantId: number;
}

export class GetMileStoneStatus implements IGetMileStoneStatus {
    currency: CreateMileStoneStatusInput;

    constructor(data?: IGetMileStoneStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.currency = data["currency"] ? CreateMileStoneStatusInput.fromJS(data["currency"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMileStoneStatus {
        let result = new GetMileStoneStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMileStoneStatus {
    currency: CreateMileStoneStatusInput;
}

export class CreateMileStoneStatusInput implements ICreateMileStoneStatusInput {
    code: string;
    name: string;
    color: string;
    id: number;
    tenantId: number;

    constructor(data?: ICreateMileStoneStatusInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.color = data["color"];
            this.id = data["id"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateMileStoneStatusInput {
        let result = new CreateMileStoneStatusInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["color"] = this.color;
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateMileStoneStatusInput {
    code: string;
    name: string;
    color: string;
    id: number;
    tenantId: number;
}

export class GetNotificationsOutput implements IGetNotificationsOutput {
    unreadCount: number;
    totalCount: number;
    items: UserNotification[];

    constructor(data?: IGetNotificationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unreadCount = data["unreadCount"];
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserNotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationsOutput {
        let result = new GetNotificationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unreadCount"] = this.unreadCount;
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetNotificationsOutput {
    unreadCount: number;
    totalCount: number;
    items: UserNotification[];
}

export class UserNotification implements IUserNotification {
    tenantId: number;
    userId: number;
    state: UserNotificationState;
    notification: TenantNotification;
    id: string;

    constructor(data?: IUserNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.state = data["state"];
            this.notification = data["notification"] ? TenantNotification.fromJS(data["notification"]) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserNotification {
        let result = new UserNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["state"] = this.state;
        data["notification"] = this.notification ? this.notification.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserNotification {
    tenantId: number;
    userId: number;
    state: UserNotificationState;
    notification: TenantNotification;
    id: string;
}

export class TenantNotification implements ITenantNotification {
    tenantId: number;
    notificationName: string;
    data: NotificationData;
    entityType: string;
    entityTypeName: string;
    entityId: any;
    severity: TenantNotificationSeverity;
    creationTime: moment.Moment;
    id: string;

    constructor(data?: ITenantNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.notificationName = data["notificationName"];
            this.data = data["data"] ? NotificationData.fromJS(data["data"]) : <any>undefined;
            this.entityType = data["entityType"];
            this.entityTypeName = data["entityTypeName"];
            if (data["entityId"]) {
                this.entityId = {};
                for (let key in data["entityId"]) {
                    if (data["entityId"].hasOwnProperty(key))
                        this.entityId[key] = data["entityId"][key];
                }
            }
            this.severity = data["severity"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantNotification {
        let result = new TenantNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["notificationName"] = this.notificationName;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["entityType"] = this.entityType;
        data["entityTypeName"] = this.entityTypeName;
        if (this.entityId) {
            data["entityId"] = {};
            for (let key in this.entityId) {
                if (this.entityId.hasOwnProperty(key))
                    data["entityId"][key] = this.entityId[key];
            }
        }
        data["severity"] = this.severity;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantNotification {
    tenantId: number;
    notificationName: string;
    data: NotificationData;
    entityType: string;
    entityTypeName: string;
    entityId: any;
    severity: TenantNotificationSeverity;
    creationTime: moment.Moment;
    id: string;
}

export class NotificationData implements INotificationData {
    type: string;
    properties: { [key: string] : any; };

    constructor(data?: INotificationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            if (data["properties"]) {
                this.properties = {};
                for (let key in data["properties"]) {
                    if (data["properties"].hasOwnProperty(key))
                        this.properties[key] = data["properties"][key];
                }
            }
        }
    }

    static fromJS(data: any): NotificationData {
        let result = new NotificationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key];
            }
        }
        return data; 
    }
}

export interface INotificationData {
    type: string;
    properties: { [key: string] : any; };
}

export class EntityDtoOfGuid implements IEntityDtoOfGuid {
    id: string;

    constructor(data?: IEntityDtoOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfGuid {
        let result = new EntityDtoOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfGuid {
    id: string;
}

export class GetNotificationSettingsOutput implements IGetNotificationSettingsOutput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionWithDisplayNameDto[];

    constructor(data?: IGetNotificationSettingsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionWithDisplayNameDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationSettingsOutput {
        let result = new GetNotificationSettingsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetNotificationSettingsOutput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionWithDisplayNameDto[];
}

export class NotificationSubscriptionWithDisplayNameDto implements INotificationSubscriptionWithDisplayNameDto {
    displayName: string;
    description: string;
    name: string;
    isSubscribed: boolean;

    constructor(data?: INotificationSubscriptionWithDisplayNameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionWithDisplayNameDto {
        let result = new NotificationSubscriptionWithDisplayNameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data; 
    }
}

export interface INotificationSubscriptionWithDisplayNameDto {
    displayName: string;
    description: string;
    name: string;
    isSubscribed: boolean;
}

export class UpdateNotificationSettingsInput implements IUpdateNotificationSettingsInput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionDto[];

    constructor(data?: IUpdateNotificationSettingsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateNotificationSettingsInput {
        let result = new UpdateNotificationSettingsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateNotificationSettingsInput {
    receiveNotifications: boolean;
    notifications: NotificationSubscriptionDto[];
}

export class NotificationSubscriptionDto implements INotificationSubscriptionDto {
    name: string;
    isSubscribed: boolean;

    constructor(data?: INotificationSubscriptionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionDto {
        let result = new NotificationSubscriptionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data; 
    }
}

export interface INotificationSubscriptionDto {
    name: string;
    isSubscribed: boolean;
}

export class ListResultDtoOfOrganizationUnitDto implements IListResultDtoOfOrganizationUnitDto {
    items: OrganizationUnitDto[];

    constructor(data?: IListResultDtoOfOrganizationUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrganizationUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfOrganizationUnitDto {
        let result = new ListResultDtoOfOrganizationUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfOrganizationUnitDto {
    items: OrganizationUnitDto[];
}

export class OrganizationUnitDto implements IOrganizationUnitDto {
    parentId: number;
    code: string;
    displayName: string;
    memberCount: number;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: IOrganizationUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"];
            this.code = data["code"];
            this.displayName = data["displayName"];
            this.memberCount = data["memberCount"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitDto {
        let result = new OrganizationUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["code"] = this.code;
        data["displayName"] = this.displayName;
        data["memberCount"] = this.memberCount;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrganizationUnitDto {
    parentId: number;
    code: string;
    displayName: string;
    memberCount: number;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;
}

export class PagedResultDtoOfOrganizationUnitUserListDto implements IPagedResultDtoOfOrganizationUnitUserListDto {
    totalCount: number;
    items: OrganizationUnitUserListDto[];

    constructor(data?: IPagedResultDtoOfOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(OrganizationUnitUserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOrganizationUnitUserListDto {
        let result = new PagedResultDtoOfOrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfOrganizationUnitUserListDto {
    totalCount: number;
    items: OrganizationUnitUserListDto[];
}

export class OrganizationUnitUserListDto implements IOrganizationUnitUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    addedTime: moment.Moment;
    id: number;

    constructor(data?: IOrganizationUnitUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.profilePictureId = data["profilePictureId"];
            this.addedTime = data["addedTime"] ? moment(data["addedTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitUserListDto {
        let result = new OrganizationUnitUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["profilePictureId"] = this.profilePictureId;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IOrganizationUnitUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    addedTime: moment.Moment;
    id: number;
}

export class CreateOrganizationUnitInput implements ICreateOrganizationUnitInput {
    parentId: number;
    displayName: string;

    constructor(data?: ICreateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): CreateOrganizationUnitInput {
        let result = new CreateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface ICreateOrganizationUnitInput {
    parentId: number;
    displayName: string;
}

export class UpdateOrganizationUnitInput implements IUpdateOrganizationUnitInput {
    id: number;
    displayName: string;

    constructor(data?: IUpdateOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
        }
    }

    static fromJS(data: any): UpdateOrganizationUnitInput {
        let result = new UpdateOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data; 
    }
}

export interface IUpdateOrganizationUnitInput {
    id: number;
    displayName: string;
}

export class MoveOrganizationUnitInput implements IMoveOrganizationUnitInput {
    id: number;
    newParentId: number;

    constructor(data?: IMoveOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.newParentId = data["newParentId"];
        }
    }

    static fromJS(data: any): MoveOrganizationUnitInput {
        let result = new MoveOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["newParentId"] = this.newParentId;
        return data; 
    }
}

export interface IMoveOrganizationUnitInput {
    id: number;
    newParentId: number;
}

export class UsersToOrganizationUnitInput implements IUsersToOrganizationUnitInput {
    userIds: number[];
    organizationUnitId: number;

    constructor(data?: IUsersToOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["userIds"] && data["userIds"].constructor === Array) {
                this.userIds = [];
                for (let item of data["userIds"])
                    this.userIds.push(item);
            }
            this.organizationUnitId = data["organizationUnitId"];
        }
    }

    static fromJS(data: any): UsersToOrganizationUnitInput {
        let result = new UsersToOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.userIds && this.userIds.constructor === Array) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        data["organizationUnitId"] = this.organizationUnitId;
        return data; 
    }
}

export interface IUsersToOrganizationUnitInput {
    userIds: number[];
    organizationUnitId: number;
}

export class FindOrganizationUnitUsersInput implements IFindOrganizationUnitUsersInput {
    organizationUnitId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;

    constructor(data?: IFindOrganizationUnitUsersInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
            this.filter = data["filter"];
        }
    }

    static fromJS(data: any): FindOrganizationUnitUsersInput {
        let result = new FindOrganizationUnitUsersInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filter"] = this.filter;
        return data; 
    }
}

export interface IFindOrganizationUnitUsersInput {
    organizationUnitId: number;
    maxResultCount: number;
    skipCount: number;
    filter: string;
}

export class ListResultDtoOfPackingListDto implements IListResultDtoOfPackingListDto {
    items: PackingListDto[];

    constructor(data?: IListResultDtoOfPackingListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(PackingListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfPackingListDto {
        let result = new ListResultDtoOfPackingListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfPackingListDto {
    items: PackingListDto[];
}

export class PackingListDto implements IPackingListDto {
    id: number;
    packingCode: string;
    packingName: string;
    tenantId: number;

    constructor(data?: IPackingListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.packingCode = data["packingCode"];
            this.packingName = data["packingName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): PackingListDto {
        let result = new PackingListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["packingCode"] = this.packingCode;
        data["packingName"] = this.packingName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IPackingListDto {
    id: number;
    packingCode: string;
    packingName: string;
    tenantId: number;
}

export class GetPacking implements IGetPacking {
    pack: CreatePackingInput;

    constructor(data?: IGetPacking) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.pack = data["pack"] ? CreatePackingInput.fromJS(data["pack"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPacking {
        let result = new GetPacking();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pack"] = this.pack ? this.pack.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetPacking {
    pack: CreatePackingInput;
}

export class CreatePackingInput implements ICreatePackingInput {
    id: number;
    packingCode: string;
    packingName: string;
    tenantId: number;

    constructor(data?: ICreatePackingInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.packingCode = data["packingCode"];
            this.packingName = data["packingName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreatePackingInput {
        let result = new CreatePackingInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["packingCode"] = this.packingCode;
        data["packingName"] = this.packingName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreatePackingInput {
    id: number;
    packingCode: string;
    packingName: string;
    tenantId: number;
}

export class PaymentInfoDto implements IPaymentInfoDto {
    edition: EditionSelectDto;
    additionalPrice: number;

    constructor(data?: IPaymentInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionSelectDto.fromJS(data["edition"]) : <any>undefined;
            this.additionalPrice = data["additionalPrice"];
        }
    }

    static fromJS(data: any): PaymentInfoDto {
        let result = new PaymentInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        data["additionalPrice"] = this.additionalPrice;
        return data; 
    }
}

export interface IPaymentInfoDto {
    edition: EditionSelectDto;
    additionalPrice: number;
}

export class EditionSelectDto implements IEditionSelectDto {
    id: number;
    name: string;
    displayName: string;
    expiringEditionId: number;
    monthlyPrice: number;
    annualPrice: number;
    trialDayCount: number;
    waitingDayAfterExpire: number;
    isFree: boolean;
    additionalData: AdditionalData;

    constructor(data?: IEditionSelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.expiringEditionId = data["expiringEditionId"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.trialDayCount = data["trialDayCount"];
            this.waitingDayAfterExpire = data["waitingDayAfterExpire"];
            this.isFree = data["isFree"];
            this.additionalData = data["additionalData"] ? AdditionalData.fromJS(data["additionalData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditionSelectDto {
        let result = new EditionSelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["expiringEditionId"] = this.expiringEditionId;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["trialDayCount"] = this.trialDayCount;
        data["waitingDayAfterExpire"] = this.waitingDayAfterExpire;
        data["isFree"] = this.isFree;
        data["additionalData"] = this.additionalData ? this.additionalData.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEditionSelectDto {
    id: number;
    name: string;
    displayName: string;
    expiringEditionId: number;
    monthlyPrice: number;
    annualPrice: number;
    trialDayCount: number;
    waitingDayAfterExpire: number;
    isFree: boolean;
    additionalData: AdditionalData;
}

export class CreatePaymentDto implements ICreatePaymentDto {
    editionId: number;
    editionPaymentType: CreatePaymentDtoEditionPaymentType;
    paymentPeriodType: CreatePaymentDtoPaymentPeriodType;
    subscriptionPaymentGatewayType: CreatePaymentDtoSubscriptionPaymentGatewayType;

    constructor(data?: ICreatePaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.editionId = data["editionId"];
            this.editionPaymentType = data["editionPaymentType"];
            this.paymentPeriodType = data["paymentPeriodType"];
            this.subscriptionPaymentGatewayType = data["subscriptionPaymentGatewayType"];
        }
    }

    static fromJS(data: any): CreatePaymentDto {
        let result = new CreatePaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editionId"] = this.editionId;
        data["editionPaymentType"] = this.editionPaymentType;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["subscriptionPaymentGatewayType"] = this.subscriptionPaymentGatewayType;
        return data; 
    }
}

export interface ICreatePaymentDto {
    editionId: number;
    editionPaymentType: CreatePaymentDtoEditionPaymentType;
    paymentPeriodType: CreatePaymentDtoPaymentPeriodType;
    subscriptionPaymentGatewayType: CreatePaymentDtoSubscriptionPaymentGatewayType;
}

export class ExecutePaymentDto implements IExecutePaymentDto {
    gateway: ExecutePaymentDtoGateway;
    editionPaymentType: ExecutePaymentDtoEditionPaymentType;
    editionId: number;
    paymentPeriodType: ExecutePaymentDtoPaymentPeriodType;
    additionalData: { [key: string] : string; };

    constructor(data?: IExecutePaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.gateway = data["gateway"];
            this.editionPaymentType = data["editionPaymentType"];
            this.editionId = data["editionId"];
            this.paymentPeriodType = data["paymentPeriodType"];
            if (data["additionalData"]) {
                this.additionalData = {};
                for (let key in data["additionalData"]) {
                    if (data["additionalData"].hasOwnProperty(key))
                        this.additionalData[key] = data["additionalData"][key];
                }
            }
        }
    }

    static fromJS(data: any): ExecutePaymentDto {
        let result = new ExecutePaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gateway"] = this.gateway;
        data["editionPaymentType"] = this.editionPaymentType;
        data["editionId"] = this.editionId;
        data["paymentPeriodType"] = this.paymentPeriodType;
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    data["additionalData"][key] = this.additionalData[key];
            }
        }
        return data; 
    }
}

export interface IExecutePaymentDto {
    gateway: ExecutePaymentDtoGateway;
    editionPaymentType: ExecutePaymentDtoEditionPaymentType;
    editionId: number;
    paymentPeriodType: ExecutePaymentDtoPaymentPeriodType;
    additionalData: { [key: string] : string; };
}

export class PagedResultDtoOfSubscriptionPaymentListDto implements IPagedResultDtoOfSubscriptionPaymentListDto {
    totalCount: number;
    items: SubscriptionPaymentListDto[];

    constructor(data?: IPagedResultDtoOfSubscriptionPaymentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SubscriptionPaymentListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSubscriptionPaymentListDto {
        let result = new PagedResultDtoOfSubscriptionPaymentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfSubscriptionPaymentListDto {
    totalCount: number;
    items: SubscriptionPaymentListDto[];
}

export class SubscriptionPaymentListDto implements ISubscriptionPaymentListDto {
    gateway: string;
    amount: number;
    editionId: number;
    dayCount: number;
    paymentPeriodType: string;
    paymentId: string;
    payerId: string;
    status: string;
    editionDisplayName: string;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;

    constructor(data?: ISubscriptionPaymentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.gateway = data["gateway"];
            this.amount = data["amount"];
            this.editionId = data["editionId"];
            this.dayCount = data["dayCount"];
            this.paymentPeriodType = data["paymentPeriodType"];
            this.paymentId = data["paymentId"];
            this.payerId = data["payerId"];
            this.status = data["status"];
            this.editionDisplayName = data["editionDisplayName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SubscriptionPaymentListDto {
        let result = new SubscriptionPaymentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gateway"] = this.gateway;
        data["amount"] = this.amount;
        data["editionId"] = this.editionId;
        data["dayCount"] = this.dayCount;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["paymentId"] = this.paymentId;
        data["payerId"] = this.payerId;
        data["status"] = this.status;
        data["editionDisplayName"] = this.editionDisplayName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }
}

export interface ISubscriptionPaymentListDto {
    gateway: string;
    amount: number;
    editionId: number;
    dayCount: number;
    paymentPeriodType: string;
    paymentId: string;
    payerId: string;
    status: string;
    editionDisplayName: string;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
    id: number;
}

export class ListResultDtoOfFlatPermissionWithLevelDto implements IListResultDtoOfFlatPermissionWithLevelDto {
    items: FlatPermissionWithLevelDto[];

    constructor(data?: IListResultDtoOfFlatPermissionWithLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(FlatPermissionWithLevelDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfFlatPermissionWithLevelDto {
        let result = new ListResultDtoOfFlatPermissionWithLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfFlatPermissionWithLevelDto {
    items: FlatPermissionWithLevelDto[];
}

export class FlatPermissionWithLevelDto implements IFlatPermissionWithLevelDto {
    level: number;
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    isGrantedByDefault: boolean;

    constructor(data?: IFlatPermissionWithLevelDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.level = data["level"];
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionWithLevelDto {
        let result = new FlatPermissionWithLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data; 
    }
}

export interface IFlatPermissionWithLevelDto {
    level: number;
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    isGrantedByDefault: boolean;
}

export class ListResultDtoOfPriceLevelList implements IListResultDtoOfPriceLevelList {
    items: PriceLevelList[];

    constructor(data?: IListResultDtoOfPriceLevelList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(PriceLevelList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfPriceLevelList {
        let result = new ListResultDtoOfPriceLevelList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfPriceLevelList {
    items: PriceLevelList[];
}

export class PriceLevelList implements IPriceLevelList {
    id: number;
    priceLevelCode: string;
    priceLevelName: string;
    tenantId: number;

    constructor(data?: IPriceLevelList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.priceLevelCode = data["priceLevelCode"];
            this.priceLevelName = data["priceLevelName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): PriceLevelList {
        let result = new PriceLevelList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["priceLevelCode"] = this.priceLevelCode;
        data["priceLevelName"] = this.priceLevelName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IPriceLevelList {
    id: number;
    priceLevelCode: string;
    priceLevelName: string;
    tenantId: number;
}

export class GetPriceLevel implements IGetPriceLevel {
    getPriceLevels: PriceLevelCreate;

    constructor(data?: IGetPriceLevel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.getPriceLevels = data["getPriceLevels"] ? PriceLevelCreate.fromJS(data["getPriceLevels"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPriceLevel {
        let result = new GetPriceLevel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["getPriceLevels"] = this.getPriceLevels ? this.getPriceLevels.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetPriceLevel {
    getPriceLevels: PriceLevelCreate;
}

export class PriceLevelCreate implements IPriceLevelCreate {
    id: number;
    priceLevelCode: string;
    priceLevelName: string;
    tenantId: number;

    constructor(data?: IPriceLevelCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.priceLevelCode = data["priceLevelCode"];
            this.priceLevelName = data["priceLevelName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): PriceLevelCreate {
        let result = new PriceLevelCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["priceLevelCode"] = this.priceLevelCode;
        data["priceLevelName"] = this.priceLevelName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IPriceLevelCreate {
    id: number;
    priceLevelCode: string;
    priceLevelName: string;
    tenantId: number;
}

export class PagedResultDtoOfProductListDto implements IPagedResultDtoOfProductListDto {
    totalCount: number;
    items: ProductListDto[];

    constructor(data?: IPagedResultDtoOfProductListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProductListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfProductListDto {
        let result = new PagedResultDtoOfProductListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfProductListDto {
    totalCount: number;
    items: ProductListDto[];
}

export class ProductListDto implements IProductListDto {
    id: number;
    productCode: string;
    productName: string;
    discontinued: boolean;
    description: string;
    productSubGroupId: number;
    productSubGroupName: string;
    productGroupName: string;
    producGroupId: number;
    path: string;

    constructor(data?: IProductListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.productName = data["productName"];
            this.discontinued = data["discontinued"];
            this.description = data["description"];
            this.productSubGroupId = data["productSubGroupId"];
            this.productSubGroupName = data["productSubGroupName"];
            this.productGroupName = data["productGroupName"];
            this.producGroupId = data["producGroupId"];
            this.path = data["path"];
        }
    }

    static fromJS(data: any): ProductListDto {
        let result = new ProductListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["discontinued"] = this.discontinued;
        data["description"] = this.description;
        data["productSubGroupId"] = this.productSubGroupId;
        data["productSubGroupName"] = this.productSubGroupName;
        data["productGroupName"] = this.productGroupName;
        data["producGroupId"] = this.producGroupId;
        data["path"] = this.path;
        return data; 
    }
}

export interface IProductListDto {
    id: number;
    productCode: string;
    productName: string;
    discontinued: boolean;
    description: string;
    productSubGroupId: number;
    productSubGroupName: string;
    productGroupName: string;
    producGroupId: number;
    path: string;
}

export class GetProduct implements IGetProduct {
    products: ProductListDto;

    constructor(data?: IGetProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.products = data["products"] ? ProductListDto.fromJS(data["products"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetProduct {
        let result = new GetProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["products"] = this.products ? this.products.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetProduct {
    products: ProductListDto;
}

export class CreateProductInput implements ICreateProductInput {
    id: number;
    productCode: string;
    productName: string;
    discontinued: boolean;
    description: string;
    productSubGroupId: number;
    path: string;
    tenantId: number;

    constructor(data?: ICreateProductInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productCode = data["productCode"];
            this.productName = data["productName"];
            this.discontinued = data["discontinued"];
            this.description = data["description"];
            this.productSubGroupId = data["productSubGroupId"];
            this.path = data["path"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateProductInput {
        let result = new CreateProductInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productCode"] = this.productCode;
        data["productName"] = this.productName;
        data["discontinued"] = this.discontinued;
        data["description"] = this.description;
        data["productSubGroupId"] = this.productSubGroupId;
        data["path"] = this.path;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateProductInput {
    id: number;
    productCode: string;
    productName: string;
    discontinued: boolean;
    description: string;
    productSubGroupId: number;
    path: string;
    tenantId: number;
}

export class ListResultDtoOfPriceLevelProductList implements IListResultDtoOfPriceLevelProductList {
    items: PriceLevelProductList[];

    constructor(data?: IListResultDtoOfPriceLevelProductList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(PriceLevelProductList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfPriceLevelProductList {
        let result = new ListResultDtoOfPriceLevelProductList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfPriceLevelProductList {
    items: PriceLevelProductList[];
}

export class PriceLevelProductList implements IPriceLevelProductList {
    id: number;
    productId: number;
    priceLevelId: number;
    priceLevelName: string;
    price: number;
    tenantId: number;

    constructor(data?: IPriceLevelProductList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productId = data["productId"];
            this.priceLevelId = data["priceLevelId"];
            this.priceLevelName = data["priceLevelName"];
            this.price = data["price"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): PriceLevelProductList {
        let result = new PriceLevelProductList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productId"] = this.productId;
        data["priceLevelId"] = this.priceLevelId;
        data["priceLevelName"] = this.priceLevelName;
        data["price"] = this.price;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IPriceLevelProductList {
    id: number;
    productId: number;
    priceLevelId: number;
    priceLevelName: string;
    price: number;
    tenantId: number;
}

export class GetPriceLevelProduct implements IGetPriceLevelProduct {
    priceLevel: PriceLevelInput[];

    constructor(data?: IGetPriceLevelProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["priceLevel"] && data["priceLevel"].constructor === Array) {
                this.priceLevel = [];
                for (let item of data["priceLevel"])
                    this.priceLevel.push(PriceLevelInput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetPriceLevelProduct {
        let result = new GetPriceLevelProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.priceLevel && this.priceLevel.constructor === Array) {
            data["priceLevel"] = [];
            for (let item of this.priceLevel)
                data["priceLevel"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetPriceLevelProduct {
    priceLevel: PriceLevelInput[];
}

export class PriceLevelInput implements IPriceLevelInput {
    id: number;
    name: string;

    constructor(data?: IPriceLevelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): PriceLevelInput {
        let result = new PriceLevelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IPriceLevelInput {
    id: number;
    name: string;
}

export class CreatePriceLevelProductInput implements ICreatePriceLevelProductInput {
    id: number;
    productId: number;
    priceLevelId: number;
    price: number;
    tenantId: number;

    constructor(data?: ICreatePriceLevelProductInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productId = data["productId"];
            this.priceLevelId = data["priceLevelId"];
            this.price = data["price"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreatePriceLevelProductInput {
        let result = new CreatePriceLevelProductInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productId"] = this.productId;
        data["priceLevelId"] = this.priceLevelId;
        data["price"] = this.price;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreatePriceLevelProductInput {
    id: number;
    productId: number;
    priceLevelId: number;
    price: number;
    tenantId: number;
}

export class ListResultDtoOfProductGroupListDto implements IListResultDtoOfProductGroupListDto {
    items: ProductGroupListDto[];

    constructor(data?: IListResultDtoOfProductGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProductGroupListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfProductGroupListDto {
        let result = new ListResultDtoOfProductGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfProductGroupListDto {
    items: ProductGroupListDto[];
}

export class ProductGroupListDto implements IProductGroupListDto {
    id: number;
    productGroupName: string;
    productGroupCode: string;
    tenantId: number;
    path: string;

    constructor(data?: IProductGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productGroupName = data["productGroupName"];
            this.productGroupCode = data["productGroupCode"];
            this.tenantId = data["tenantId"];
            this.path = data["path"];
        }
    }

    static fromJS(data: any): ProductGroupListDto {
        let result = new ProductGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productGroupName"] = this.productGroupName;
        data["productGroupCode"] = this.productGroupCode;
        data["tenantId"] = this.tenantId;
        data["path"] = this.path;
        return data; 
    }
}

export interface IProductGroupListDto {
    id: number;
    productGroupName: string;
    productGroupCode: string;
    tenantId: number;
    path: string;
}

export class GetProductGroup implements IGetProductGroup {
    productGroup: CreateProductGroupInput;

    constructor(data?: IGetProductGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productGroup = data["productGroup"] ? CreateProductGroupInput.fromJS(data["productGroup"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetProductGroup {
        let result = new GetProductGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productGroup"] = this.productGroup ? this.productGroup.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetProductGroup {
    productGroup: CreateProductGroupInput;
}

export class CreateProductGroupInput implements ICreateProductGroupInput {
    id: number;
    productGroupName: string;
    productGroupCode: string;
    tenantId: number;
    path: string;

    constructor(data?: ICreateProductGroupInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productGroupName = data["productGroupName"];
            this.productGroupCode = data["productGroupCode"];
            this.tenantId = data["tenantId"];
            this.path = data["path"];
        }
    }

    static fromJS(data: any): CreateProductGroupInput {
        let result = new CreateProductGroupInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productGroupName"] = this.productGroupName;
        data["productGroupCode"] = this.productGroupCode;
        data["tenantId"] = this.tenantId;
        data["path"] = this.path;
        return data; 
    }
}

export interface ICreateProductGroupInput {
    id: number;
    productGroupName: string;
    productGroupCode: string;
    tenantId: number;
    path: string;
}

export class PagedResultDtoOfProductSubGpListDto implements IPagedResultDtoOfProductSubGpListDto {
    totalCount: number;
    items: ProductSubGpListDto[];

    constructor(data?: IPagedResultDtoOfProductSubGpListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ProductSubGpListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfProductSubGpListDto {
        let result = new PagedResultDtoOfProductSubGpListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfProductSubGpListDto {
    totalCount: number;
    items: ProductSubGpListDto[];
}

export class ProductSubGpListDto implements IProductSubGpListDto {
    id: number;
    productSubGroupName: string;
    productSubGroupCode: string;
    productGroupId: number;
    productGroupName: string;
    tenantId: number;
    path: string;

    constructor(data?: IProductSubGpListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productSubGroupName = data["productSubGroupName"];
            this.productSubGroupCode = data["productSubGroupCode"];
            this.productGroupId = data["productGroupId"];
            this.productGroupName = data["productGroupName"];
            this.tenantId = data["tenantId"];
            this.path = data["path"];
        }
    }

    static fromJS(data: any): ProductSubGpListDto {
        let result = new ProductSubGpListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productSubGroupName"] = this.productSubGroupName;
        data["productSubGroupCode"] = this.productSubGroupCode;
        data["productGroupId"] = this.productGroupId;
        data["productGroupName"] = this.productGroupName;
        data["tenantId"] = this.tenantId;
        data["path"] = this.path;
        return data; 
    }
}

export interface IProductSubGpListDto {
    id: number;
    productSubGroupName: string;
    productSubGroupCode: string;
    productGroupId: number;
    productGroupName: string;
    tenantId: number;
    path: string;
}

export class GetProductSubGp implements IGetProductSubGp {
    productsubGroup: CreateProductSubGpInput;

    constructor(data?: IGetProductSubGp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productsubGroup = data["productsubGroup"] ? CreateProductSubGpInput.fromJS(data["productsubGroup"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetProductSubGp {
        let result = new GetProductSubGp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productsubGroup"] = this.productsubGroup ? this.productsubGroup.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetProductSubGp {
    productsubGroup: CreateProductSubGpInput;
}

export class CreateProductSubGpInput implements ICreateProductSubGpInput {
    id: number;
    productSubGroupName: string;
    productSubGroupCode: string;
    productGroupId: number;
    tenantId: number;
    path: string;

    constructor(data?: ICreateProductSubGpInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productSubGroupName = data["productSubGroupName"];
            this.productSubGroupCode = data["productSubGroupCode"];
            this.productGroupId = data["productGroupId"];
            this.tenantId = data["tenantId"];
            this.path = data["path"];
        }
    }

    static fromJS(data: any): CreateProductSubGpInput {
        let result = new CreateProductSubGpInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productSubGroupName"] = this.productSubGroupName;
        data["productSubGroupCode"] = this.productSubGroupCode;
        data["productGroupId"] = this.productGroupId;
        data["tenantId"] = this.tenantId;
        data["path"] = this.path;
        return data; 
    }
}

export interface ICreateProductSubGpInput {
    id: number;
    productSubGroupName: string;
    productSubGroupCode: string;
    productGroupId: number;
    tenantId: number;
    path: string;
}

export class CurrentUserProfileEditDto implements ICurrentUserProfileEditDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    isPhoneNumberConfirmed: boolean;
    timezone: string;
    qrCodeSetupImageUrl: string;
    isGoogleAuthenticatorEnabled: boolean;
    rootId: number;
    rootName: string;

    constructor(data?: ICurrentUserProfileEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.isPhoneNumberConfirmed = data["isPhoneNumberConfirmed"];
            this.timezone = data["timezone"];
            this.qrCodeSetupImageUrl = data["qrCodeSetupImageUrl"];
            this.isGoogleAuthenticatorEnabled = data["isGoogleAuthenticatorEnabled"];
            this.rootId = data["rootId"];
            this.rootName = data["rootName"];
        }
    }

    static fromJS(data: any): CurrentUserProfileEditDto {
        let result = new CurrentUserProfileEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["isPhoneNumberConfirmed"] = this.isPhoneNumberConfirmed;
        data["timezone"] = this.timezone;
        data["qrCodeSetupImageUrl"] = this.qrCodeSetupImageUrl;
        data["isGoogleAuthenticatorEnabled"] = this.isGoogleAuthenticatorEnabled;
        data["rootId"] = this.rootId;
        data["rootName"] = this.rootName;
        return data; 
    }
}

export interface ICurrentUserProfileEditDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    isPhoneNumberConfirmed: boolean;
    timezone: string;
    qrCodeSetupImageUrl: string;
    isGoogleAuthenticatorEnabled: boolean;
    rootId: number;
    rootName: string;
}

export class UpdateGoogleAuthenticatorKeyOutput implements IUpdateGoogleAuthenticatorKeyOutput {
    qrCodeSetupImageUrl: string;

    constructor(data?: IUpdateGoogleAuthenticatorKeyOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.qrCodeSetupImageUrl = data["qrCodeSetupImageUrl"];
        }
    }

    static fromJS(data: any): UpdateGoogleAuthenticatorKeyOutput {
        let result = new UpdateGoogleAuthenticatorKeyOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["qrCodeSetupImageUrl"] = this.qrCodeSetupImageUrl;
        return data; 
    }
}

export interface IUpdateGoogleAuthenticatorKeyOutput {
    qrCodeSetupImageUrl: string;
}

export class VerifySmsCodeInputDto implements IVerifySmsCodeInputDto {
    code: string;

    constructor(data?: IVerifySmsCodeInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
        }
    }

    static fromJS(data: any): VerifySmsCodeInputDto {
        let result = new VerifySmsCodeInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        return data; 
    }
}

export interface IVerifySmsCodeInputDto {
    code: string;
}

export class ChangePasswordInput implements IChangePasswordInput {
    currentPassword: string;
    newPassword: string;

    constructor(data?: IChangePasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.currentPassword = data["currentPassword"];
            this.newPassword = data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordInput {
        let result = new ChangePasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data; 
    }
}

export interface IChangePasswordInput {
    currentPassword: string;
    newPassword: string;
}

export class UpdateProfilePictureInput implements IUpdateProfilePictureInput {
    fileName: string;
    x: number;
    y: number;
    width: number;
    height: number;

    constructor(data?: IUpdateProfilePictureInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.x = data["x"];
            this.y = data["y"];
            this.width = data["width"];
            this.height = data["height"];
        }
    }

    static fromJS(data: any): UpdateProfilePictureInput {
        let result = new UpdateProfilePictureInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["x"] = this.x;
        data["y"] = this.y;
        data["width"] = this.width;
        data["height"] = this.height;
        return data; 
    }
}

export interface IUpdateProfilePictureInput {
    fileName: string;
    x: number;
    y: number;
    width: number;
    height: number;
}

export class GetPasswordComplexitySettingOutput implements IGetPasswordComplexitySettingOutput {
    setting: PasswordComplexitySetting;

    constructor(data?: IGetPasswordComplexitySettingOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.setting = data["setting"] ? PasswordComplexitySetting.fromJS(data["setting"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPasswordComplexitySettingOutput {
        let result = new GetPasswordComplexitySettingOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["setting"] = this.setting ? this.setting.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetPasswordComplexitySettingOutput {
    setting: PasswordComplexitySetting;
}

export class GetProfilePictureOutput implements IGetProfilePictureOutput {
    profilePicture: string;

    constructor(data?: IGetProfilePictureOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profilePicture = data["profilePicture"];
        }
    }

    static fromJS(data: any): GetProfilePictureOutput {
        let result = new GetProfilePictureOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePicture"] = this.profilePicture;
        return data; 
    }
}

export interface IGetProfilePictureOutput {
    profilePicture: string;
}

export class ChangeUserLanguageDto implements IChangeUserLanguageDto {
    languageName: string;

    constructor(data?: IChangeUserLanguageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.languageName = data["languageName"];
        }
    }

    static fromJS(data: any): ChangeUserLanguageDto {
        let result = new ChangeUserLanguageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        return data; 
    }
}

export interface IChangeUserLanguageDto {
    languageName: string;
}

export class ListResultDtoOfQPaymentListDto implements IListResultDtoOfQPaymentListDto {
    items: QPaymentListDto[];

    constructor(data?: IListResultDtoOfQPaymentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QPaymentListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfQPaymentListDto {
        let result = new ListResultDtoOfQPaymentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfQPaymentListDto {
    items: QPaymentListDto[];
}

export class QPaymentListDto implements IQPaymentListDto {
    id: number;
    paymentCode: string;
    paymentName: string;
    tenantId: number;

    constructor(data?: IQPaymentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.paymentCode = data["paymentCode"];
            this.paymentName = data["paymentName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): QPaymentListDto {
        let result = new QPaymentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["paymentCode"] = this.paymentCode;
        data["paymentName"] = this.paymentName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IQPaymentListDto {
    id: number;
    paymentCode: string;
    paymentName: string;
    tenantId: number;
}

export class GetQPayments implements IGetQPayments {
    getPayments: QPaymentInputDto;

    constructor(data?: IGetQPayments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.getPayments = data["getPayments"] ? QPaymentInputDto.fromJS(data["getPayments"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetQPayments {
        let result = new GetQPayments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["getPayments"] = this.getPayments ? this.getPayments.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetQPayments {
    getPayments: QPaymentInputDto;
}

export class QPaymentInputDto implements IQPaymentInputDto {
    id: number;
    paymentCode: string;
    paymentName: string;
    tenantId: number;

    constructor(data?: IQPaymentInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.paymentCode = data["paymentCode"];
            this.paymentName = data["paymentName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): QPaymentInputDto {
        let result = new QPaymentInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["paymentCode"] = this.paymentCode;
        data["paymentName"] = this.paymentName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IQPaymentInputDto {
    id: number;
    paymentCode: string;
    paymentName: string;
    tenantId: number;
}

export class GetQuotation implements IGetQuotation {
    quotations: QuotationList;

    constructor(data?: IGetQuotation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.quotations = data["quotations"] ? QuotationList.fromJS(data["quotations"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetQuotation {
        let result = new GetQuotation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotations"] = this.quotations ? this.quotations.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetQuotation {
    quotations: QuotationList;
}

export class CreateQuotationInput implements ICreateQuotationInput {
    id: number;
    subjectName: string;
    proposalNumber: string;
    projectRef: string;
    date: moment.Moment;
    closureDate: moment.Moment;
    revised: boolean;
    archived: boolean;
    total: number;
    salesOrderNumber: string;
    lostDate: moment.Moment;
    overallDiscount: number;
    customerPONumber: string;
    exchangeRate: number;
    enquiryId: number;
    quotationTitleId: number;
    companyId: number;
    statusId: number;
    freightId: number;
    paymentId: number;
    packingId: number;
    warrantyId: number;
    validityId: number;
    deliveryId: number;
    currencyId: number;
    salesmanId: number;
    reasonId: number;
    tenantId: number;
    contactId: number;
    mileStoneId: number;
    submitted: boolean;
    submittedDate: moment.Moment;
    won: boolean;
    wonDate: moment.Moment;
    lost: boolean;
    competitorId: number;
    overallDiscountinUSD: number;
    vat: boolean;
    vatPercentage: number;
    vatAmount: number;

    constructor(data?: ICreateQuotationInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.subjectName = data["subjectName"];
            this.proposalNumber = data["proposalNumber"];
            this.projectRef = data["projectRef"];
            this.date = data["date"] ? moment(data["date"].toString()) : <any>undefined;
            this.closureDate = data["closureDate"] ? moment(data["closureDate"].toString()) : <any>undefined;
            this.revised = data["revised"];
            this.archived = data["archived"];
            this.total = data["total"];
            this.salesOrderNumber = data["salesOrderNumber"];
            this.lostDate = data["lostDate"] ? moment(data["lostDate"].toString()) : <any>undefined;
            this.overallDiscount = data["overallDiscount"];
            this.customerPONumber = data["customerPONumber"];
            this.exchangeRate = data["exchangeRate"];
            this.enquiryId = data["enquiryId"];
            this.quotationTitleId = data["quotationTitleId"];
            this.companyId = data["companyId"];
            this.statusId = data["statusId"];
            this.freightId = data["freightId"];
            this.paymentId = data["paymentId"];
            this.packingId = data["packingId"];
            this.warrantyId = data["warrantyId"];
            this.validityId = data["validityId"];
            this.deliveryId = data["deliveryId"];
            this.currencyId = data["currencyId"];
            this.salesmanId = data["salesmanId"];
            this.reasonId = data["reasonId"];
            this.tenantId = data["tenantId"];
            this.contactId = data["contactId"];
            this.mileStoneId = data["mileStoneId"];
            this.submitted = data["submitted"];
            this.submittedDate = data["submittedDate"] ? moment(data["submittedDate"].toString()) : <any>undefined;
            this.won = data["won"];
            this.wonDate = data["wonDate"] ? moment(data["wonDate"].toString()) : <any>undefined;
            this.lost = data["lost"];
            this.competitorId = data["competitorId"];
            this.overallDiscountinUSD = data["overallDiscountinUSD"];
            this.vat = data["vat"];
            this.vatPercentage = data["vatPercentage"];
            this.vatAmount = data["vatAmount"];
        }
    }

    static fromJS(data: any): CreateQuotationInput {
        let result = new CreateQuotationInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["subjectName"] = this.subjectName;
        data["proposalNumber"] = this.proposalNumber;
        data["projectRef"] = this.projectRef;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["closureDate"] = this.closureDate ? this.closureDate.toISOString() : <any>undefined;
        data["revised"] = this.revised;
        data["archived"] = this.archived;
        data["total"] = this.total;
        data["salesOrderNumber"] = this.salesOrderNumber;
        data["lostDate"] = this.lostDate ? this.lostDate.toISOString() : <any>undefined;
        data["overallDiscount"] = this.overallDiscount;
        data["customerPONumber"] = this.customerPONumber;
        data["exchangeRate"] = this.exchangeRate;
        data["enquiryId"] = this.enquiryId;
        data["quotationTitleId"] = this.quotationTitleId;
        data["companyId"] = this.companyId;
        data["statusId"] = this.statusId;
        data["freightId"] = this.freightId;
        data["paymentId"] = this.paymentId;
        data["packingId"] = this.packingId;
        data["warrantyId"] = this.warrantyId;
        data["validityId"] = this.validityId;
        data["deliveryId"] = this.deliveryId;
        data["currencyId"] = this.currencyId;
        data["salesmanId"] = this.salesmanId;
        data["reasonId"] = this.reasonId;
        data["tenantId"] = this.tenantId;
        data["contactId"] = this.contactId;
        data["mileStoneId"] = this.mileStoneId;
        data["submitted"] = this.submitted;
        data["submittedDate"] = this.submittedDate ? this.submittedDate.toISOString() : <any>undefined;
        data["won"] = this.won;
        data["wonDate"] = this.wonDate ? this.wonDate.toISOString() : <any>undefined;
        data["lost"] = this.lost;
        data["competitorId"] = this.competitorId;
        data["overallDiscountinUSD"] = this.overallDiscountinUSD;
        data["vat"] = this.vat;
        data["vatPercentage"] = this.vatPercentage;
        data["vatAmount"] = this.vatAmount;
        return data; 
    }
}

export interface ICreateQuotationInput {
    id: number;
    subjectName: string;
    proposalNumber: string;
    projectRef: string;
    date: moment.Moment;
    closureDate: moment.Moment;
    revised: boolean;
    archived: boolean;
    total: number;
    salesOrderNumber: string;
    lostDate: moment.Moment;
    overallDiscount: number;
    customerPONumber: string;
    exchangeRate: number;
    enquiryId: number;
    quotationTitleId: number;
    companyId: number;
    statusId: number;
    freightId: number;
    paymentId: number;
    packingId: number;
    warrantyId: number;
    validityId: number;
    deliveryId: number;
    currencyId: number;
    salesmanId: number;
    reasonId: number;
    tenantId: number;
    contactId: number;
    mileStoneId: number;
    submitted: boolean;
    submittedDate: moment.Moment;
    won: boolean;
    wonDate: moment.Moment;
    lost: boolean;
    competitorId: number;
    overallDiscountinUSD: number;
    vat: boolean;
    vatPercentage: number;
    vatAmount: number;
}

export class UpdateQuotationTotal implements IUpdateQuotationTotal {
    quotationId: number;

    constructor(data?: IUpdateQuotationTotal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.quotationId = data["quotationId"];
        }
    }

    static fromJS(data: any): UpdateQuotationTotal {
        let result = new UpdateQuotationTotal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotationId"] = this.quotationId;
        return data; 
    }
}

export interface IUpdateQuotationTotal {
    quotationId: number;
}

export class ListResultDtoOfQuotationProductList implements IListResultDtoOfQuotationProductList {
    items: QuotationProductList[];

    constructor(data?: IListResultDtoOfQuotationProductList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QuotationProductList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfQuotationProductList {
        let result = new ListResultDtoOfQuotationProductList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfQuotationProductList {
    items: QuotationProductList[];
}

export class QuotationProductList implements IQuotationProductList {
    id: number;
    quotationId: number;
    quotationName: string;
    productId: number;
    productName: string;
    priceLevelProductId: number;
    priceLevelProductName: string;
    priceUSD: number;
    estimatedPriceUSD: number;
    quantity: number;
    price: number;
    optional: boolean;
    discount: boolean;
    estimatedPrice: number;
    tenantId: number;

    constructor(data?: IQuotationProductList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.quotationId = data["quotationId"];
            this.quotationName = data["quotationName"];
            this.productId = data["productId"];
            this.productName = data["productName"];
            this.priceLevelProductId = data["priceLevelProductId"];
            this.priceLevelProductName = data["priceLevelProductName"];
            this.priceUSD = data["priceUSD"];
            this.estimatedPriceUSD = data["estimatedPriceUSD"];
            this.quantity = data["quantity"];
            this.price = data["price"];
            this.optional = data["optional"];
            this.discount = data["discount"];
            this.estimatedPrice = data["estimatedPrice"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): QuotationProductList {
        let result = new QuotationProductList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["quotationId"] = this.quotationId;
        data["quotationName"] = this.quotationName;
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["priceLevelProductId"] = this.priceLevelProductId;
        data["priceLevelProductName"] = this.priceLevelProductName;
        data["priceUSD"] = this.priceUSD;
        data["estimatedPriceUSD"] = this.estimatedPriceUSD;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        data["optional"] = this.optional;
        data["discount"] = this.discount;
        data["estimatedPrice"] = this.estimatedPrice;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IQuotationProductList {
    id: number;
    quotationId: number;
    quotationName: string;
    productId: number;
    productName: string;
    priceLevelProductId: number;
    priceLevelProductName: string;
    priceUSD: number;
    estimatedPriceUSD: number;
    quantity: number;
    price: number;
    optional: boolean;
    discount: boolean;
    estimatedPrice: number;
    tenantId: number;
}

export class GetQuotationProduct implements IGetQuotationProduct {
    quotationProducts: QuotationProductList;

    constructor(data?: IGetQuotationProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.quotationProducts = data["quotationProducts"] ? QuotationProductList.fromJS(data["quotationProducts"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetQuotationProduct {
        let result = new GetQuotationProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotationProducts"] = this.quotationProducts ? this.quotationProducts.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetQuotationProduct {
    quotationProducts: QuotationProductList;
}

export class CreateQuotationProductInput implements ICreateQuotationProductInput {
    id: number;
    quotationId: number;
    productId: number;
    quantity: number;
    price: number;
    optimizer: boolean;
    discount: boolean;
    estimatedPrice: number;
    tenantId: number;
    priceLevelProductId: number;
    priceUSD: number;
    estimatedPriceUSD: number;

    constructor(data?: ICreateQuotationProductInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.quotationId = data["quotationId"];
            this.productId = data["productId"];
            this.quantity = data["quantity"];
            this.price = data["price"];
            this.optimizer = data["optimizer"];
            this.discount = data["discount"];
            this.estimatedPrice = data["estimatedPrice"];
            this.tenantId = data["tenantId"];
            this.priceLevelProductId = data["priceLevelProductId"];
            this.priceUSD = data["priceUSD"];
            this.estimatedPriceUSD = data["estimatedPriceUSD"];
        }
    }

    static fromJS(data: any): CreateQuotationProductInput {
        let result = new CreateQuotationProductInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["quotationId"] = this.quotationId;
        data["productId"] = this.productId;
        data["quantity"] = this.quantity;
        data["price"] = this.price;
        data["optimizer"] = this.optimizer;
        data["discount"] = this.discount;
        data["estimatedPrice"] = this.estimatedPrice;
        data["tenantId"] = this.tenantId;
        data["priceLevelProductId"] = this.priceLevelProductId;
        data["priceUSD"] = this.priceUSD;
        data["estimatedPriceUSD"] = this.estimatedPriceUSD;
        return data; 
    }
}

export interface ICreateQuotationProductInput {
    id: number;
    quotationId: number;
    productId: number;
    quantity: number;
    price: number;
    optimizer: boolean;
    discount: boolean;
    estimatedPrice: number;
    tenantId: number;
    priceLevelProductId: number;
    priceUSD: number;
    estimatedPriceUSD: number;
}

export class ListResultDtoOfQuotationServiceList implements IListResultDtoOfQuotationServiceList {
    items: QuotationServiceList[];

    constructor(data?: IListResultDtoOfQuotationServiceList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QuotationServiceList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfQuotationServiceList {
        let result = new ListResultDtoOfQuotationServiceList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfQuotationServiceList {
    items: QuotationServiceList[];
}

export class QuotationServiceList implements IQuotationServiceList {
    id: number;
    quotationId: number;
    quotationName: string;
    serviceId: number;
    serviceCode: string;
    serviceName: string;
    price: number;
    tenantId: number;
    covertPrice: number;

    constructor(data?: IQuotationServiceList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.quotationId = data["quotationId"];
            this.quotationName = data["quotationName"];
            this.serviceId = data["serviceId"];
            this.serviceCode = data["serviceCode"];
            this.serviceName = data["serviceName"];
            this.price = data["price"];
            this.tenantId = data["tenantId"];
            this.covertPrice = data["covertPrice"];
        }
    }

    static fromJS(data: any): QuotationServiceList {
        let result = new QuotationServiceList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["quotationId"] = this.quotationId;
        data["quotationName"] = this.quotationName;
        data["serviceId"] = this.serviceId;
        data["serviceCode"] = this.serviceCode;
        data["serviceName"] = this.serviceName;
        data["price"] = this.price;
        data["tenantId"] = this.tenantId;
        data["covertPrice"] = this.covertPrice;
        return data; 
    }
}

export interface IQuotationServiceList {
    id: number;
    quotationId: number;
    quotationName: string;
    serviceId: number;
    serviceCode: string;
    serviceName: string;
    price: number;
    tenantId: number;
    covertPrice: number;
}

export class GetQuotationService implements IGetQuotationService {
    quotationServices: QuotationServiceList;

    constructor(data?: IGetQuotationService) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.quotationServices = data["quotationServices"] ? QuotationServiceList.fromJS(data["quotationServices"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetQuotationService {
        let result = new GetQuotationService();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotationServices"] = this.quotationServices ? this.quotationServices.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetQuotationService {
    quotationServices: QuotationServiceList;
}

export class CreateQuotationServiceInput implements ICreateQuotationServiceInput {
    id: number;
    quotationId: number;
    serviceId: number;
    price: number;
    tenantId: number;
    covertPrice: number;

    constructor(data?: ICreateQuotationServiceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.quotationId = data["quotationId"];
            this.serviceId = data["serviceId"];
            this.price = data["price"];
            this.tenantId = data["tenantId"];
            this.covertPrice = data["covertPrice"];
        }
    }

    static fromJS(data: any): CreateQuotationServiceInput {
        let result = new CreateQuotationServiceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["quotationId"] = this.quotationId;
        data["serviceId"] = this.serviceId;
        data["price"] = this.price;
        data["tenantId"] = this.tenantId;
        data["covertPrice"] = this.covertPrice;
        return data; 
    }
}

export interface ICreateQuotationServiceInput {
    id: number;
    quotationId: number;
    serviceId: number;
    price: number;
    tenantId: number;
    covertPrice: number;
}

export class GetQuotationPreview implements IGetQuotationPreview {
    preview: GetPreview;

    constructor(data?: IGetQuotationPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.preview = data["preview"] ? GetPreview.fromJS(data["preview"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetQuotationPreview {
        let result = new GetQuotationPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["preview"] = this.preview ? this.preview.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetQuotationPreview {
    preview: GetPreview;
}

export class GetPreview implements IGetPreview {
    quotationId: number;
    companyName: string;
    contactName: string;
    currencyName: string;
    currencyCode: string;
    creationTime: moment.Moment;
    total: number;

    constructor(data?: IGetPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.quotationId = data["quotationId"];
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.currencyName = data["currencyName"];
            this.currencyCode = data["currencyCode"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.total = data["total"];
        }
    }

    static fromJS(data: any): GetPreview {
        let result = new GetPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotationId"] = this.quotationId;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["currencyName"] = this.currencyName;
        data["currencyCode"] = this.currencyCode;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["total"] = this.total;
        return data; 
    }
}

export interface IGetPreview {
    quotationId: number;
    companyName: string;
    contactName: string;
    currencyName: string;
    currencyCode: string;
    creationTime: moment.Moment;
    total: number;
}

export class ListResultDtoOfPaymentScheduleLists implements IListResultDtoOfPaymentScheduleLists {
    items: PaymentScheduleLists[];

    constructor(data?: IListResultDtoOfPaymentScheduleLists) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(PaymentScheduleLists.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfPaymentScheduleLists {
        let result = new ListResultDtoOfPaymentScheduleLists();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfPaymentScheduleLists {
    items: PaymentScheduleLists[];
}

export class PaymentScheduleLists implements IPaymentScheduleLists {
    id: number;
    tenantId: number;
    quotationId: number;
    scheduledDate: moment.Moment;
    total: number;
    userId: number;
    userName: string;

    constructor(data?: IPaymentScheduleLists) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.tenantId = data["tenantId"];
            this.quotationId = data["quotationId"];
            this.scheduledDate = data["scheduledDate"] ? moment(data["scheduledDate"].toString()) : <any>undefined;
            this.total = data["total"];
            this.userId = data["userId"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): PaymentScheduleLists {
        let result = new PaymentScheduleLists();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["quotationId"] = this.quotationId;
        data["scheduledDate"] = this.scheduledDate ? this.scheduledDate.toISOString() : <any>undefined;
        data["total"] = this.total;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IPaymentScheduleLists {
    id: number;
    tenantId: number;
    quotationId: number;
    scheduledDate: moment.Moment;
    total: number;
    userId: number;
    userName: string;
}

export class CreatePaymentScheduleInput implements ICreatePaymentScheduleInput {
    id: number;
    tenantId: number;
    quotationId: number;
    scheduledDate: moment.Moment;
    total: number;

    constructor(data?: ICreatePaymentScheduleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.tenantId = data["tenantId"];
            this.quotationId = data["quotationId"];
            this.scheduledDate = data["scheduledDate"] ? moment(data["scheduledDate"].toString()) : <any>undefined;
            this.total = data["total"];
        }
    }

    static fromJS(data: any): CreatePaymentScheduleInput {
        let result = new CreatePaymentScheduleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["quotationId"] = this.quotationId;
        data["scheduledDate"] = this.scheduledDate ? this.scheduledDate.toISOString() : <any>undefined;
        data["total"] = this.total;
        return data; 
    }
}

export interface ICreatePaymentScheduleInput {
    id: number;
    tenantId: number;
    quotationId: number;
    scheduledDate: moment.Moment;
    total: number;
}

export class ListResultDtoOfPaymentCollectionLists implements IListResultDtoOfPaymentCollectionLists {
    items: PaymentCollectionLists[];

    constructor(data?: IListResultDtoOfPaymentCollectionLists) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(PaymentCollectionLists.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfPaymentCollectionLists {
        let result = new ListResultDtoOfPaymentCollectionLists();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfPaymentCollectionLists {
    items: PaymentCollectionLists[];
}

export class PaymentCollectionLists implements IPaymentCollectionLists {
    id: number;
    tenantId: number;
    quotationId: number;
    salesInvoiceNUmber: string;
    amount: number;
    dueAmount: number;
    chequeNo: string;
    voucherNo: string;
    chequeDate: moment.Moment;
    bankDate: moment.Moment;
    remarks: string;
    received: boolean;
    currencyId: number;
    currencyName: string;
    paymentId: number;
    paymentName: string;

    constructor(data?: IPaymentCollectionLists) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.tenantId = data["tenantId"];
            this.quotationId = data["quotationId"];
            this.salesInvoiceNUmber = data["salesInvoiceNUmber"];
            this.amount = data["amount"];
            this.dueAmount = data["dueAmount"];
            this.chequeNo = data["chequeNo"];
            this.voucherNo = data["voucherNo"];
            this.chequeDate = data["chequeDate"] ? moment(data["chequeDate"].toString()) : <any>undefined;
            this.bankDate = data["bankDate"] ? moment(data["bankDate"].toString()) : <any>undefined;
            this.remarks = data["remarks"];
            this.received = data["received"];
            this.currencyId = data["currencyId"];
            this.currencyName = data["currencyName"];
            this.paymentId = data["paymentId"];
            this.paymentName = data["paymentName"];
        }
    }

    static fromJS(data: any): PaymentCollectionLists {
        let result = new PaymentCollectionLists();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["quotationId"] = this.quotationId;
        data["salesInvoiceNUmber"] = this.salesInvoiceNUmber;
        data["amount"] = this.amount;
        data["dueAmount"] = this.dueAmount;
        data["chequeNo"] = this.chequeNo;
        data["voucherNo"] = this.voucherNo;
        data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : <any>undefined;
        data["bankDate"] = this.bankDate ? this.bankDate.toISOString() : <any>undefined;
        data["remarks"] = this.remarks;
        data["received"] = this.received;
        data["currencyId"] = this.currencyId;
        data["currencyName"] = this.currencyName;
        data["paymentId"] = this.paymentId;
        data["paymentName"] = this.paymentName;
        return data; 
    }
}

export interface IPaymentCollectionLists {
    id: number;
    tenantId: number;
    quotationId: number;
    salesInvoiceNUmber: string;
    amount: number;
    dueAmount: number;
    chequeNo: string;
    voucherNo: string;
    chequeDate: moment.Moment;
    bankDate: moment.Moment;
    remarks: string;
    received: boolean;
    currencyId: number;
    currencyName: string;
    paymentId: number;
    paymentName: string;
}

export class CreatePaymentCollectionInput implements ICreatePaymentCollectionInput {
    id: number;
    tenantId: number;
    quotationId: number;
    salesInvoiceNUmber: string;
    amount: number;
    dueAmount: number;
    chequeNo: string;
    voucherNo: string;
    chequeDate: moment.Moment;
    bankDate: moment.Moment;
    remarks: string;
    received: boolean;
    currencyId: number;
    paymentId: number;

    constructor(data?: ICreatePaymentCollectionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.tenantId = data["tenantId"];
            this.quotationId = data["quotationId"];
            this.salesInvoiceNUmber = data["salesInvoiceNUmber"];
            this.amount = data["amount"];
            this.dueAmount = data["dueAmount"];
            this.chequeNo = data["chequeNo"];
            this.voucherNo = data["voucherNo"];
            this.chequeDate = data["chequeDate"] ? moment(data["chequeDate"].toString()) : <any>undefined;
            this.bankDate = data["bankDate"] ? moment(data["bankDate"].toString()) : <any>undefined;
            this.remarks = data["remarks"];
            this.received = data["received"];
            this.currencyId = data["currencyId"];
            this.paymentId = data["paymentId"];
        }
    }

    static fromJS(data: any): CreatePaymentCollectionInput {
        let result = new CreatePaymentCollectionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["quotationId"] = this.quotationId;
        data["salesInvoiceNUmber"] = this.salesInvoiceNUmber;
        data["amount"] = this.amount;
        data["dueAmount"] = this.dueAmount;
        data["chequeNo"] = this.chequeNo;
        data["voucherNo"] = this.voucherNo;
        data["chequeDate"] = this.chequeDate ? this.chequeDate.toISOString() : <any>undefined;
        data["bankDate"] = this.bankDate ? this.bankDate.toISOString() : <any>undefined;
        data["remarks"] = this.remarks;
        data["received"] = this.received;
        data["currencyId"] = this.currencyId;
        data["paymentId"] = this.paymentId;
        return data; 
    }
}

export interface ICreatePaymentCollectionInput {
    id: number;
    tenantId: number;
    quotationId: number;
    salesInvoiceNUmber: string;
    amount: number;
    dueAmount: number;
    chequeNo: string;
    voucherNo: string;
    chequeDate: moment.Moment;
    bankDate: moment.Moment;
    remarks: string;
    received: boolean;
    currencyId: number;
    paymentId: number;
}

export class EntityDto implements IEntityDto {
    id: number;

    constructor(data?: IEntityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDto {
        let result = new EntityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDto {
    id: number;
}

export class ListResultDtoOfQuotationStatusList implements IListResultDtoOfQuotationStatusList {
    items: QuotationStatusList[];

    constructor(data?: IListResultDtoOfQuotationStatusList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QuotationStatusList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfQuotationStatusList {
        let result = new ListResultDtoOfQuotationStatusList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfQuotationStatusList {
    items: QuotationStatusList[];
}

export class QuotationStatusList implements IQuotationStatusList {
    id: number;
    quotationStatusCode: string;
    quotationStatusName: string;
    tenantId: number;
    mileStoneId: number;
    mileStoneName: number;
    new: boolean;
    submitted: boolean;
    revised: boolean;
    won: boolean;
    lost: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IQuotationStatusList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.quotationStatusCode = data["quotationStatusCode"];
            this.quotationStatusName = data["quotationStatusName"];
            this.tenantId = data["tenantId"];
            this.mileStoneId = data["mileStoneId"];
            this.mileStoneName = data["mileStoneName"];
            this.new = data["new"];
            this.submitted = data["submitted"];
            this.revised = data["revised"];
            this.won = data["won"];
            this.lost = data["lost"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): QuotationStatusList {
        let result = new QuotationStatusList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["quotationStatusCode"] = this.quotationStatusCode;
        data["quotationStatusName"] = this.quotationStatusName;
        data["tenantId"] = this.tenantId;
        data["mileStoneId"] = this.mileStoneId;
        data["mileStoneName"] = this.mileStoneName;
        data["new"] = this.new;
        data["submitted"] = this.submitted;
        data["revised"] = this.revised;
        data["won"] = this.won;
        data["lost"] = this.lost;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IQuotationStatusList {
    id: number;
    quotationStatusCode: string;
    quotationStatusName: string;
    tenantId: number;
    mileStoneId: number;
    mileStoneName: number;
    new: boolean;
    submitted: boolean;
    revised: boolean;
    won: boolean;
    lost: boolean;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetQuotationStatus implements IGetQuotationStatus {
    quotationStatus: CreateQuotationStatusInput;
    milestone: MilestoneData;

    constructor(data?: IGetQuotationStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.quotationStatus = data["quotationStatus"] ? CreateQuotationStatusInput.fromJS(data["quotationStatus"]) : <any>undefined;
            this.milestone = data["milestone"] ? MilestoneData.fromJS(data["milestone"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetQuotationStatus {
        let result = new GetQuotationStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotationStatus"] = this.quotationStatus ? this.quotationStatus.toJSON() : <any>undefined;
        data["milestone"] = this.milestone ? this.milestone.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetQuotationStatus {
    quotationStatus: CreateQuotationStatusInput;
    milestone: MilestoneData;
}

export class CreateQuotationStatusInput implements ICreateQuotationStatusInput {
    id: number;
    quotationStatusCode: string;
    quotationStatusName: string;
    tenantId: number;
    mileStoneId: number;
    new: boolean;
    submitted: boolean;
    revised: boolean;
    won: boolean;
    lost: boolean;

    constructor(data?: ICreateQuotationStatusInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.quotationStatusCode = data["quotationStatusCode"];
            this.quotationStatusName = data["quotationStatusName"];
            this.tenantId = data["tenantId"];
            this.mileStoneId = data["mileStoneId"];
            this.new = data["new"];
            this.submitted = data["submitted"];
            this.revised = data["revised"];
            this.won = data["won"];
            this.lost = data["lost"];
        }
    }

    static fromJS(data: any): CreateQuotationStatusInput {
        let result = new CreateQuotationStatusInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["quotationStatusCode"] = this.quotationStatusCode;
        data["quotationStatusName"] = this.quotationStatusName;
        data["tenantId"] = this.tenantId;
        data["mileStoneId"] = this.mileStoneId;
        data["new"] = this.new;
        data["submitted"] = this.submitted;
        data["revised"] = this.revised;
        data["won"] = this.won;
        data["lost"] = this.lost;
        return data; 
    }
}

export interface ICreateQuotationStatusInput {
    id: number;
    quotationStatusCode: string;
    quotationStatusName: string;
    tenantId: number;
    mileStoneId: number;
    new: boolean;
    submitted: boolean;
    revised: boolean;
    won: boolean;
    lost: boolean;
}

export class MilestoneData implements IMilestoneData {
    id: number;
    name: string;

    constructor(data?: IMilestoneData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): MilestoneData {
        let result = new MilestoneData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IMilestoneData {
    id: number;
    name: string;
}

export class PagedResultDtoOfReasonListDto implements IPagedResultDtoOfReasonListDto {
    totalCount: number;
    items: ReasonListDto[];

    constructor(data?: IPagedResultDtoOfReasonListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ReasonListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfReasonListDto {
        let result = new PagedResultDtoOfReasonListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfReasonListDto {
    totalCount: number;
    items: ReasonListDto[];
}

export class ReasonListDto implements IReasonListDto {
    id: number;
    code: string;
    name: string;

    constructor(data?: IReasonListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): ReasonListDto {
        let result = new ReasonListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface IReasonListDto {
    id: number;
    code: string;
    name: string;
}

export class GetReason implements IGetReason {
    reasons: CreateReasonInput;

    constructor(data?: IGetReason) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.reasons = data["reasons"] ? CreateReasonInput.fromJS(data["reasons"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetReason {
        let result = new GetReason();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reasons"] = this.reasons ? this.reasons.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetReason {
    reasons: CreateReasonInput;
}

export class CreateReasonInput implements ICreateReasonInput {
    id: number;
    code: string;
    name: string;
    tenantId: number;

    constructor(data?: ICreateReasonInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateReasonInput {
        let result = new CreateReasonInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateReasonInput {
    id: number;
    code: string;
    name: string;
    tenantId: number;
}

export class PagedResultDtoOfReportList implements IPagedResultDtoOfReportList {
    totalCount: number;
    items: ReportList[];

    constructor(data?: IPagedResultDtoOfReportList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ReportList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfReportList {
        let result = new PagedResultDtoOfReportList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfReportList {
    totalCount: number;
    items: ReportList[];
}

export class ReportList implements IReportList {
    id: number;
    subjectName: string;
    proposalNumber: string;
    projectRef: string;
    total: number;
    salesOrderNumber: string;
    customerPONumber: string;
    exchangeRate: number;
    enquiryId: number;
    enquiryName: string;
    enquiryNumber: string;
    enquiryClosureDate: string;
    quotationTitleId: number;
    quotationTitleName: string;
    companyId: number;
    companyName: string;
    contactId: number;
    contactName: string;
    statusId: number;
    statusName: string;
    freightId: number;
    freightName: string;
    paymentId: number;
    paymentName: string;
    packingId: number;
    packingName: string;
    warrantyId: number;
    warrantyName: string;
    validityId: number;
    validityName: string;
    deliveryId: number;
    deliveryName: string;
    currencyId: number;
    currencyName: string;
    salesmanId: number;
    salesman: string;
    reasonId: number;
    reasonName: string;
    creationTime: string;
    mileStoneId: number;
    mileStones: string;
    submitted: boolean;
    submittedDate: moment.Moment;
    won: boolean;
    wonDate: moment.Moment;
    lost: boolean;
    lostDate: moment.Moment;
    vat: boolean;
    vatPercentage: number;
    vatAmount: number;

    constructor(data?: IReportList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.subjectName = data["subjectName"];
            this.proposalNumber = data["proposalNumber"];
            this.projectRef = data["projectRef"];
            this.total = data["total"];
            this.salesOrderNumber = data["salesOrderNumber"];
            this.customerPONumber = data["customerPONumber"];
            this.exchangeRate = data["exchangeRate"];
            this.enquiryId = data["enquiryId"];
            this.enquiryName = data["enquiryName"];
            this.enquiryNumber = data["enquiryNumber"];
            this.enquiryClosureDate = data["enquiryClosureDate"];
            this.quotationTitleId = data["quotationTitleId"];
            this.quotationTitleName = data["quotationTitleName"];
            this.companyId = data["companyId"];
            this.companyName = data["companyName"];
            this.contactId = data["contactId"];
            this.contactName = data["contactName"];
            this.statusId = data["statusId"];
            this.statusName = data["statusName"];
            this.freightId = data["freightId"];
            this.freightName = data["freightName"];
            this.paymentId = data["paymentId"];
            this.paymentName = data["paymentName"];
            this.packingId = data["packingId"];
            this.packingName = data["packingName"];
            this.warrantyId = data["warrantyId"];
            this.warrantyName = data["warrantyName"];
            this.validityId = data["validityId"];
            this.validityName = data["validityName"];
            this.deliveryId = data["deliveryId"];
            this.deliveryName = data["deliveryName"];
            this.currencyId = data["currencyId"];
            this.currencyName = data["currencyName"];
            this.salesmanId = data["salesmanId"];
            this.salesman = data["salesman"];
            this.reasonId = data["reasonId"];
            this.reasonName = data["reasonName"];
            this.creationTime = data["creationTime"];
            this.mileStoneId = data["mileStoneId"];
            this.mileStones = data["mileStones"];
            this.submitted = data["submitted"];
            this.submittedDate = data["submittedDate"] ? moment(data["submittedDate"].toString()) : <any>undefined;
            this.won = data["won"];
            this.wonDate = data["wonDate"] ? moment(data["wonDate"].toString()) : <any>undefined;
            this.lost = data["lost"];
            this.lostDate = data["lostDate"] ? moment(data["lostDate"].toString()) : <any>undefined;
            this.vat = data["vat"];
            this.vatPercentage = data["vatPercentage"];
            this.vatAmount = data["vatAmount"];
        }
    }

    static fromJS(data: any): ReportList {
        let result = new ReportList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["subjectName"] = this.subjectName;
        data["proposalNumber"] = this.proposalNumber;
        data["projectRef"] = this.projectRef;
        data["total"] = this.total;
        data["salesOrderNumber"] = this.salesOrderNumber;
        data["customerPONumber"] = this.customerPONumber;
        data["exchangeRate"] = this.exchangeRate;
        data["enquiryId"] = this.enquiryId;
        data["enquiryName"] = this.enquiryName;
        data["enquiryNumber"] = this.enquiryNumber;
        data["enquiryClosureDate"] = this.enquiryClosureDate;
        data["quotationTitleId"] = this.quotationTitleId;
        data["quotationTitleName"] = this.quotationTitleName;
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        data["contactId"] = this.contactId;
        data["contactName"] = this.contactName;
        data["statusId"] = this.statusId;
        data["statusName"] = this.statusName;
        data["freightId"] = this.freightId;
        data["freightName"] = this.freightName;
        data["paymentId"] = this.paymentId;
        data["paymentName"] = this.paymentName;
        data["packingId"] = this.packingId;
        data["packingName"] = this.packingName;
        data["warrantyId"] = this.warrantyId;
        data["warrantyName"] = this.warrantyName;
        data["validityId"] = this.validityId;
        data["validityName"] = this.validityName;
        data["deliveryId"] = this.deliveryId;
        data["deliveryName"] = this.deliveryName;
        data["currencyId"] = this.currencyId;
        data["currencyName"] = this.currencyName;
        data["salesmanId"] = this.salesmanId;
        data["salesman"] = this.salesman;
        data["reasonId"] = this.reasonId;
        data["reasonName"] = this.reasonName;
        data["creationTime"] = this.creationTime;
        data["mileStoneId"] = this.mileStoneId;
        data["mileStones"] = this.mileStones;
        data["submitted"] = this.submitted;
        data["submittedDate"] = this.submittedDate ? this.submittedDate.toISOString() : <any>undefined;
        data["won"] = this.won;
        data["wonDate"] = this.wonDate ? this.wonDate.toISOString() : <any>undefined;
        data["lost"] = this.lost;
        data["lostDate"] = this.lostDate ? this.lostDate.toISOString() : <any>undefined;
        data["vat"] = this.vat;
        data["vatPercentage"] = this.vatPercentage;
        data["vatAmount"] = this.vatAmount;
        return data; 
    }
}

export interface IReportList {
    id: number;
    subjectName: string;
    proposalNumber: string;
    projectRef: string;
    total: number;
    salesOrderNumber: string;
    customerPONumber: string;
    exchangeRate: number;
    enquiryId: number;
    enquiryName: string;
    enquiryNumber: string;
    enquiryClosureDate: string;
    quotationTitleId: number;
    quotationTitleName: string;
    companyId: number;
    companyName: string;
    contactId: number;
    contactName: string;
    statusId: number;
    statusName: string;
    freightId: number;
    freightName: string;
    paymentId: number;
    paymentName: string;
    packingId: number;
    packingName: string;
    warrantyId: number;
    warrantyName: string;
    validityId: number;
    validityName: string;
    deliveryId: number;
    deliveryName: string;
    currencyId: number;
    currencyName: string;
    salesmanId: number;
    salesman: string;
    reasonId: number;
    reasonName: string;
    creationTime: string;
    mileStoneId: number;
    mileStones: string;
    submitted: boolean;
    submittedDate: moment.Moment;
    won: boolean;
    wonDate: moment.Moment;
    lost: boolean;
    lostDate: moment.Moment;
    vat: boolean;
    vatPercentage: number;
    vatAmount: number;
}

export class PagedResultDtoOfQuotationReportDtoList implements IPagedResultDtoOfQuotationReportDtoList {
    totalCount: number;
    items: QuotationReportDtoList[];

    constructor(data?: IPagedResultDtoOfQuotationReportDtoList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(QuotationReportDtoList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfQuotationReportDtoList {
        let result = new PagedResultDtoOfQuotationReportDtoList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfQuotationReportDtoList {
    totalCount: number;
    items: QuotationReportDtoList[];
}

export class QuotationReportDtoList implements IQuotationReportDtoList {
    quotationId: number;
    subjectName: string;
    qRefno: string;
    total: number;
    enquiryId: number;
    enquiryTitle: string;
    enquiryNo: string;
    remarks: string;
    enquiryClosureDate: moment.Moment;
    companyName: string;
    contactName: string;
    statusName: string;
    salesperson: string;
    creator: string;
    creationTime: moment.Moment;
    mileStones: string;
    mileStoneStatus: string;
    submittedDate: moment.Moment;
    wonDate: moment.Moment;
    lostDate: moment.Moment;

    constructor(data?: IQuotationReportDtoList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.quotationId = data["quotationId"];
            this.subjectName = data["subjectName"];
            this.qRefno = data["qRefno"];
            this.total = data["total"];
            this.enquiryId = data["enquiryId"];
            this.enquiryTitle = data["enquiryTitle"];
            this.enquiryNo = data["enquiryNo"];
            this.remarks = data["remarks"];
            this.enquiryClosureDate = data["enquiryClosureDate"] ? moment(data["enquiryClosureDate"].toString()) : <any>undefined;
            this.companyName = data["companyName"];
            this.contactName = data["contactName"];
            this.statusName = data["statusName"];
            this.salesperson = data["salesperson"];
            this.creator = data["creator"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.mileStones = data["mileStones"];
            this.mileStoneStatus = data["mileStoneStatus"];
            this.submittedDate = data["submittedDate"] ? moment(data["submittedDate"].toString()) : <any>undefined;
            this.wonDate = data["wonDate"] ? moment(data["wonDate"].toString()) : <any>undefined;
            this.lostDate = data["lostDate"] ? moment(data["lostDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): QuotationReportDtoList {
        let result = new QuotationReportDtoList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotationId"] = this.quotationId;
        data["subjectName"] = this.subjectName;
        data["qRefno"] = this.qRefno;
        data["total"] = this.total;
        data["enquiryId"] = this.enquiryId;
        data["enquiryTitle"] = this.enquiryTitle;
        data["enquiryNo"] = this.enquiryNo;
        data["remarks"] = this.remarks;
        data["enquiryClosureDate"] = this.enquiryClosureDate ? this.enquiryClosureDate.toISOString() : <any>undefined;
        data["companyName"] = this.companyName;
        data["contactName"] = this.contactName;
        data["statusName"] = this.statusName;
        data["salesperson"] = this.salesperson;
        data["creator"] = this.creator;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["mileStones"] = this.mileStones;
        data["mileStoneStatus"] = this.mileStoneStatus;
        data["submittedDate"] = this.submittedDate ? this.submittedDate.toISOString() : <any>undefined;
        data["wonDate"] = this.wonDate ? this.wonDate.toISOString() : <any>undefined;
        data["lostDate"] = this.lostDate ? this.lostDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IQuotationReportDtoList {
    quotationId: number;
    subjectName: string;
    qRefno: string;
    total: number;
    enquiryId: number;
    enquiryTitle: string;
    enquiryNo: string;
    remarks: string;
    enquiryClosureDate: moment.Moment;
    companyName: string;
    contactName: string;
    statusName: string;
    salesperson: string;
    creator: string;
    creationTime: moment.Moment;
    mileStones: string;
    mileStoneStatus: string;
    submittedDate: moment.Moment;
    wonDate: moment.Moment;
    lostDate: moment.Moment;
}

export class PagedResultDtoOfCompanyReportList implements IPagedResultDtoOfCompanyReportList {
    totalCount: number;
    items: CompanyReportList[];

    constructor(data?: IPagedResultDtoOfCompanyReportList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(CompanyReportList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCompanyReportList {
        let result = new PagedResultDtoOfCompanyReportList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfCompanyReportList {
    totalCount: number;
    items: CompanyReportList[];
}

export class CompanyReportList implements ICompanyReportList {
    id: number;
    name: string;
    salesperson: string;
    creator: string;
    creationTime: moment.Moment;
    countryOrCompanyName: string;
    customerType: string;
    currencyOrTitleName: string;
    enquiryCount: number;
    quotationCount: number;

    constructor(data?: ICompanyReportList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.salesperson = data["salesperson"];
            this.creator = data["creator"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.countryOrCompanyName = data["countryOrCompanyName"];
            this.customerType = data["customerType"];
            this.currencyOrTitleName = data["currencyOrTitleName"];
            this.enquiryCount = data["enquiryCount"];
            this.quotationCount = data["quotationCount"];
        }
    }

    static fromJS(data: any): CompanyReportList {
        let result = new CompanyReportList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["salesperson"] = this.salesperson;
        data["creator"] = this.creator;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["countryOrCompanyName"] = this.countryOrCompanyName;
        data["customerType"] = this.customerType;
        data["currencyOrTitleName"] = this.currencyOrTitleName;
        data["enquiryCount"] = this.enquiryCount;
        data["quotationCount"] = this.quotationCount;
        return data; 
    }
}

export interface ICompanyReportList {
    id: number;
    name: string;
    salesperson: string;
    creator: string;
    creationTime: moment.Moment;
    countryOrCompanyName: string;
    customerType: string;
    currencyOrTitleName: string;
    enquiryCount: number;
    quotationCount: number;
}

export class ReportGeneratorInput implements IReportGeneratorInput {
    id: number;
    tenantId: number;
    name: string;
    reportTypeId: number;
    mileStone: string;
    mileStoneStatus: string;
    salesperson: string;
    creator: string;
    country: string;
    currency: string;
    customerType: string;
    quotationStatus: string;
    enquiryCreationTime: moment.Moment;
    enquiryCreationTypeId: number;
    quotationCreationTime: moment.Moment;
    quotationCreationTypeId: number;
    submitttedDate: moment.Moment;
    submitttedDateId: number;
    wonDate: moment.Moment;
    wonDateId: number;
    lostDate: moment.Moment;
    lostDateId: number;
    hiddenColumns: string;

    constructor(data?: IReportGeneratorInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.reportTypeId = data["reportTypeId"];
            this.mileStone = data["mileStone"];
            this.mileStoneStatus = data["mileStoneStatus"];
            this.salesperson = data["salesperson"];
            this.creator = data["creator"];
            this.country = data["country"];
            this.currency = data["currency"];
            this.customerType = data["customerType"];
            this.quotationStatus = data["quotationStatus"];
            this.enquiryCreationTime = data["enquiryCreationTime"] ? moment(data["enquiryCreationTime"].toString()) : <any>undefined;
            this.enquiryCreationTypeId = data["enquiryCreationTypeId"];
            this.quotationCreationTime = data["quotationCreationTime"] ? moment(data["quotationCreationTime"].toString()) : <any>undefined;
            this.quotationCreationTypeId = data["quotationCreationTypeId"];
            this.submitttedDate = data["submitttedDate"] ? moment(data["submitttedDate"].toString()) : <any>undefined;
            this.submitttedDateId = data["submitttedDateId"];
            this.wonDate = data["wonDate"] ? moment(data["wonDate"].toString()) : <any>undefined;
            this.wonDateId = data["wonDateId"];
            this.lostDate = data["lostDate"] ? moment(data["lostDate"].toString()) : <any>undefined;
            this.lostDateId = data["lostDateId"];
            this.hiddenColumns = data["hiddenColumns"];
        }
    }

    static fromJS(data: any): ReportGeneratorInput {
        let result = new ReportGeneratorInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["reportTypeId"] = this.reportTypeId;
        data["mileStone"] = this.mileStone;
        data["mileStoneStatus"] = this.mileStoneStatus;
        data["salesperson"] = this.salesperson;
        data["creator"] = this.creator;
        data["country"] = this.country;
        data["currency"] = this.currency;
        data["customerType"] = this.customerType;
        data["quotationStatus"] = this.quotationStatus;
        data["enquiryCreationTime"] = this.enquiryCreationTime ? this.enquiryCreationTime.toISOString() : <any>undefined;
        data["enquiryCreationTypeId"] = this.enquiryCreationTypeId;
        data["quotationCreationTime"] = this.quotationCreationTime ? this.quotationCreationTime.toISOString() : <any>undefined;
        data["quotationCreationTypeId"] = this.quotationCreationTypeId;
        data["submitttedDate"] = this.submitttedDate ? this.submitttedDate.toISOString() : <any>undefined;
        data["submitttedDateId"] = this.submitttedDateId;
        data["wonDate"] = this.wonDate ? this.wonDate.toISOString() : <any>undefined;
        data["wonDateId"] = this.wonDateId;
        data["lostDate"] = this.lostDate ? this.lostDate.toISOString() : <any>undefined;
        data["lostDateId"] = this.lostDateId;
        data["hiddenColumns"] = this.hiddenColumns;
        return data; 
    }
}

export interface IReportGeneratorInput {
    id: number;
    tenantId: number;
    name: string;
    reportTypeId: number;
    mileStone: string;
    mileStoneStatus: string;
    salesperson: string;
    creator: string;
    country: string;
    currency: string;
    customerType: string;
    quotationStatus: string;
    enquiryCreationTime: moment.Moment;
    enquiryCreationTypeId: number;
    quotationCreationTime: moment.Moment;
    quotationCreationTypeId: number;
    submitttedDate: moment.Moment;
    submitttedDateId: number;
    wonDate: moment.Moment;
    wonDateId: number;
    lostDate: moment.Moment;
    lostDateId: number;
    hiddenColumns: string;
}

export class PagedResultDtoOfFilterListOutput implements IPagedResultDtoOfFilterListOutput {
    totalCount: number;
    items: FilterListOutput[];

    constructor(data?: IPagedResultDtoOfFilterListOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(FilterListOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfFilterListOutput {
        let result = new PagedResultDtoOfFilterListOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfFilterListOutput {
    totalCount: number;
    items: FilterListOutput[];
}

export class FilterListOutput implements IFilterListOutput {
    companyId: number;
    company: string;
    salesperson: string;
    creator: string;
    creationTime: moment.Moment;
    country: string;
    customerType: string;
    currency: string;
    enquiryCount: number;
    quotationCount: number;
    contactId: number;
    contact: string;
    titleName: string;
    quotationId: number;
    subjectName: string;
    qRefno: string;
    total: number;
    enquiryId: number;
    enquiryTitle: string;
    enquiryNo: string;
    remarks: string;
    enquiryClosureDate: moment.Moment;
    statusName: string;
    mileStones: string;
    mileStoneStatus: string;
    submittedDate: moment.Moment;
    wonDate: moment.Moment;
    lostDate: moment.Moment;

    constructor(data?: IFilterListOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyId = data["companyId"];
            this.company = data["company"];
            this.salesperson = data["salesperson"];
            this.creator = data["creator"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.country = data["country"];
            this.customerType = data["customerType"];
            this.currency = data["currency"];
            this.enquiryCount = data["enquiryCount"];
            this.quotationCount = data["quotationCount"];
            this.contactId = data["contactId"];
            this.contact = data["contact"];
            this.titleName = data["titleName"];
            this.quotationId = data["quotationId"];
            this.subjectName = data["subjectName"];
            this.qRefno = data["qRefno"];
            this.total = data["total"];
            this.enquiryId = data["enquiryId"];
            this.enquiryTitle = data["enquiryTitle"];
            this.enquiryNo = data["enquiryNo"];
            this.remarks = data["remarks"];
            this.enquiryClosureDate = data["enquiryClosureDate"] ? moment(data["enquiryClosureDate"].toString()) : <any>undefined;
            this.statusName = data["statusName"];
            this.mileStones = data["mileStones"];
            this.mileStoneStatus = data["mileStoneStatus"];
            this.submittedDate = data["submittedDate"] ? moment(data["submittedDate"].toString()) : <any>undefined;
            this.wonDate = data["wonDate"] ? moment(data["wonDate"].toString()) : <any>undefined;
            this.lostDate = data["lostDate"] ? moment(data["lostDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FilterListOutput {
        let result = new FilterListOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["company"] = this.company;
        data["salesperson"] = this.salesperson;
        data["creator"] = this.creator;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["country"] = this.country;
        data["customerType"] = this.customerType;
        data["currency"] = this.currency;
        data["enquiryCount"] = this.enquiryCount;
        data["quotationCount"] = this.quotationCount;
        data["contactId"] = this.contactId;
        data["contact"] = this.contact;
        data["titleName"] = this.titleName;
        data["quotationId"] = this.quotationId;
        data["subjectName"] = this.subjectName;
        data["qRefno"] = this.qRefno;
        data["total"] = this.total;
        data["enquiryId"] = this.enquiryId;
        data["enquiryTitle"] = this.enquiryTitle;
        data["enquiryNo"] = this.enquiryNo;
        data["remarks"] = this.remarks;
        data["enquiryClosureDate"] = this.enquiryClosureDate ? this.enquiryClosureDate.toISOString() : <any>undefined;
        data["statusName"] = this.statusName;
        data["mileStones"] = this.mileStones;
        data["mileStoneStatus"] = this.mileStoneStatus;
        data["submittedDate"] = this.submittedDate ? this.submittedDate.toISOString() : <any>undefined;
        data["wonDate"] = this.wonDate ? this.wonDate.toISOString() : <any>undefined;
        data["lostDate"] = this.lostDate ? this.lostDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IFilterListOutput {
    companyId: number;
    company: string;
    salesperson: string;
    creator: string;
    creationTime: moment.Moment;
    country: string;
    customerType: string;
    currency: string;
    enquiryCount: number;
    quotationCount: number;
    contactId: number;
    contact: string;
    titleName: string;
    quotationId: number;
    subjectName: string;
    qRefno: string;
    total: number;
    enquiryId: number;
    enquiryTitle: string;
    enquiryNo: string;
    remarks: string;
    enquiryClosureDate: moment.Moment;
    statusName: string;
    mileStones: string;
    mileStoneStatus: string;
    submittedDate: moment.Moment;
    wonDate: moment.Moment;
    lostDate: moment.Moment;
}

export class ListResultDtoOfRoleListDto implements IListResultDtoOfRoleListDto {
    items: RoleListDto[];

    constructor(data?: IListResultDtoOfRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(RoleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfRoleListDto {
        let result = new ListResultDtoOfRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfRoleListDto {
    items: RoleListDto[];
}

export class RoleListDto implements IRoleListDto {
    name: string;
    displayName: string;
    isStatic: boolean;
    isDefault: boolean;
    creationTime: moment.Moment;
    id: number;

    constructor(data?: IRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.isStatic = data["isStatic"];
            this.isDefault = data["isDefault"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RoleListDto {
        let result = new RoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isStatic"] = this.isStatic;
        data["isDefault"] = this.isDefault;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IRoleListDto {
    name: string;
    displayName: string;
    isStatic: boolean;
    isDefault: boolean;
    creationTime: moment.Moment;
    id: number;
}

export class GetRoleForEditOutput implements IGetRoleForEditOutput {
    role: RoleEditDto;
    permissions: FlatPermissionDto[];
    grantedPermissionNames: string[];

    constructor(data?: IGetRoleForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : <any>undefined;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetRoleForEditOutput {
        let result = new GetRoleForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IGetRoleForEditOutput {
    role: RoleEditDto;
    permissions: FlatPermissionDto[];
    grantedPermissionNames: string[];
}

export class RoleEditDto implements IRoleEditDto {
    id: number;
    displayName: string;
    isDefault: boolean;

    constructor(data?: IRoleEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.isDefault = data["isDefault"];
        }
    }

    static fromJS(data: any): RoleEditDto {
        let result = new RoleEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        return data; 
    }
}

export interface IRoleEditDto {
    id: number;
    displayName: string;
    isDefault: boolean;
}

export class FlatPermissionDto implements IFlatPermissionDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    isGrantedByDefault: boolean;

    constructor(data?: IFlatPermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionDto {
        let result = new FlatPermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data; 
    }
}

export interface IFlatPermissionDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    isGrantedByDefault: boolean;
}

export class CreateOrUpdateRoleInput implements ICreateOrUpdateRoleInput {
    role: RoleEditDto = new RoleEditDto();
    grantedPermissionNames: string[] = [];

    constructor(data?: ICreateOrUpdateRoleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : new RoleEditDto();
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateRoleInput {
        let result = new CreateOrUpdateRoleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface ICreateOrUpdateRoleInput {
    role: RoleEditDto;
    grantedPermissionNames: string[];
}

export class Select4Result implements ISelect4Result {
    select4data: Datadto4[];

    constructor(data?: ISelect4Result) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select4data"] && data["select4data"].constructor === Array) {
                this.select4data = [];
                for (let item of data["select4data"])
                    this.select4data.push(Datadto4.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select4Result {
        let result = new Select4Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select4data && this.select4data.constructor === Array) {
            data["select4data"] = [];
            for (let item of this.select4data)
                data["select4data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect4Result {
    select4data: Datadto4[];
}

export class Datadto4 implements IDatadto4 {
    id: number;
    name: string;
    price: number;

    constructor(data?: IDatadto4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.price = data["price"];
        }
    }

    static fromJS(data: any): Datadto4 {
        let result = new Datadto4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["price"] = this.price;
        return data; 
    }
}

export interface IDatadto4 {
    id: number;
    name: string;
    price: number;
}

export class Select3Result implements ISelect3Result {
    select3data: Datadto3[];

    constructor(data?: ISelect3Result) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select3data"] && data["select3data"].constructor === Array) {
                this.select3data = [];
                for (let item of data["select3data"])
                    this.select3data.push(Datadto3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select3Result {
        let result = new Select3Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select3data && this.select3data.constructor === Array) {
            data["select3data"] = [];
            for (let item of this.select3data)
                data["select3data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect3Result {
    select3data: Datadto3[];
}

export class Datadto3 implements IDatadto3 {
    id: number;
    name: string;
    code: string;

    constructor(data?: IDatadto3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.code = data["code"];
        }
    }

    static fromJS(data: any): Datadto3 {
        let result = new Datadto3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        return data; 
    }
}

export interface IDatadto3 {
    id: number;
    name: string;
    code: string;
}

export class Select2Result implements ISelect2Result {
    select2data: Datadto[];

    constructor(data?: ISelect2Result) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select2data"] && data["select2data"].constructor === Array) {
                this.select2data = [];
                for (let item of data["select2data"])
                    this.select2data.push(Datadto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2Result {
        let result = new Select2Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select2data && this.select2data.constructor === Array) {
            data["select2data"] = [];
            for (let item of this.select2data)
                data["select2data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2Result {
    select2data: Datadto[];
}

export class Datadto implements IDatadto {
    id: number;
    name: string;

    constructor(data?: IDatadto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Datadto {
        let result = new Datadto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IDatadto {
    id: number;
    name: string;
}

export class Select2Company implements ISelect2Company {
    select2data: Companydto[];

    constructor(data?: ISelect2Company) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["select2data"] && data["select2data"].constructor === Array) {
                this.select2data = [];
                for (let item of data["select2data"])
                    this.select2data.push(Companydto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Select2Company {
        let result = new Select2Company();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.select2data && this.select2data.constructor === Array) {
            data["select2data"] = [];
            for (let item of this.select2data)
                data["select2data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelect2Company {
    select2data: Companydto[];
}

export class Companydto implements ICompanydto {
    id: number;
    name: string;
    salesId: number;
    salesName: string;

    constructor(data?: ICompanydto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.salesId = data["salesId"];
            this.salesName = data["salesName"];
        }
    }

    static fromJS(data: any): Companydto {
        let result = new Companydto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["salesId"] = this.salesId;
        data["salesName"] = this.salesName;
        return data; 
    }
}

export interface ICompanydto {
    id: number;
    name: string;
    salesId: number;
    salesName: string;
}

export class Select5Result implements ISelect5Result {
    select2data: Datadto5;

    constructor(data?: ISelect5Result) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.select2data = data["select2data"] ? Datadto5.fromJS(data["select2data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Select5Result {
        let result = new Select5Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["select2data"] = this.select2data ? this.select2data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISelect5Result {
    select2data: Datadto5;
}

export class Datadto5 implements IDatadto5 {
    id: number;
    name: string;
    companyId: number;
    companyName: string;
    salesId: number;
    salesName: string;
    contactId: number;
    contactName: string;
    currencyId: number;
    currencyName: string;

    constructor(data?: IDatadto5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.companyId = data["companyId"];
            this.companyName = data["companyName"];
            this.salesId = data["salesId"];
            this.salesName = data["salesName"];
            this.contactId = data["contactId"];
            this.contactName = data["contactName"];
            this.currencyId = data["currencyId"];
            this.currencyName = data["currencyName"];
        }
    }

    static fromJS(data: any): Datadto5 {
        let result = new Datadto5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        data["salesId"] = this.salesId;
        data["salesName"] = this.salesName;
        data["contactId"] = this.contactId;
        data["contactName"] = this.contactName;
        data["currencyId"] = this.currencyId;
        data["currencyName"] = this.currencyName;
        return data; 
    }
}

export interface IDatadto5 {
    id: number;
    name: string;
    companyId: number;
    companyName: string;
    salesId: number;
    salesName: string;
    contactId: number;
    contactName: string;
    currencyId: number;
    currencyName: string;
}

export class Select6Result implements ISelect6Result {
    select6data: Select6ResultInput;

    constructor(data?: ISelect6Result) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.select6data = data["select6data"] ? Select6ResultInput.fromJS(data["select6data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Select6Result {
        let result = new Select6Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["select6data"] = this.select6data ? this.select6data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISelect6Result {
    select6data: Select6ResultInput;
}

export class Select6ResultInput implements ISelect6ResultInput {
    totalAmount: number;
    dueAmount: number;

    constructor(data?: ISelect6ResultInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalAmount = data["totalAmount"];
            this.dueAmount = data["dueAmount"];
        }
    }

    static fromJS(data: any): Select6ResultInput {
        let result = new Select6ResultInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalAmount"] = this.totalAmount;
        data["dueAmount"] = this.dueAmount;
        return data; 
    }
}

export interface ISelect6ResultInput {
    totalAmount: number;
    dueAmount: number;
}

export class ListResultDtoOfServiceList implements IListResultDtoOfServiceList {
    items: ServiceList[];

    constructor(data?: IListResultDtoOfServiceList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ServiceList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfServiceList {
        let result = new ListResultDtoOfServiceList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfServiceList {
    items: ServiceList[];
}

export class ServiceList implements IServiceList {
    id: number;
    serviceCode: string;
    serviceName: string;
    tenantId: number;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;

    constructor(data?: IServiceList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.serviceCode = data["serviceCode"];
            this.serviceName = data["serviceName"];
            this.tenantId = data["tenantId"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
        }
    }

    static fromJS(data: any): ServiceList {
        let result = new ServiceList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serviceCode"] = this.serviceCode;
        data["serviceName"] = this.serviceName;
        data["tenantId"] = this.tenantId;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        return data; 
    }
}

export interface IServiceList {
    id: number;
    serviceCode: string;
    serviceName: string;
    tenantId: number;
    isDeleted: boolean;
    deleterUserId: number;
    deletionTime: moment.Moment;
    lastModificationTime: moment.Moment;
    lastModifierUserId: number;
    creationTime: moment.Moment;
    creatorUserId: number;
}

export class GetService implements IGetService {
    services: CreateServiceInput;

    constructor(data?: IGetService) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.services = data["services"] ? CreateServiceInput.fromJS(data["services"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetService {
        let result = new GetService();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["services"] = this.services ? this.services.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetService {
    services: CreateServiceInput;
}

export class CreateServiceInput implements ICreateServiceInput {
    id: number;
    serviceCode: string;
    serviceName: string;
    tenantId: number;

    constructor(data?: ICreateServiceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.serviceCode = data["serviceCode"];
            this.serviceName = data["serviceName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateServiceInput {
        let result = new CreateServiceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serviceCode"] = this.serviceCode;
        data["serviceName"] = this.serviceName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateServiceInput {
    id: number;
    serviceCode: string;
    serviceName: string;
    tenantId: number;
}

export class GetCurrentLoginInformationsOutput implements IGetCurrentLoginInformationsOutput {
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    application: ApplicationInfoDto;

    constructor(data?: IGetCurrentLoginInformationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : <any>undefined;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : <any>undefined;
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        let result = new GetCurrentLoginInformationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["application"] = this.application ? this.application.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetCurrentLoginInformationsOutput {
    user: UserLoginInfoDto;
    tenant: TenantLoginInfoDto;
    application: ApplicationInfoDto;
}

export class UserLoginInfoDto implements IUserLoginInfoDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    id: number;

    constructor(data?: IUserLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.profilePictureId = data["profilePictureId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        let result = new UserLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["profilePictureId"] = this.profilePictureId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserLoginInfoDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    profilePictureId: string;
    id: number;
}

export class TenantLoginInfoDto implements ITenantLoginInfoDto {
    tenancyName: string;
    name: string;
    logoId: string;
    logoFileType: string;
    customCssId: string;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    edition: EditionInfoDto;
    creationTime: moment.Moment;
    paymentPeriodType: TenantLoginInfoDtoPaymentPeriodType;
    subscriptionDateString: string;
    creationTimeString: string;
    id: number;

    constructor(data?: ITenantLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.logoId = data["logoId"];
            this.logoFileType = data["logoFileType"];
            this.customCssId = data["customCssId"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
            this.edition = data["edition"] ? EditionInfoDto.fromJS(data["edition"]) : <any>undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.paymentPeriodType = data["paymentPeriodType"];
            this.subscriptionDateString = data["subscriptionDateString"];
            this.creationTimeString = data["creationTimeString"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        let result = new TenantLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["logoId"] = this.logoId;
        data["logoFileType"] = this.logoFileType;
        data["customCssId"] = this.customCssId;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["paymentPeriodType"] = this.paymentPeriodType;
        data["subscriptionDateString"] = this.subscriptionDateString;
        data["creationTimeString"] = this.creationTimeString;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantLoginInfoDto {
    tenancyName: string;
    name: string;
    logoId: string;
    logoFileType: string;
    customCssId: string;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    edition: EditionInfoDto;
    creationTime: moment.Moment;
    paymentPeriodType: TenantLoginInfoDtoPaymentPeriodType;
    subscriptionDateString: string;
    creationTimeString: string;
    id: number;
}

export class ApplicationInfoDto implements IApplicationInfoDto {
    version: string;
    releaseDate: moment.Moment;
    features: { [key: string] : boolean; };

    constructor(data?: IApplicationInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.version = data["version"];
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : <any>undefined;
            if (data["features"]) {
                this.features = {};
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features[key] = data["features"][key];
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        let result = new ApplicationInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key];
            }
        }
        return data; 
    }
}

export interface IApplicationInfoDto {
    version: string;
    releaseDate: moment.Moment;
    features: { [key: string] : boolean; };
}

export class EditionInfoDto implements IEditionInfoDto {
    displayName: string;
    trialDayCount: number;
    monthlyPrice: number;
    annualPrice: number;
    isHighestEdition: boolean;
    isFree: boolean;
    id: number;

    constructor(data?: IEditionInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.trialDayCount = data["trialDayCount"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.isHighestEdition = data["isHighestEdition"];
            this.isFree = data["isFree"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EditionInfoDto {
        let result = new EditionInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["trialDayCount"] = this.trialDayCount;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["isHighestEdition"] = this.isHighestEdition;
        data["isFree"] = this.isFree;
        data["id"] = this.id;
        return data; 
    }
}

export interface IEditionInfoDto {
    displayName: string;
    trialDayCount: number;
    monthlyPrice: number;
    annualPrice: number;
    isHighestEdition: boolean;
    isFree: boolean;
    id: number;
}

export class UpdateUserSignInTokenOutput implements IUpdateUserSignInTokenOutput {
    signInToken: string;
    encodedUserId: string;
    encodedTenantId: string;

    constructor(data?: IUpdateUserSignInTokenOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.signInToken = data["signInToken"];
            this.encodedUserId = data["encodedUserId"];
            this.encodedTenantId = data["encodedTenantId"];
        }
    }

    static fromJS(data: any): UpdateUserSignInTokenOutput {
        let result = new UpdateUserSignInTokenOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["signInToken"] = this.signInToken;
        data["encodedUserId"] = this.encodedUserId;
        data["encodedTenantId"] = this.encodedTenantId;
        return data; 
    }
}

export interface IUpdateUserSignInTokenOutput {
    signInToken: string;
    encodedUserId: string;
    encodedTenantId: string;
}

export class ListResultDtoOfTargetTypeListDto implements IListResultDtoOfTargetTypeListDto {
    items: TargetTypeListDto[];

    constructor(data?: IListResultDtoOfTargetTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TargetTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfTargetTypeListDto {
        let result = new ListResultDtoOfTargetTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfTargetTypeListDto {
    items: TargetTypeListDto[];
}

export class TargetTypeListDto implements ITargetTypeListDto {
    id: number;
    code: string;
    name: string;

    constructor(data?: ITargetTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): TargetTypeListDto {
        let result = new TargetTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface ITargetTypeListDto {
    id: number;
    code: string;
    name: string;
}

export class PagedResultDtoOfTargetTypeListDto implements IPagedResultDtoOfTargetTypeListDto {
    totalCount: number;
    items: TargetTypeListDto[];

    constructor(data?: IPagedResultDtoOfTargetTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TargetTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTargetTypeListDto {
        let result = new PagedResultDtoOfTargetTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTargetTypeListDto {
    totalCount: number;
    items: TargetTypeListDto[];
}

export class GetTargetType implements IGetTargetType {
    targetTypes: CreateTargetTypeInput;

    constructor(data?: IGetTargetType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.targetTypes = data["targetTypes"] ? CreateTargetTypeInput.fromJS(data["targetTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTargetType {
        let result = new GetTargetType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetTypes"] = this.targetTypes ? this.targetTypes.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetTargetType {
    targetTypes: CreateTargetTypeInput;
}

export class CreateTargetTypeInput implements ICreateTargetTypeInput {
    id: number;
    code: string;
    name: string;

    constructor(data?: ICreateTargetTypeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CreateTargetTypeInput {
        let result = new CreateTargetTypeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICreateTargetTypeInput {
    id: number;
    code: string;
    name: string;
}

export class PagedResultDtoOfTenantListDto implements IPagedResultDtoOfTenantListDto {
    totalCount: number;
    items: TenantListDto[];

    constructor(data?: IPagedResultDtoOfTenantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TenantListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantListDto {
        let result = new PagedResultDtoOfTenantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTenantListDto {
    totalCount: number;
    items: TenantListDto[];
}

export class TenantListDto implements ITenantListDto {
    tenancyName: string;
    name: string;
    editionDisplayName: string;
    connectionString: string;
    isActive: boolean;
    creationTime: moment.Moment;
    subscriptionEndDateUtc: moment.Moment;
    tenantTypeName: any;
    id: number;

    constructor(data?: ITenantListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.editionDisplayName = data["editionDisplayName"];
            this.connectionString = data["connectionString"];
            this.isActive = data["isActive"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            if (data["tenantTypeName"]) {
                this.tenantTypeName = {};
                for (let key in data["tenantTypeName"]) {
                    if (data["tenantTypeName"].hasOwnProperty(key))
                        this.tenantTypeName[key] = data["tenantTypeName"][key];
                }
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantListDto {
        let result = new TenantListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["editionDisplayName"] = this.editionDisplayName;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        if (this.tenantTypeName) {
            data["tenantTypeName"] = {};
            for (let key in this.tenantTypeName) {
                if (this.tenantTypeName.hasOwnProperty(key))
                    data["tenantTypeName"][key] = this.tenantTypeName[key];
            }
        }
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantListDto {
    tenancyName: string;
    name: string;
    editionDisplayName: string;
    connectionString: string;
    isActive: boolean;
    creationTime: moment.Moment;
    subscriptionEndDateUtc: moment.Moment;
    tenantTypeName: any;
    id: number;
}

export class CreateTenantInput implements ICreateTenantInput {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
    connectionString: string;
    shouldChangePasswordOnNextLogin: boolean;
    sendActivationEmail: boolean;
    editionId: number;
    isActive: boolean;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    tenantTypeId: number;

    constructor(data?: ICreateTenantInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.adminEmailAddress = data["adminEmailAddress"];
            this.adminPassword = data["adminPassword"];
            this.connectionString = data["connectionString"];
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"];
            this.sendActivationEmail = data["sendActivationEmail"];
            this.editionId = data["editionId"];
            this.isActive = data["isActive"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
            this.tenantTypeId = data["tenantTypeId"];
        }
    }

    static fromJS(data: any): CreateTenantInput {
        let result = new CreateTenantInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["adminPassword"] = this.adminPassword;
        data["connectionString"] = this.connectionString;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin;
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["tenantTypeId"] = this.tenantTypeId;
        return data; 
    }
}

export interface ICreateTenantInput {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
    connectionString: string;
    shouldChangePasswordOnNextLogin: boolean;
    sendActivationEmail: boolean;
    editionId: number;
    isActive: boolean;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    tenantTypeId: number;
}

export class TenantEditDto implements ITenantEditDto {
    tenancyName: string;
    name: string;
    connectionString: string;
    editionId: number;
    isActive: boolean;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    id: number;

    constructor(data?: ITenantEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.connectionString = data["connectionString"];
            this.editionId = data["editionId"];
            this.isActive = data["isActive"];
            this.subscriptionEndDateUtc = data["subscriptionEndDateUtc"] ? moment(data["subscriptionEndDateUtc"].toString()) : <any>undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantEditDto {
        let result = new TenantEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["connectionString"] = this.connectionString;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndDateUtc"] = this.subscriptionEndDateUtc ? this.subscriptionEndDateUtc.toISOString() : <any>undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["id"] = this.id;
        return data; 
    }
}

export interface ITenantEditDto {
    tenancyName: string;
    name: string;
    connectionString: string;
    editionId: number;
    isActive: boolean;
    subscriptionEndDateUtc: moment.Moment;
    isInTrialPeriod: boolean;
    id: number;
}

export class GetTenantFeaturesEditOutput implements IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];

    constructor(data?: IGetTenantFeaturesEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (let item of data["features"])
                    this.features.push(FlatFeatureDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTenantFeaturesEditOutput {
        let result = new GetTenantFeaturesEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetTenantFeaturesEditOutput {
    featureValues: NameValueDto[];
    features: FlatFeatureDto[];
}

export class UpdateTenantFeaturesInput implements IUpdateTenantFeaturesInput {
    id: number;
    featureValues: NameValueDto[] = [];

    constructor(data?: IUpdateTenantFeaturesInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateTenantFeaturesInput {
        let result = new UpdateTenantFeaturesInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateTenantFeaturesInput {
    id: number;
    featureValues: NameValueDto[];
}

export class PagedResultDtoOfSpResultActivepotential implements IPagedResultDtoOfSpResultActivepotential {
    totalCount: number;
    items: SpResultActivepotential[];

    constructor(data?: IPagedResultDtoOfSpResultActivepotential) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(SpResultActivepotential.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSpResultActivepotential {
        let result = new PagedResultDtoOfSpResultActivepotential();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfSpResultActivepotential {
    totalCount: number;
    items: SpResultActivepotential[];
}

export class SpResultActivepotential implements ISpResultActivepotential {
    createmonth: string;
    totalcreatedvalue: number;
    totalwonvalue: number;
    optimalactive: number;

    constructor(data?: ISpResultActivepotential) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.createmonth = data["createmonth"];
            this.totalcreatedvalue = data["totalcreatedvalue"];
            this.totalwonvalue = data["totalwonvalue"];
            this.optimalactive = data["optimalactive"];
        }
    }

    static fromJS(data: any): SpResultActivepotential {
        let result = new SpResultActivepotential();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createmonth"] = this.createmonth;
        data["totalcreatedvalue"] = this.totalcreatedvalue;
        data["totalwonvalue"] = this.totalwonvalue;
        data["optimalactive"] = this.optimalactive;
        return data; 
    }
}

export interface ISpResultActivepotential {
    createmonth: string;
    totalcreatedvalue: number;
    totalwonvalue: number;
    optimalactive: number;
}

export class GetMemberActivityOutput implements IGetMemberActivityOutput {
    memberActivities: MemberActivity[];

    constructor(data?: IGetMemberActivityOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["memberActivities"] && data["memberActivities"].constructor === Array) {
                this.memberActivities = [];
                for (let item of data["memberActivities"])
                    this.memberActivities.push(MemberActivity.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMemberActivityOutput {
        let result = new GetMemberActivityOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.memberActivities && this.memberActivities.constructor === Array) {
            data["memberActivities"] = [];
            for (let item of this.memberActivities)
                data["memberActivities"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetMemberActivityOutput {
    memberActivities: MemberActivity[];
}

export class MemberActivity implements IMemberActivity {
    name: string;
    earnings: string;
    cases: number;
    closed: number;
    rate: string;

    constructor(data?: IMemberActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.earnings = data["earnings"];
            this.cases = data["cases"];
            this.closed = data["closed"];
            this.rate = data["rate"];
        }
    }

    static fromJS(data: any): MemberActivity {
        let result = new MemberActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["earnings"] = this.earnings;
        data["cases"] = this.cases;
        data["closed"] = this.closed;
        data["rate"] = this.rate;
        return data; 
    }
}

export interface IMemberActivity {
    name: string;
    earnings: string;
    cases: number;
    closed: number;
    rate: string;
}

export class GetDashboardDataOutput implements IGetDashboardDataOutput {
    totalProfit: number;
    newFeedbacks: number;
    newOrders: number;
    newUsers: number;
    salesSummary: SalesSummaryData[];
    totalSales: number;
    revenue: number;
    expenses: number;
    growth: number;
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;
    networkLoad: number[];
    cpuLoad: number[];
    loadRate: number[];
    timeLineItems: TimeLineItem[];

    constructor(data?: IGetDashboardDataOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalProfit = data["totalProfit"];
            this.newFeedbacks = data["newFeedbacks"];
            this.newOrders = data["newOrders"];
            this.newUsers = data["newUsers"];
            if (data["salesSummary"] && data["salesSummary"].constructor === Array) {
                this.salesSummary = [];
                for (let item of data["salesSummary"])
                    this.salesSummary.push(SalesSummaryData.fromJS(item));
            }
            this.totalSales = data["totalSales"];
            this.revenue = data["revenue"];
            this.expenses = data["expenses"];
            this.growth = data["growth"];
            this.transactionPercent = data["transactionPercent"];
            this.newVisitPercent = data["newVisitPercent"];
            this.bouncePercent = data["bouncePercent"];
            if (data["networkLoad"] && data["networkLoad"].constructor === Array) {
                this.networkLoad = [];
                for (let item of data["networkLoad"])
                    this.networkLoad.push(item);
            }
            if (data["cpuLoad"] && data["cpuLoad"].constructor === Array) {
                this.cpuLoad = [];
                for (let item of data["cpuLoad"])
                    this.cpuLoad.push(item);
            }
            if (data["loadRate"] && data["loadRate"].constructor === Array) {
                this.loadRate = [];
                for (let item of data["loadRate"])
                    this.loadRate.push(item);
            }
            if (data["timeLineItems"] && data["timeLineItems"].constructor === Array) {
                this.timeLineItems = [];
                for (let item of data["timeLineItems"])
                    this.timeLineItems.push(TimeLineItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDashboardDataOutput {
        let result = new GetDashboardDataOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalProfit"] = this.totalProfit;
        data["newFeedbacks"] = this.newFeedbacks;
        data["newOrders"] = this.newOrders;
        data["newUsers"] = this.newUsers;
        if (this.salesSummary && this.salesSummary.constructor === Array) {
            data["salesSummary"] = [];
            for (let item of this.salesSummary)
                data["salesSummary"].push(item.toJSON());
        }
        data["totalSales"] = this.totalSales;
        data["revenue"] = this.revenue;
        data["expenses"] = this.expenses;
        data["growth"] = this.growth;
        data["transactionPercent"] = this.transactionPercent;
        data["newVisitPercent"] = this.newVisitPercent;
        data["bouncePercent"] = this.bouncePercent;
        if (this.networkLoad && this.networkLoad.constructor === Array) {
            data["networkLoad"] = [];
            for (let item of this.networkLoad)
                data["networkLoad"].push(item);
        }
        if (this.cpuLoad && this.cpuLoad.constructor === Array) {
            data["cpuLoad"] = [];
            for (let item of this.cpuLoad)
                data["cpuLoad"].push(item);
        }
        if (this.loadRate && this.loadRate.constructor === Array) {
            data["loadRate"] = [];
            for (let item of this.loadRate)
                data["loadRate"].push(item);
        }
        if (this.timeLineItems && this.timeLineItems.constructor === Array) {
            data["timeLineItems"] = [];
            for (let item of this.timeLineItems)
                data["timeLineItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDashboardDataOutput {
    totalProfit: number;
    newFeedbacks: number;
    newOrders: number;
    newUsers: number;
    salesSummary: SalesSummaryData[];
    totalSales: number;
    revenue: number;
    expenses: number;
    growth: number;
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;
    networkLoad: number[];
    cpuLoad: number[];
    loadRate: number[];
    timeLineItems: TimeLineItem[];
}

export class SalesSummaryData implements ISalesSummaryData {
    period: string;
    sales: number;
    profit: number;

    constructor(data?: ISalesSummaryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.period = data["period"];
            this.sales = data["sales"];
            this.profit = data["profit"];
        }
    }

    static fromJS(data: any): SalesSummaryData {
        let result = new SalesSummaryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["period"] = this.period;
        data["sales"] = this.sales;
        data["profit"] = this.profit;
        return data; 
    }
}

export interface ISalesSummaryData {
    period: string;
    sales: number;
    profit: number;
}

export class TimeLineItem implements ITimeLineItem {
    title: string;
    image: string;
    autherName: string;
    longDate: string;
    shortDate: string;
    titleDate: string;
    text: string;

    constructor(data?: ITimeLineItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"];
            this.image = data["image"];
            this.autherName = data["autherName"];
            this.longDate = data["longDate"];
            this.shortDate = data["shortDate"];
            this.titleDate = data["titleDate"];
            this.text = data["text"];
        }
    }

    static fromJS(data: any): TimeLineItem {
        let result = new TimeLineItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["image"] = this.image;
        data["autherName"] = this.autherName;
        data["longDate"] = this.longDate;
        data["shortDate"] = this.shortDate;
        data["titleDate"] = this.titleDate;
        data["text"] = this.text;
        return data; 
    }
}

export interface ITimeLineItem {
    title: string;
    image: string;
    autherName: string;
    longDate: string;
    shortDate: string;
    titleDate: string;
    text: string;
}

export class GetSalesSummaryOutput implements IGetSalesSummaryOutput {
    salesSummary: SalesSummaryData[];

    constructor(data?: IGetSalesSummaryOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["salesSummary"] && data["salesSummary"].constructor === Array) {
                this.salesSummary = [];
                for (let item of data["salesSummary"])
                    this.salesSummary.push(SalesSummaryData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetSalesSummaryOutput {
        let result = new GetSalesSummaryOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.salesSummary && this.salesSummary.constructor === Array) {
            data["salesSummary"] = [];
            for (let item of this.salesSummary)
                data["salesSummary"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetSalesSummaryOutput {
    salesSummary: SalesSummaryData[];
}

export class GetWorldMapOutput implements IGetWorldMapOutput {
    countries: WorldMapCountry[];

    constructor(data?: IGetWorldMapOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["countries"] && data["countries"].constructor === Array) {
                this.countries = [];
                for (let item of data["countries"])
                    this.countries.push(WorldMapCountry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetWorldMapOutput {
        let result = new GetWorldMapOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.countries && this.countries.constructor === Array) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetWorldMapOutput {
    countries: WorldMapCountry[];
}

export class WorldMapCountry implements IWorldMapCountry {
    countryName: string;
    color: number;

    constructor(data?: IWorldMapCountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.countryName = data["countryName"];
            this.color = data["color"];
        }
    }

    static fromJS(data: any): WorldMapCountry {
        let result = new WorldMapCountry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["countryName"] = this.countryName;
        data["color"] = this.color;
        return data; 
    }
}

export interface IWorldMapCountry {
    countryName: string;
    color: number;
}

export class GetServerStatsOutput implements IGetServerStatsOutput {
    networkLoad: number[];
    cpuLoad: number[];
    loadRate: number[];

    constructor(data?: IGetServerStatsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["networkLoad"] && data["networkLoad"].constructor === Array) {
                this.networkLoad = [];
                for (let item of data["networkLoad"])
                    this.networkLoad.push(item);
            }
            if (data["cpuLoad"] && data["cpuLoad"].constructor === Array) {
                this.cpuLoad = [];
                for (let item of data["cpuLoad"])
                    this.cpuLoad.push(item);
            }
            if (data["loadRate"] && data["loadRate"].constructor === Array) {
                this.loadRate = [];
                for (let item of data["loadRate"])
                    this.loadRate.push(item);
            }
        }
    }

    static fromJS(data: any): GetServerStatsOutput {
        let result = new GetServerStatsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.networkLoad && this.networkLoad.constructor === Array) {
            data["networkLoad"] = [];
            for (let item of this.networkLoad)
                data["networkLoad"].push(item);
        }
        if (this.cpuLoad && this.cpuLoad.constructor === Array) {
            data["cpuLoad"] = [];
            for (let item of this.cpuLoad)
                data["cpuLoad"].push(item);
        }
        if (this.loadRate && this.loadRate.constructor === Array) {
            data["loadRate"] = [];
            for (let item of this.loadRate)
                data["loadRate"].push(item);
        }
        return data; 
    }
}

export interface IGetServerStatsOutput {
    networkLoad: number[];
    cpuLoad: number[];
    loadRate: number[];
}

export class GetGeneralStatsOutput implements IGetGeneralStatsOutput {
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;

    constructor(data?: IGetGeneralStatsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transactionPercent = data["transactionPercent"];
            this.newVisitPercent = data["newVisitPercent"];
            this.bouncePercent = data["bouncePercent"];
        }
    }

    static fromJS(data: any): GetGeneralStatsOutput {
        let result = new GetGeneralStatsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionPercent"] = this.transactionPercent;
        data["newVisitPercent"] = this.newVisitPercent;
        data["bouncePercent"] = this.bouncePercent;
        return data; 
    }
}

export interface IGetGeneralStatsOutput {
    transactionPercent: number;
    newVisitPercent: number;
    bouncePercent: number;
}

export class ListResultDtoOfTenantTargetListDto implements IListResultDtoOfTenantTargetListDto {
    items: TenantTargetListDto[];

    constructor(data?: IListResultDtoOfTenantTargetListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TenantTargetListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfTenantTargetListDto {
        let result = new ListResultDtoOfTenantTargetListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfTenantTargetListDto {
    items: TenantTargetListDto[];
}

export class TenantTargetListDto implements ITenantTargetListDto {
    id: number;
    targetDate: moment.Moment;
    value: number;
    tenantId: number;

    constructor(data?: ITenantTargetListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.targetDate = data["targetDate"] ? moment(data["targetDate"].toString()) : <any>undefined;
            this.value = data["value"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): TenantTargetListDto {
        let result = new TenantTargetListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["targetDate"] = this.targetDate ? this.targetDate.toISOString() : <any>undefined;
        data["value"] = this.value;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ITenantTargetListDto {
    id: number;
    targetDate: moment.Moment;
    value: number;
    tenantId: number;
}

export class PagedResultDtoOfTenantTargetListDto implements IPagedResultDtoOfTenantTargetListDto {
    totalCount: number;
    items: TenantTargetListDto[];

    constructor(data?: IPagedResultDtoOfTenantTargetListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TenantTargetListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantTargetListDto {
        let result = new PagedResultDtoOfTenantTargetListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTenantTargetListDto {
    totalCount: number;
    items: TenantTargetListDto[];
}

export class GetTenantTarget implements IGetTenantTarget {
    tenantTarget: CreateTenantTargetInput;

    constructor(data?: IGetTenantTarget) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantTarget = data["tenantTarget"] ? CreateTenantTargetInput.fromJS(data["tenantTarget"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTenantTarget {
        let result = new GetTenantTarget();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantTarget"] = this.tenantTarget ? this.tenantTarget.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetTenantTarget {
    tenantTarget: CreateTenantTargetInput;
}

export class CreateTenantTargetInput implements ICreateTenantTargetInput {
    id: number;
    targetDate: moment.Moment;
    value: number;
    tenantId: number;

    constructor(data?: ICreateTenantTargetInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.targetDate = data["targetDate"] ? moment(data["targetDate"].toString()) : <any>undefined;
            this.value = data["value"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateTenantTargetInput {
        let result = new CreateTenantTargetInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["targetDate"] = this.targetDate ? this.targetDate.toISOString() : <any>undefined;
        data["value"] = this.value;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateTenantTargetInput {
    id: number;
    targetDate: moment.Moment;
    value: number;
    tenantId: number;
}

export class SliderDataList implements ISliderDataList {
    id: number;
    name: string;
    profilePicture: string;
    email: string;

    constructor(data?: ISliderDataList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.profilePicture = data["profilePicture"];
            this.email = data["email"];
        }
    }

    static fromJS(data: any): SliderDataList {
        let result = new SliderDataList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["profilePicture"] = this.profilePicture;
        data["email"] = this.email;
        return data; 
    }
}

export interface ISliderDataList {
    id: number;
    name: string;
    profilePicture: string;
    email: string;
}

export class SettingVatAmountInput implements ISettingVatAmountInput {
    id: number;
    vatAmount: number;
    tenantId: number;

    constructor(data?: ISettingVatAmountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vatAmount = data["vatAmount"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): SettingVatAmountInput {
        let result = new SettingVatAmountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vatAmount"] = this.vatAmount;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ISettingVatAmountInput {
    id: number;
    vatAmount: number;
    tenantId: number;
}

export class RegisterTenantInput implements IRegisterTenantInput {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
    captchaResponse: string;
    subscriptionStartType: RegisterTenantInputSubscriptionStartType;
    gateway: RegisterTenantInputGateway;
    editionId: number;
    paymentId: string;
    tenantTypeId: number;

    constructor(data?: IRegisterTenantInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.adminEmailAddress = data["adminEmailAddress"];
            this.adminPassword = data["adminPassword"];
            this.captchaResponse = data["captchaResponse"];
            this.subscriptionStartType = data["subscriptionStartType"];
            this.gateway = data["gateway"];
            this.editionId = data["editionId"];
            this.paymentId = data["paymentId"];
            this.tenantTypeId = data["tenantTypeId"];
        }
    }

    static fromJS(data: any): RegisterTenantInput {
        let result = new RegisterTenantInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["adminPassword"] = this.adminPassword;
        data["captchaResponse"] = this.captchaResponse;
        data["subscriptionStartType"] = this.subscriptionStartType;
        data["gateway"] = this.gateway;
        data["editionId"] = this.editionId;
        data["paymentId"] = this.paymentId;
        data["tenantTypeId"] = this.tenantTypeId;
        return data; 
    }
}

export interface IRegisterTenantInput {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
    captchaResponse: string;
    subscriptionStartType: RegisterTenantInputSubscriptionStartType;
    gateway: RegisterTenantInputGateway;
    editionId: number;
    paymentId: string;
    tenantTypeId: number;
}

export class RegisterTenantOutput implements IRegisterTenantOutput {
    tenantId: number;
    tenancyName: string;
    name: string;
    userName: string;
    emailAddress: string;
    isTenantActive: boolean;
    isActive: boolean;
    isEmailConfirmationRequired: boolean;

    constructor(data?: IRegisterTenantOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.isTenantActive = data["isTenantActive"];
            this.isActive = data["isActive"];
            this.isEmailConfirmationRequired = data["isEmailConfirmationRequired"];
        }
    }

    static fromJS(data: any): RegisterTenantOutput {
        let result = new RegisterTenantOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["isTenantActive"] = this.isTenantActive;
        data["isActive"] = this.isActive;
        data["isEmailConfirmationRequired"] = this.isEmailConfirmationRequired;
        return data; 
    }
}

export interface IRegisterTenantOutput {
    tenantId: number;
    tenancyName: string;
    name: string;
    userName: string;
    emailAddress: string;
    isTenantActive: boolean;
    isActive: boolean;
    isEmailConfirmationRequired: boolean;
}

export class EditionsSelectOutput implements IEditionsSelectOutput {
    allFeatures: FlatFeatureSelectDto[];
    editionsWithFeatures: EditionWithFeaturesDto[];
    tenantEditionId: number;

    constructor(data?: IEditionsSelectOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["allFeatures"] && data["allFeatures"].constructor === Array) {
                this.allFeatures = [];
                for (let item of data["allFeatures"])
                    this.allFeatures.push(FlatFeatureSelectDto.fromJS(item));
            }
            if (data["editionsWithFeatures"] && data["editionsWithFeatures"].constructor === Array) {
                this.editionsWithFeatures = [];
                for (let item of data["editionsWithFeatures"])
                    this.editionsWithFeatures.push(EditionWithFeaturesDto.fromJS(item));
            }
            this.tenantEditionId = data["tenantEditionId"];
        }
    }

    static fromJS(data: any): EditionsSelectOutput {
        let result = new EditionsSelectOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.allFeatures && this.allFeatures.constructor === Array) {
            data["allFeatures"] = [];
            for (let item of this.allFeatures)
                data["allFeatures"].push(item.toJSON());
        }
        if (this.editionsWithFeatures && this.editionsWithFeatures.constructor === Array) {
            data["editionsWithFeatures"] = [];
            for (let item of this.editionsWithFeatures)
                data["editionsWithFeatures"].push(item.toJSON());
        }
        data["tenantEditionId"] = this.tenantEditionId;
        return data; 
    }
}

export interface IEditionsSelectOutput {
    allFeatures: FlatFeatureSelectDto[];
    editionsWithFeatures: EditionWithFeaturesDto[];
    tenantEditionId: number;
}

export class FlatFeatureSelectDto implements IFlatFeatureSelectDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: IInputType;
    textHtmlColor: string;

    constructor(data?: IFlatFeatureSelectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.defaultValue = data["defaultValue"];
            this.inputType = data["inputType"] ? IInputType.fromJS(data["inputType"]) : <any>undefined;
            this.textHtmlColor = data["textHtmlColor"];
        }
    }

    static fromJS(data: any): FlatFeatureSelectDto {
        let result = new FlatFeatureSelectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : <any>undefined;
        data["textHtmlColor"] = this.textHtmlColor;
        return data; 
    }
}

export interface IFlatFeatureSelectDto {
    parentName: string;
    name: string;
    displayName: string;
    description: string;
    defaultValue: string;
    inputType: IInputType;
    textHtmlColor: string;
}

export class EditionWithFeaturesDto implements IEditionWithFeaturesDto {
    edition: EditionSelectDto;
    featureValues: NameValueDto[];

    constructor(data?: IEditionWithFeaturesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.edition = data["edition"] ? EditionSelectDto.fromJS(data["edition"]) : <any>undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (let item of data["featureValues"])
                    this.featureValues.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EditionWithFeaturesDto {
        let result = new EditionWithFeaturesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : <any>undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (let item of this.featureValues)
                data["featureValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEditionWithFeaturesDto {
    edition: EditionSelectDto;
    featureValues: NameValueDto[];
}

export class IInputType implements IIInputType {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;

    constructor(data?: IIInputType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (let key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key];
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IInputType {
        let result = new IInputType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIInputType {
    name: string;
    attributes: { [key: string] : any; };
    validator: IValueValidator;
}

export class EmailCheck implements IEmailCheck {
    email: string;

    constructor(data?: IEmailCheck) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
        }
    }

    static fromJS(data: any): EmailCheck {
        let result = new EmailCheck();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data; 
    }
}

export interface IEmailCheck {
    email: string;
}

export class CheckEmailValid implements ICheckEmailValid {
    email: string;

    constructor(data?: ICheckEmailValid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
        }
    }

    static fromJS(data: any): CheckEmailValid {
        let result = new CheckEmailValid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data; 
    }
}

export interface ICheckEmailValid {
    email: string;
}

export class TenantSettingsEditDto implements ITenantSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: TenantUserManagementSettingsEditDto = new TenantUserManagementSettingsEditDto();
    email: EmailSettingsEditDto;
    ldap: LdapSettingsEditDto;
    security: SecuritySettingsEditDto = new SecuritySettingsEditDto();

    constructor(data?: ITenantSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : <any>undefined;
            this.userManagement = data["userManagement"] ? TenantUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new TenantUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : <any>undefined;
            this.ldap = data["ldap"] ? LdapSettingsEditDto.fromJS(data["ldap"]) : <any>undefined;
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
        }
    }

    static fromJS(data: any): TenantSettingsEditDto {
        let result = new TenantSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : <any>undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : <any>undefined;
        data["email"] = this.email ? this.email.toJSON() : <any>undefined;
        data["ldap"] = this.ldap ? this.ldap.toJSON() : <any>undefined;
        data["security"] = this.security ? this.security.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITenantSettingsEditDto {
    general: GeneralSettingsEditDto;
    userManagement: TenantUserManagementSettingsEditDto;
    email: EmailSettingsEditDto;
    ldap: LdapSettingsEditDto;
    security: SecuritySettingsEditDto;
}

export class TenantUserManagementSettingsEditDto implements ITenantUserManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredUserActiveByDefault: boolean;
    isEmailConfirmationRequiredForLogin: boolean;
    useCaptchaOnRegistration: boolean;

    constructor(data?: ITenantUserManagementSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.allowSelfRegistration = data["allowSelfRegistration"];
            this.isNewRegisteredUserActiveByDefault = data["isNewRegisteredUserActiveByDefault"];
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"];
            this.useCaptchaOnRegistration = data["useCaptchaOnRegistration"];
        }
    }

    static fromJS(data: any): TenantUserManagementSettingsEditDto {
        let result = new TenantUserManagementSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredUserActiveByDefault"] = this.isNewRegisteredUserActiveByDefault;
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["useCaptchaOnRegistration"] = this.useCaptchaOnRegistration;
        return data; 
    }
}

export interface ITenantUserManagementSettingsEditDto {
    allowSelfRegistration: boolean;
    isNewRegisteredUserActiveByDefault: boolean;
    isEmailConfirmationRequiredForLogin: boolean;
    useCaptchaOnRegistration: boolean;
}

export class LdapSettingsEditDto implements ILdapSettingsEditDto {
    isModuleEnabled: boolean;
    isEnabled: boolean;
    domain: string;
    userName: string;
    password: string;

    constructor(data?: ILdapSettingsEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isModuleEnabled = data["isModuleEnabled"];
            this.isEnabled = data["isEnabled"];
            this.domain = data["domain"];
            this.userName = data["userName"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LdapSettingsEditDto {
        let result = new LdapSettingsEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isModuleEnabled"] = this.isModuleEnabled;
        data["isEnabled"] = this.isEnabled;
        data["domain"] = this.domain;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILdapSettingsEditDto {
    isModuleEnabled: boolean;
    isEnabled: boolean;
    domain: string;
    userName: string;
    password: string;
}

export class ListResultDtoOfNameValueDto implements IListResultDtoOfNameValueDto {
    items: NameValueDto[];

    constructor(data?: IListResultDtoOfNameValueDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(NameValueDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfNameValueDto {
        let result = new ListResultDtoOfNameValueDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfNameValueDto {
    items: NameValueDto[];
}

export class ListResultDtoOfTitleOfQuotationList implements IListResultDtoOfTitleOfQuotationList {
    items: TitleOfQuotationList[];

    constructor(data?: IListResultDtoOfTitleOfQuotationList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TitleOfQuotationList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfTitleOfQuotationList {
        let result = new ListResultDtoOfTitleOfQuotationList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfTitleOfQuotationList {
    items: TitleOfQuotationList[];
}

export class TitleOfQuotationList implements ITitleOfQuotationList {
    id: number;
    code: string;
    name: string;
    tenantId: number;

    constructor(data?: ITitleOfQuotationList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): TitleOfQuotationList {
        let result = new TitleOfQuotationList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ITitleOfQuotationList {
    id: number;
    code: string;
    name: string;
    tenantId: number;
}

export class GetTitleOfQuotation implements IGetTitleOfQuotation {
    title: TitleOfQuotationInput;

    constructor(data?: IGetTitleOfQuotation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"] ? TitleOfQuotationInput.fromJS(data["title"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTitleOfQuotation {
        let result = new GetTitleOfQuotation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title ? this.title.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetTitleOfQuotation {
    title: TitleOfQuotationInput;
}

export class TitleOfQuotationInput implements ITitleOfQuotationInput {
    id: number;
    code: string;
    name: string;
    tenantId: number;

    constructor(data?: ITitleOfQuotationInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): TitleOfQuotationInput {
        let result = new TitleOfQuotationInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ITitleOfQuotationInput {
    id: number;
    code: string;
    name: string;
    tenantId: number;
}

export class AuthenticateModel implements IAuthenticateModel {
    userNameOrEmailAddress: string;
    password: string;
    twoFactorVerificationCode: string;
    rememberClient: boolean;
    twoFactorRememberClientToken: string;
    singleSignIn: boolean;
    returnUrl: string;

    constructor(data?: IAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"];
            this.password = data["password"];
            this.twoFactorVerificationCode = data["twoFactorVerificationCode"];
            this.rememberClient = data["rememberClient"];
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"];
            this.singleSignIn = data["singleSignIn"];
            this.returnUrl = data["returnUrl"];
        }
    }

    static fromJS(data: any): AuthenticateModel {
        let result = new AuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["password"] = this.password;
        data["twoFactorVerificationCode"] = this.twoFactorVerificationCode;
        data["rememberClient"] = this.rememberClient;
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken;
        data["singleSignIn"] = this.singleSignIn;
        data["returnUrl"] = this.returnUrl;
        return data; 
    }
}

export interface IAuthenticateModel {
    userNameOrEmailAddress: string;
    password: string;
    twoFactorVerificationCode: string;
    rememberClient: boolean;
    twoFactorRememberClientToken: string;
    singleSignIn: boolean;
    returnUrl: string;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    shouldResetPassword: boolean;
    passwordResetCode: string;
    userId: number;
    requiresTwoFactorVerification: boolean;
    twoFactorAuthProviders: string[];
    twoFactorRememberClientToken: string;
    returnUrl: string;
    rootId: number;

    constructor(data?: IAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.shouldResetPassword = data["shouldResetPassword"];
            this.passwordResetCode = data["passwordResetCode"];
            this.userId = data["userId"];
            this.requiresTwoFactorVerification = data["requiresTwoFactorVerification"];
            if (data["twoFactorAuthProviders"] && data["twoFactorAuthProviders"].constructor === Array) {
                this.twoFactorAuthProviders = [];
                for (let item of data["twoFactorAuthProviders"])
                    this.twoFactorAuthProviders.push(item);
            }
            this.twoFactorRememberClientToken = data["twoFactorRememberClientToken"];
            this.returnUrl = data["returnUrl"];
            this.rootId = data["rootId"];
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        let result = new AuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["shouldResetPassword"] = this.shouldResetPassword;
        data["passwordResetCode"] = this.passwordResetCode;
        data["userId"] = this.userId;
        data["requiresTwoFactorVerification"] = this.requiresTwoFactorVerification;
        if (this.twoFactorAuthProviders && this.twoFactorAuthProviders.constructor === Array) {
            data["twoFactorAuthProviders"] = [];
            for (let item of this.twoFactorAuthProviders)
                data["twoFactorAuthProviders"].push(item);
        }
        data["twoFactorRememberClientToken"] = this.twoFactorRememberClientToken;
        data["returnUrl"] = this.returnUrl;
        data["rootId"] = this.rootId;
        return data; 
    }
}

export interface IAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    shouldResetPassword: boolean;
    passwordResetCode: string;
    userId: number;
    requiresTwoFactorVerification: boolean;
    twoFactorAuthProviders: string[];
    twoFactorRememberClientToken: string;
    returnUrl: string;
    rootId: number;
}

export class AuthenticateTenentResultModel implements IAuthenticateTenentResultModel {
    userId: number;
    tenentId: number;
    tenentName: string;

    constructor(data?: IAuthenticateTenentResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenentId = data["tenentId"];
            this.tenentName = data["tenentName"];
        }
    }

    static fromJS(data: any): AuthenticateTenentResultModel {
        let result = new AuthenticateTenentResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenentId"] = this.tenentId;
        data["tenentName"] = this.tenentName;
        return data; 
    }
}

export interface IAuthenticateTenentResultModel {
    userId: number;
    tenentId: number;
    tenentName: string;
}

export class SendTwoFactorAuthCodeModel implements ISendTwoFactorAuthCodeModel {
    userId: number;
    provider: string;

    constructor(data?: ISendTwoFactorAuthCodeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.provider = data["provider"];
        }
    }

    static fromJS(data: any): SendTwoFactorAuthCodeModel {
        let result = new SendTwoFactorAuthCodeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["provider"] = this.provider;
        return data; 
    }
}

export interface ISendTwoFactorAuthCodeModel {
    userId: number;
    provider: string;
}

export class ImpersonatedAuthenticateResultModel implements IImpersonatedAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;

    constructor(data?: IImpersonatedAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): ImpersonatedAuthenticateResultModel {
        let result = new ImpersonatedAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

export interface IImpersonatedAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
}

export class SwitchedAccountAuthenticateResultModel implements ISwitchedAccountAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;

    constructor(data?: ISwitchedAccountAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): SwitchedAccountAuthenticateResultModel {
        let result = new SwitchedAccountAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

export interface ISwitchedAccountAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
}

export class ExternalLoginProviderInfoModel implements IExternalLoginProviderInfoModel {
    name: string;
    clientId: string;

    constructor(data?: IExternalLoginProviderInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.clientId = data["clientId"];
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        let result = new ExternalLoginProviderInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["clientId"] = this.clientId;
        return data; 
    }
}

export interface IExternalLoginProviderInfoModel {
    name: string;
    clientId: string;
}

export class ExternalAuthenticateModel implements IExternalAuthenticateModel {
    authProvider: string;
    providerKey: string;
    providerAccessCode: string;
    returnUrl: string;
    singleSignIn: boolean;

    constructor(data?: IExternalAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authProvider = data["authProvider"];
            this.providerKey = data["providerKey"];
            this.providerAccessCode = data["providerAccessCode"];
            this.returnUrl = data["returnUrl"];
            this.singleSignIn = data["singleSignIn"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        let result = new ExternalAuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        data["providerKey"] = this.providerKey;
        data["providerAccessCode"] = this.providerAccessCode;
        data["returnUrl"] = this.returnUrl;
        data["singleSignIn"] = this.singleSignIn;
        return data; 
    }
}

export interface IExternalAuthenticateModel {
    authProvider: string;
    providerKey: string;
    providerAccessCode: string;
    returnUrl: string;
    singleSignIn: boolean;
}

export class ExternalAuthenticateResultModel implements IExternalAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    waitingForActivation: boolean;
    returnUrl: string;

    constructor(data?: IExternalAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.waitingForActivation = data["waitingForActivation"];
            this.returnUrl = data["returnUrl"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        let result = new ExternalAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["waitingForActivation"] = this.waitingForActivation;
        data["returnUrl"] = this.returnUrl;
        return data; 
    }
}

export interface IExternalAuthenticateResultModel {
    accessToken: string;
    encryptedAccessToken: string;
    expireInSeconds: number;
    waitingForActivation: boolean;
    returnUrl: string;
}

export class PagedResultDtoOfUserListDto implements IPagedResultDtoOfUserListDto {
    totalCount: number;
    items: UserListDto[];

    constructor(data?: IPagedResultDtoOfUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserListDto {
        let result = new PagedResultDtoOfUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfUserListDto {
    totalCount: number;
    items: UserListDto[];
}

export class UserListDto implements IUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    profilePictureId: string;
    isEmailConfirmed: boolean;
    roles: UserListRoleDto[];
    lastLoginTime: moment.Moment;
    isActive: boolean;
    creationTime: moment.Moment;
    rootId: number;
    id: number;

    constructor(data?: IUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.profilePictureId = data["profilePictureId"];
            this.isEmailConfirmed = data["isEmailConfirmed"];
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserListRoleDto.fromJS(item));
            }
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.rootId = data["rootId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserListDto {
        let result = new UserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["profilePictureId"] = this.profilePictureId;
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["rootId"] = this.rootId;
        data["id"] = this.id;
        return data; 
    }
}

export interface IUserListDto {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    profilePictureId: string;
    isEmailConfirmed: boolean;
    roles: UserListRoleDto[];
    lastLoginTime: moment.Moment;
    isActive: boolean;
    creationTime: moment.Moment;
    rootId: number;
    id: number;
}

export class UserListRoleDto implements IUserListRoleDto {
    roleId: number;
    roleName: string;

    constructor(data?: IUserListRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
        }
    }

    static fromJS(data: any): UserListRoleDto {
        let result = new UserListRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        return data; 
    }
}

export interface IUserListRoleDto {
    roleId: number;
    roleName: string;
}

export class GetUserForEditOutput implements IGetUserForEditOutput {
    profilePictureId: string;
    user: UserEditDto;
    roles: UserRoleDto[];
    root: UserRootDto;
    organizationUnits: OrganizationUnitDto[];

    constructor(data?: IGetUserForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.profilePictureId = data["profilePictureId"];
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : <any>undefined;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(UserRoleDto.fromJS(item));
            }
            this.root = data["root"] ? UserRootDto.fromJS(data["root"]) : <any>undefined;
            if (data["organizationUnits"] && data["organizationUnits"].constructor === Array) {
                this.organizationUnits = [];
                for (let item of data["organizationUnits"])
                    this.organizationUnits.push(OrganizationUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserForEditOutput {
        let result = new GetUserForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePictureId"] = this.profilePictureId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["root"] = this.root ? this.root.toJSON() : <any>undefined;
        if (this.organizationUnits && this.organizationUnits.constructor === Array) {
            data["organizationUnits"] = [];
            for (let item of this.organizationUnits)
                data["organizationUnits"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetUserForEditOutput {
    profilePictureId: string;
    user: UserEditDto;
    roles: UserRoleDto[];
    root: UserRootDto;
    organizationUnits: OrganizationUnitDto[];
}

export class UserEditDto implements IUserEditDto {
    id: number;
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    password: string;
    isActive: boolean;
    shouldChangePasswordOnNextLogin: boolean;
    isTwoFactorEnabled: boolean;
    isLockoutEnabled: boolean;
    rootId: number;

    constructor(data?: IUserEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.password = data["password"];
            this.isActive = data["isActive"];
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"];
            this.isTwoFactorEnabled = data["isTwoFactorEnabled"];
            this.isLockoutEnabled = data["isLockoutEnabled"];
            this.rootId = data["rootId"];
        }
    }

    static fromJS(data: any): UserEditDto {
        let result = new UserEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["password"] = this.password;
        data["isActive"] = this.isActive;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        data["isLockoutEnabled"] = this.isLockoutEnabled;
        data["rootId"] = this.rootId;
        return data; 
    }
}

export interface IUserEditDto {
    id: number;
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    phoneNumber: string;
    password: string;
    isActive: boolean;
    shouldChangePasswordOnNextLogin: boolean;
    isTwoFactorEnabled: boolean;
    isLockoutEnabled: boolean;
    rootId: number;
}

export class UserRoleDto implements IUserRoleDto {
    roleId: number;
    roleName: string;
    roleDisplayName: string;
    isAssigned: boolean;

    constructor(data?: IUserRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
            this.roleDisplayName = data["roleDisplayName"];
            this.isAssigned = data["isAssigned"];
        }
    }

    static fromJS(data: any): UserRoleDto {
        let result = new UserRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        data["roleDisplayName"] = this.roleDisplayName;
        data["isAssigned"] = this.isAssigned;
        return data; 
    }
}

export interface IUserRoleDto {
    roleId: number;
    roleName: string;
    roleDisplayName: string;
    isAssigned: boolean;
}

export class UserRootDto implements IUserRootDto {
    id: number;
    name: string;

    constructor(data?: IUserRootDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): UserRootDto {
        let result = new UserRootDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IUserRootDto {
    id: number;
    name: string;
}

export class GetUserPermissionsForEditOutput implements IGetUserPermissionsForEditOutput {
    permissions: FlatPermissionDto[];
    grantedPermissionNames: string[];

    constructor(data?: IGetUserPermissionsForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetUserPermissionsForEditOutput {
        let result = new GetUserPermissionsForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IGetUserPermissionsForEditOutput {
    permissions: FlatPermissionDto[];
    grantedPermissionNames: string[];
}

export class EntityDtoOfInt64 implements IEntityDtoOfInt64 {
    id: number;

    constructor(data?: IEntityDtoOfInt64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfInt64 {
        let result = new EntityDtoOfInt64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IEntityDtoOfInt64 {
    id: number;
}

export class UpdateUserPermissionsInput implements IUpdateUserPermissionsInput {
    id: number;
    grantedPermissionNames: string[] = [];

    constructor(data?: IUpdateUserPermissionsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateUserPermissionsInput {
        let result = new UpdateUserPermissionsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export interface IUpdateUserPermissionsInput {
    id: number;
    grantedPermissionNames: string[];
}

export class CreateOrUpdateUserInput implements ICreateOrUpdateUserInput {
    user: UserEditDto = new UserEditDto();
    assignedRoleNames: string[] = [];
    sendActivationEmail: boolean;
    setRandomPassword: boolean;

    constructor(data?: ICreateOrUpdateUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : new UserEditDto();
            if (data["assignedRoleNames"] && data["assignedRoleNames"].constructor === Array) {
                this.assignedRoleNames = [];
                for (let item of data["assignedRoleNames"])
                    this.assignedRoleNames.push(item);
            }
            this.sendActivationEmail = data["sendActivationEmail"];
            this.setRandomPassword = data["setRandomPassword"];
        }
    }

    static fromJS(data: any): CreateOrUpdateUserInput {
        let result = new CreateOrUpdateUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.assignedRoleNames && this.assignedRoleNames.constructor === Array) {
            data["assignedRoleNames"] = [];
            for (let item of this.assignedRoleNames)
                data["assignedRoleNames"].push(item);
        }
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["setRandomPassword"] = this.setRandomPassword;
        return data; 
    }
}

export interface ICreateOrUpdateUserInput {
    user: UserEditDto;
    assignedRoleNames: string[];
    sendActivationEmail: boolean;
    setRandomPassword: boolean;
}

export class ListResultDtoOfTargetListDto implements IListResultDtoOfTargetListDto {
    items: TargetListDto[];

    constructor(data?: IListResultDtoOfTargetListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TargetListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfTargetListDto {
        let result = new ListResultDtoOfTargetListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfTargetListDto {
    items: TargetListDto[];
}

export class TargetListDto implements ITargetListDto {
    id: number;
    userId: number;
    userName: string;
    targetAmount: number;
    targetTypeId: number;
    targetTypeName: string;
    validityDate: moment.Moment;
    tenantId: number;
    total: number;

    constructor(data?: ITargetListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userId = data["userId"];
            this.userName = data["userName"];
            this.targetAmount = data["targetAmount"];
            this.targetTypeId = data["targetTypeId"];
            this.targetTypeName = data["targetTypeName"];
            this.validityDate = data["validityDate"] ? moment(data["validityDate"].toString()) : <any>undefined;
            this.tenantId = data["tenantId"];
            this.total = data["total"];
        }
    }

    static fromJS(data: any): TargetListDto {
        let result = new TargetListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["targetAmount"] = this.targetAmount;
        data["targetTypeId"] = this.targetTypeId;
        data["targetTypeName"] = this.targetTypeName;
        data["validityDate"] = this.validityDate ? this.validityDate.toISOString() : <any>undefined;
        data["tenantId"] = this.tenantId;
        data["total"] = this.total;
        return data; 
    }
}

export interface ITargetListDto {
    id: number;
    userId: number;
    userName: string;
    targetAmount: number;
    targetTypeId: number;
    targetTypeName: string;
    validityDate: moment.Moment;
    tenantId: number;
    total: number;
}

export class PagedResultDtoOfTargetListDto implements IPagedResultDtoOfTargetListDto {
    totalCount: number;
    items: TargetListDto[];

    constructor(data?: IPagedResultDtoOfTargetListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(TargetListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTargetListDto {
        let result = new PagedResultDtoOfTargetListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfTargetListDto {
    totalCount: number;
    items: TargetListDto[];
}

export class GetTarget implements IGetTarget {
    targets: CreateTargetInput;
    targetDetail: GetAvailableTarget;

    constructor(data?: IGetTarget) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.targets = data["targets"] ? CreateTargetInput.fromJS(data["targets"]) : <any>undefined;
            this.targetDetail = data["targetDetail"] ? GetAvailableTarget.fromJS(data["targetDetail"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTarget {
        let result = new GetTarget();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targets"] = this.targets ? this.targets.toJSON() : <any>undefined;
        data["targetDetail"] = this.targetDetail ? this.targetDetail.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetTarget {
    targets: CreateTargetInput;
    targetDetail: GetAvailableTarget;
}

export class CreateTargetInput implements ICreateTargetInput {
    id: number;
    userId: number;
    targetAmount: number;
    targetTypeId: number;
    validityDate: moment.Moment;
    tenantId: number;
    total: number;

    constructor(data?: ICreateTargetInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userId = data["userId"];
            this.targetAmount = data["targetAmount"];
            this.targetTypeId = data["targetTypeId"];
            this.validityDate = data["validityDate"] ? moment(data["validityDate"].toString()) : <any>undefined;
            this.tenantId = data["tenantId"];
            this.total = data["total"];
        }
    }

    static fromJS(data: any): CreateTargetInput {
        let result = new CreateTargetInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["targetAmount"] = this.targetAmount;
        data["targetTypeId"] = this.targetTypeId;
        data["validityDate"] = this.validityDate ? this.validityDate.toISOString() : <any>undefined;
        data["tenantId"] = this.tenantId;
        data["total"] = this.total;
        return data; 
    }
}

export interface ICreateTargetInput {
    id: number;
    userId: number;
    targetAmount: number;
    targetTypeId: number;
    validityDate: moment.Moment;
    tenantId: number;
    total: number;
}

export class GetAvailableTarget implements IGetAvailableTarget {
    totaltarget: number;
    availableTarget: number;

    constructor(data?: IGetAvailableTarget) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totaltarget = data["totaltarget"];
            this.availableTarget = data["availableTarget"];
        }
    }

    static fromJS(data: any): GetAvailableTarget {
        let result = new GetAvailableTarget();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totaltarget"] = this.totaltarget;
        data["availableTarget"] = this.availableTarget;
        return data; 
    }
}

export interface IGetAvailableTarget {
    totaltarget: number;
    availableTarget: number;
}

export class LinkToUserInput implements ILinkToUserInput {
    tenancyName: string;
    usernameOrEmailAddress: string;
    password: string;

    constructor(data?: ILinkToUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.usernameOrEmailAddress = data["usernameOrEmailAddress"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LinkToUserInput {
        let result = new LinkToUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["usernameOrEmailAddress"] = this.usernameOrEmailAddress;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILinkToUserInput {
    tenancyName: string;
    usernameOrEmailAddress: string;
    password: string;
}

export class PagedResultDtoOfLinkedUserDto implements IPagedResultDtoOfLinkedUserDto {
    totalCount: number;
    items: LinkedUserDto[];

    constructor(data?: IPagedResultDtoOfLinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLinkedUserDto {
        let result = new PagedResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfLinkedUserDto {
    totalCount: number;
    items: LinkedUserDto[];
}

export class LinkedUserDto implements ILinkedUserDto {
    tenantId: number;
    tenancyName: string;
    username: string;
    lastLoginTime: moment.Moment;
    id: number;

    constructor(data?: ILinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.tenancyName = data["tenancyName"];
            this.username = data["username"];
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): LinkedUserDto {
        let result = new LinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["username"] = this.username;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ILinkedUserDto {
    tenantId: number;
    tenancyName: string;
    username: string;
    lastLoginTime: moment.Moment;
    id: number;
}

export class ListResultDtoOfLinkedUserDto implements IListResultDtoOfLinkedUserDto {
    items: LinkedUserDto[];

    constructor(data?: IListResultDtoOfLinkedUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(LinkedUserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfLinkedUserDto {
        let result = new ListResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfLinkedUserDto {
    items: LinkedUserDto[];
}

export class UnlinkUserInput implements IUnlinkUserInput {
    tenantId: number;
    userId: number;

    constructor(data?: IUnlinkUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): UnlinkUserInput {
        let result = new UnlinkUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IUnlinkUserInput {
    tenantId: number;
    userId: number;
}

export class ListResultDtoOfUserLoginAttemptDto implements IListResultDtoOfUserLoginAttemptDto {
    items: UserLoginAttemptDto[];

    constructor(data?: IListResultDtoOfUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(UserLoginAttemptDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfUserLoginAttemptDto {
        let result = new ListResultDtoOfUserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfUserLoginAttemptDto {
    items: UserLoginAttemptDto[];
}

export class UserLoginAttemptDto implements IUserLoginAttemptDto {
    tenancyName: string;
    userNameOrEmail: string;
    clientIpAddress: string;
    clientName: string;
    browserInfo: string;
    result: string;
    creationTime: moment.Moment;

    constructor(data?: IUserLoginAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.userNameOrEmail = data["userNameOrEmail"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.result = data["result"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserLoginAttemptDto {
        let result = new UserLoginAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userNameOrEmail"] = this.userNameOrEmail;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["result"] = this.result;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUserLoginAttemptDto {
    tenancyName: string;
    userNameOrEmail: string;
    clientIpAddress: string;
    clientName: string;
    browserInfo: string;
    result: string;
    creationTime: moment.Moment;
}

export class ListResultDtoOfValidityList implements IListResultDtoOfValidityList {
    items: ValidityList[];

    constructor(data?: IListResultDtoOfValidityList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(ValidityList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfValidityList {
        let result = new ListResultDtoOfValidityList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfValidityList {
    items: ValidityList[];
}

export class ValidityList implements IValidityList {
    id: number;
    validityCode: string;
    validityName: string;
    tenantId: number;

    constructor(data?: IValidityList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.validityCode = data["validityCode"];
            this.validityName = data["validityName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): ValidityList {
        let result = new ValidityList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["validityCode"] = this.validityCode;
        data["validityName"] = this.validityName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IValidityList {
    id: number;
    validityCode: string;
    validityName: string;
    tenantId: number;
}

export class GetValidity implements IGetValidity {
    validity: CreateValidityInput;

    constructor(data?: IGetValidity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.validity = data["validity"] ? CreateValidityInput.fromJS(data["validity"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetValidity {
        let result = new GetValidity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["validity"] = this.validity ? this.validity.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetValidity {
    validity: CreateValidityInput;
}

export class CreateValidityInput implements ICreateValidityInput {
    id: number;
    validityCode: string;
    validityName: string;
    tenantId: number;

    constructor(data?: ICreateValidityInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.validityCode = data["validityCode"];
            this.validityName = data["validityName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateValidityInput {
        let result = new CreateValidityInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["validityCode"] = this.validityCode;
        data["validityName"] = this.validityName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateValidityInput {
    id: number;
    validityCode: string;
    validityName: string;
    tenantId: number;
}

export class ListResultDtoOfWarrantyListDto implements IListResultDtoOfWarrantyListDto {
    items: WarrantyListDto[];

    constructor(data?: IListResultDtoOfWarrantyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(WarrantyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfWarrantyListDto {
        let result = new ListResultDtoOfWarrantyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IListResultDtoOfWarrantyListDto {
    items: WarrantyListDto[];
}

export class WarrantyListDto implements IWarrantyListDto {
    id: number;
    warrantyCode: string;
    warrantyName: string;
    tenantId: number;

    constructor(data?: IWarrantyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.warrantyCode = data["warrantyCode"];
            this.warrantyName = data["warrantyName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): WarrantyListDto {
        let result = new WarrantyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["warrantyCode"] = this.warrantyCode;
        data["warrantyName"] = this.warrantyName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface IWarrantyListDto {
    id: number;
    warrantyCode: string;
    warrantyName: string;
    tenantId: number;
}

export class GetWarranty implements IGetWarranty {
    warranty: CreateWarrantyInput;

    constructor(data?: IGetWarranty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.warranty = data["warranty"] ? CreateWarrantyInput.fromJS(data["warranty"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetWarranty {
        let result = new GetWarranty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["warranty"] = this.warranty ? this.warranty.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetWarranty {
    warranty: CreateWarrantyInput;
}

export class CreateWarrantyInput implements ICreateWarrantyInput {
    id: number;
    warrantyCode: string;
    warrantyName: string;
    tenantId: number;

    constructor(data?: ICreateWarrantyInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.warrantyCode = data["warrantyCode"];
            this.warrantyName = data["warrantyName"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): CreateWarrantyInput {
        let result = new CreateWarrantyInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["warrantyCode"] = this.warrantyCode;
        data["warrantyName"] = this.warrantyName;
        data["tenantId"] = this.tenantId;
        return data; 
    }
}

export interface ICreateWarrantyInput {
    id: number;
    warrantyCode: string;
    warrantyName: string;
    tenantId: number;
}

export class GetLatestWebLogsOutput implements IGetLatestWebLogsOutput {
    latestWebLogLines: string[];

    constructor(data?: IGetLatestWebLogsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["latestWebLogLines"] && data["latestWebLogLines"].constructor === Array) {
                this.latestWebLogLines = [];
                for (let item of data["latestWebLogLines"])
                    this.latestWebLogLines.push(item);
            }
        }
    }

    static fromJS(data: any): GetLatestWebLogsOutput {
        let result = new GetLatestWebLogsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.latestWebLogLines && this.latestWebLogLines.constructor === Array) {
            data["latestWebLogLines"] = [];
            for (let item of this.latestWebLogLines)
                data["latestWebLogLines"].push(item);
        }
        return data; 
    }
}

export interface IGetLatestWebLogsOutput {
    latestWebLogLines: string[];
}

export enum IncomeStatisticsDateInterval {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum IncomeStatisticsDateInterval2 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum State {
    _0 = 0, 
    _1 = 1, 
}

export enum SalesSummaryDatePeriod {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum SalesSummaryDatePeriod2 {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum DefaultTimezoneScope {
    _1 = 1, 
    _2 = 2, 
    _4 = 4, 
    _7 = 7, 
}

export enum IsTenantAvailableOutputState {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum FriendDtoState {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoSide {
    _1 = 1, 
    _2 = 2, 
}

export enum ChatMessageDtoReadState {
    _1 = 1, 
    _2 = 2, 
}

export enum UserNotificationState {
    _0 = 0, 
    _1 = 1, 
}

export enum TenantNotificationSeverity {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export class AdditionalData implements IAdditionalData {
    paypal: { [key: string] : string; };

    constructor(data?: IAdditionalData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Paypal"]) {
                this.paypal = {};
                for (let key in data["Paypal"]) {
                    if (data["Paypal"].hasOwnProperty(key))
                        this.paypal[key] = data["Paypal"][key];
                }
            }
        }
    }

    static fromJS(data: any): AdditionalData {
        let result = new AdditionalData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.paypal) {
            data["Paypal"] = {};
            for (let key in this.paypal) {
                if (this.paypal.hasOwnProperty(key))
                    data["Paypal"][key] = this.paypal[key];
            }
        }
        return data; 
    }
}

export interface IAdditionalData {
    paypal: { [key: string] : string; };
}

export enum CreatePaymentDtoEditionPaymentType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum CreatePaymentDtoPaymentPeriodType {
    _30 = 30, 
    _365 = 365, 
}

export enum CreatePaymentDtoSubscriptionPaymentGatewayType {
    _1 = 1, 
}

export enum ExecutePaymentDtoGateway {
    _1 = 1, 
}

export enum ExecutePaymentDtoEditionPaymentType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum ExecutePaymentDtoPaymentPeriodType {
    _30 = 30, 
    _365 = 365, 
}

export enum TenantLoginInfoDtoPaymentPeriodType {
    _30 = 30, 
    _365 = 365, 
}

export enum RegisterTenantInputSubscriptionStartType {
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum RegisterTenantInputGateway {
    _1 = 1, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, null));
}

function blobToText(blob: Blob): Observable<string> {
    return new Observable<string>((observer: any) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob); 
    });
}